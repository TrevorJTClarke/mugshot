var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.directive("alert",["$rootScope","$timeout","$compile","$templateCache",function(e,t,r,n){return{restrict:"E",replace:!0,template:'<div class="alert-parent"></div>',scope:{},link:function(o,i,c,a){function s(n){var o=+new Date,i=(n.title,n.icon?n.icon:null,e.$new(!0));i.alert={},i.alert.id=o,i.alert.icon=n.icon?n.icon:null,i.alert.type=n.type?n.type:"info",i.alert.title=n.title,i.alert.action=n.callback?function(){this.id;n.callback(),u(this)}:null;var c=r(p)(i);c[0].id=o,m=o,f.append(c),c.addClass(v),t(function(){c.addClass(h)},20),l=t(function(){u(c)},d)}function u(e){if(!e&&m)e=angular.element(document.getElementById(m));else{if(!e)return;e&&(e=angular.element(e))}e.removeClass(h),t(function(){e.remove()},300)}var l,p=n.get("alert.html"),f=angular.element(i),d=5e3,m="",v="alert-active",h="alert-visible";e.$on("ALERT:FIRE",function(e,t){t.title&&(window.clearTimeout(l),u(),t.dur&&(d=1e3*t.dur),s(t))})}}}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(e,t,r){var n=parseInt(r.fadeIn)||10;t.addClass("fade-in"),setTimeout(function(){t.css("opacity","1")},n)}}}]),MUG.directive("modal",["$timeout","$compile","$rootScope",function(e,t,r){return{restrict:"E",replace:!0,templateUrl:"modal.html",scope:{},link:function(e,t,n){function o(t){var n=t.remoteSource?t.remoteSource:t.source;e.compareItem.a=t.remoteSource?n:"screens/reference/"+r.project.id+"/"+n.replace(r.project.currentBatch+".png",r.project.currentReference+".png"),e.compareItem.b=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n,e.compareItem.c=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n.replace(".png","_diff.png")}var i="modal-open",c="modal-visible";e.project=angular.copy(r.project),e.activeOption="sides",e.opacityRange={},e.currentIndex=0,e.activeItem={},e.compareItem={a:"",b:"",c:""},e.viewer={items:[]},e.opacityRange={amount:.8,inverse:.2,percent:"80%"},e.$watch("opacityRange.amount",function(t,r){t!==r&&(e.opacityRange.inverse=(1-t).toFixed(2),e.opacityRange.percent=Math.round(100*t)+"%")}),e.optionMode=function(t){e.activeOption=t},r.$on("MODAL:CLOSE",function(t,r){e.close()}),r.$on("MODAL:OPEN",function(n,a){a&&a.type&&(e.currentIndex=0,e.project=angular.copy(r.project),"preview"===a.type&&(e.activeItem=a.item,e.viewer=a.project||{},e.viewer.items=null,e.compareItem.a="screens/"+e.activeItem.type+"/"+r.project.id+"/"+e.activeItem.source),"batch"===a.type&&a.items.length>0&&(e.activeItem=a.items[e.currentIndex],e.viewer=a.project||{},e.viewer.items=a.items,o(e.activeItem)),t.addClass(i),setTimeout(function(){t.addClass(c)},30))}),e.close=function(){t.removeClass(c),setTimeout(function(){t.removeClass(i)},230)},e.modalActionNav=function(t){if(!(e.viewer.items.length<1)){var r,n=e.viewer.items.length-1;r="right"===t?e.currentIndex===n?0:e.currentIndex+1:0===e.currentIndex?n:e.currentIndex-1,e.activeItem=e.viewer.items[r],e.currentIndex=r,o(e.activeItem)}},e.goToIndex=function(t){e.currentIndex!==t&&(e.activeItem=e.viewer.items[t],e.currentIndex=t,o(e.activeItem))}}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(e,t,r){return{scope:{},link:function(n,o,i,c){function a(e){var o=+new Date,i=e.msg,c=e.icon?e.icon:v,a=p.replace("BODY",i).replace("ICON",c),h=r(a)(n);h[0].id=o,m=o,f.append(h);var g=f.find("#"+o);u(g,e.type),e.callback&&g.find(".msg-action").addClass("show"),t(function(){g.addClass("add")},20),l=t(function(){s(g)},d)}function s(e){if(!e&&m)e=f.find("#"+m);else if(!e)return;e.removeClass("add"),e.addClass("remove"),t(function(){angular.element(e).remove()},300)}function u(e,t){e.removeClass("msg-info"),e.removeClass("msg-warn"),t&&e.addClass("msg-"+t)}var l,p='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',f=angular.element(o),d=5e3,m="",v="info";n.body="",n.callback=null,n.icon=v,n.action=function(){var e=f.find("#"+this.id);n.callback(),s(e)},e.$on("MSGCENTER:FIRE",function(e,t){t.msg&&(window.clearTimeout(l),s(),t.dur&&(d=1e3*t.dur),t.callback&&(n.callback=t.callback),a(t))})}}}]);var P=require("./vendor/core/preloader");MUG.directive("preloader",["$rootScope","$timeout",function(e,t){return{replace:!0,restrict:"E",scope:{},template:'<div class="preloader"></div>',link:function(r,n,o,i){function c(e,t){if(t&&t.msg){l=t.msg;var r;switch(l){case"Opening Browser Session":r=0;break;case"Capturing Screens":r=1}l!==p&&s&&s.animate&&s.animate(r,30,function(){p=l})}}function a(){u.addClass(f)}var s,u,l,p,f="loading";t(function(){s=new P.Browser,s.init(),u=document.querySelector(".preloader"),u.appendChild(s.instance),s.drawBrowser()},30),e.$on("PRELOADER:UPDATE",c),e.$on("PRELOADER:OFF",a)}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(e,t){return{restrict:"EA",link:function(r,n,o){var i;o.$observe("fromTime",function(t){i=e.parse(t)}),r.$watch(function(){return t.getTime()-i},function(t){angular.element(n).text(e.inWords(t))})}}}]);var fs=require("fs"),async=require("async");MUG.factory("Compare",["$q","Config",function(e,t){function r(e,t){fs.readFile(o+e,"base64",t)}function n(n,o){var c=e.defer(),a={};return resemble.outputSettings(t.Compare),async.map([n,o],r,function(e,t){var r=i+t[0],n=i+t[1];e&&c.reject(e),resemble(r).compareTo(n).ignoreColors().onComplete(function(e){a.report=e,a.src=e.getImageDataUrl(),c.resolve(a)})}),c.promise}var o=__dirname+"/",i="data:image/png;base64,",c=["passed","warning","failed"];return{runSingle:n,getStatus:function(e){var t=parseFloat(e.misMatchPercentage);return.1>t?e.isSameDimensions===!1?c[1]:c[0]:t>.1&&2>t?c[1]:c[2]}}}]),MUG.factory("nowTime",["$timeout",function(e){var t=Date.now(),r=function(){e(function(){t=Date.now(),r()},1e3)};return r(),{getTime:function(){return t}}}]);var fs=require("fs"),path=require("path"),AWS=require("./vendor/core/aws");MUG.factory("Projects",["$q",function(e){function t(e){return"number"==typeof e&&e===parseInt(e,10)&&(e=Array(e+1).join("x")),e.replace(/x/g,function(){var e=Math.round(61*Math.random())+48;return e=e>57?e+7>90?e+13:e+7:e,String.fromCharCode(e)})}function r(e){e=e||0;var r=t(12);return{id:r,title:"Project "+(parseInt(e,10)+1),timestamp:+new Date,totals:{success:null,warning:null,error:null,views:0}}}function n(e){t(12);return{batchHistory:{},currentBatch:null,currentReference:null,id:e.id,title:e.title,timestamp:e.timestamp,viewports:[],selectors:[],cookies:[],meta:{url:null,readyEvent:null,delay:null,misMatchThreshold:null}}}function o(e,t){var r;try{r=fs.readFileSync(e,"utf8")}catch(n){if("ENOENT"===n.code)return t||{};throw n}return JSON.parse(r)}function i(e){try{var t=fs.readdirSync(e)}catch(r){return}if(t.length>0)for(var n=0;n<t.length;n++){var o=path.join(e,t[n]);fs.statSync(o).isFile()?fs.unlinkSync(o):rmDir(o)}}function c(t,r){var n=e.defer();return fs.writeFile(t,JSON.stringify(r),function(e){return e?void n.reject(e):void n.resolve()}),n.promise}function a(t){var r=e.defer();return fs.unlink(t,function(e){return e?void r.reject(e):void r.resolve()}),r.promise}var s=__dirname+"/projects.json",u=__dirname+"/projects/";return{getAll:function(){return o(s,[])},getById:function(e){return o(u+e+".json")},getTypeById:function(e,t){return o(u+e+"_"+t+".json",[])},validate:function(e){var t=e.cookies,r=e.viewports,n=e.selectors,o=e.title,i=e.meta.url,c=!0;return!r||!n||!o||!i||r.length<1||n.length<1?!1:(r&&r.map(function(e,t){e.width&&e.height&&e.name||(c=!1)}),n&&n.map(function(e,t){e.query&&e.type||(c=!1)}),t&&t.map(function(e,t){e.name&&e.path&&e.value||(c=!1)}),c)},createNew:function(){var t=e.defer(),o=JSON.parse(fs.readFileSync(s,"utf8")),i=r(o.length),c=n(i);return o.unshift(i),fs.writeFile(s,JSON.stringify(o),function(e){return e?void t.reject(e):void fs.writeFile(u+i.id+".json",JSON.stringify(c),function(e){return e?void t.reject(e):void fs.writeFile(u+i.id+"_history.json",JSON.stringify([]),function(e){return e?void t.reject(e):void t.resolve(i)})})}),t.promise},save:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(s,"utf8"));return n.map(function(e,r){e.id===t.id&&(n[r].title=t.title,n[r].timestamp=+new Date)}),fs.writeFile(u+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve(t)})}),r.promise},remove:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(s,"utf8"));return n.map(function(e,r){e.id===t&&n.splice(r,1)}),fs.unlink(u+t+".json",function(e){return e?void r.reject(e):void fs.unlink(u+t+"_history.json",function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve()})})}),r.promise},clearHistory:function(t){var r=e.defer(),n=o(s,[]);return t.currentBatch=null,t.currentReference=null,t.batchHistory={},n.map(function(e,r){e.id===t.id&&(n[r].totals.success=0,n[r].totals.warning=0,n[r].totals.error=0,n[r].totals.views=0)}),this.cleanImageFiles(t),fs.writeFile(u+t.id+"_history.json",JSON.stringify([]),function(e){return e?void r.reject(e):void fs.writeFile(u+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve()})})}),r.promise},sync:function(t){if(t){for(var r=this,n=e.defer(),o=this.getById(t),i=this.getTypeById(t,"history"),c=[],a=0;a<i.length;a++){var s=i[a];if(-1===s.source.search("amazon")){var u=s.source,l=s.type,p=__dirname+"/screens/"+l+"/"+o.id+"/"+u;c.push({key:l+"/"+u,path:p})}}return AWS.init().upload(c,o.id).then(function(e){r.cleanAfterSync(o,e).then(n.resolve,n.reject)},function(e){n.reject(e)}),n.promise}},cleanAfterSync:function(t,r){var n=e.defer(),i=o(u+t.id+"_history.json",[]),s=[],l=[];t.updatedAt=+new Date;for(var p=0;p<r.length;p++){var f=r[p],d=f.split("/"),m=d[d.length-2],v=d[d.length-1];i.map(function(e,n){if(e.source===v){delete i[n].source,i[n].remoteSource=r[p];var o=__dirname+"/screens/"+m+"/"+t.id+"/"+v,c=a(o);if(l.push(c),"compare"===m){var s=a(o.replace(".","_diff."));l.push(s)}}})}var h=__dirname+"/projects/"+t.id+".json",g=h.replace(".json","_history.json"),y=c(h,t),j=c(g,i);l.unshift(y),l.unshift(j),s.push({key:t.id,path:h}),s.push({key:t.id+"_history",path:g});var w=AWS.init().upload(s,t.id);return l.unshift(w),e.all(l).then(n.resolve,n.reject),n.promise},cleanImageFiles:function(e){var t=__dirname+"/screens/BASE/"+e.id,r=t.replace("BASE","compare"),n=t.replace("BASE","reference");i(r),i(n)}}}]),MUG.factory("timeAgo",function(){function e(e){var t=e.toString().slice(0,13);return 13==t.length?parseInt(t):e}var t={};return t.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},t.inWords=function(e){function r(t,r){var o=angular.isFunction(t)?t(r,e):t,i=n.numbers&&n.numbers[r]||r;return o.replace(/%d/i,i)}var n=t.settings.strings,o=n.prefixAgo,i=n.suffixAgo;t.settings.allowFuture&&0>e&&(o=n.prefixFromNow,i=n.suffixFromNow);var c=Math.abs(e)/1e3,a=c/60,s=a/60,u=s/24,l=u/365,p=45>c&&r(n.seconds,Math.round(c))||90>c&&r(n.minute,1)||45>a&&r(n.minutes,Math.round(a))||90>a&&r(n.hour,1)||24>s&&r(n.hours,Math.round(s))||42>s&&r(n.day,1)||30>u&&r(n.days,Math.round(u))||45>u&&r(n.month,1)||365>u&&r(n.months,Math.round(u/30))||1.5>l&&r(n.year,1)||r(n.years,Math.round(l)),f=void 0===n.wordSeparator?" ":n.wordSeparator;return[o,p,i].join(f).trim()},t.parse=function(t){if(angular.isNumber(t)){t+="";var r=e(t);return parseInt(r,10)}var n=(t||"").trim();return n=n.replace(/\.\d+/,""),n=n.replace(/-/,"/").replace(/-/,"/"),n=n.replace(/T/," ").replace(/Z/," UTC"),n=n.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(n)},t}),MUG.filter("timeAgo",["nowTime","timeAgo",function(e,t){return function(r){var n=t.parse(r),o=e.getTime()-n;return t.inWords(o)}}]);var ipc=require("ipc");MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","Projects",function(e,t,r,n,o){e.currentProjectId="",t.createNewProject=function(){o.createNew().then(function(t){e.$broadcast("SIDEPANEL:NEWPROJECT",t),r.go("projects.settings",{id:t.id})},function(e){console.log("err",e)})},ipc.on("NAVIGATE:TO",function(e){e&&e.location&&(console.log("NAVIGATE:TO",e),r.go(e.location))})}]);var fs=require("fs"),AWS=require("./vendor/core/aws");MUG.controller("PreferencesCtrl",["$rootScope","$scope","$state",function(e,t,r){t.awsConfig={autosync:!0,bucket:"",accessKeyId:"",secretAccessKey:""},t.awsConfig=AWS.getConfig(),t.save=function(){AWS.setConfig(t.awsConfig)}}]),MUG.controller("ProjectCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){e.project=n.getById(r.id)}]),MUG.controller("ProjectHistoryCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){t.activeFilter="All",t.activeFilterQuery="",t.historyItems=n.getTypeById(r.id,"history"),t.changeFilter=function(e){t.activeFilter=e,t.activeFilterQuery="All"==e?"":e},t.previewItem=function(t){e.$emit("MODAL:OPEN",{type:"preview",item:t,project:e.project})}}]);var ipc=require("ipc");MUG.controller("ProjectRunnerCtrl",["$rootScope","$scope","$timeout","$stateParams","Projects",function(e,t,r,n,o){function i(e){function r(e){if(e.status){var r=0;switch(e.status){case"warning":r=1;break;case"failed":r=2}n[r].items.unshift(e),t.activeData[n[r].type]=t.activeData[n[r].type]+1}}if(!e||e.length<1)return t.hasReference=!1,[];t.activeData={},t.activeData.success=0,t.activeData.warning=0,t.activeData.error=0;var n=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];return e.map(function(e,n){e.batch===t.currentBatch&&r(e)}),t.hasReference=!0,n}function c(){if(null!==e.project.currentBatch){var r=(void 0!==typeof e.project.currentBatch?e.project.currentBatch:0,o.getTypeById(n.id,"history"));t.batchItems=i(r),t.runningType=e.project.currentReference>=e.project.currentBatch?"reference":"compare"}}function a(){var t=o.validate(e.project);return t||e.$broadcast("ALERT:FIRE",{title:"Please finish configuring settings!",dur:5,type:"error",icon:"stop"}),t}function s(){t.hasSettings=a(),t.hasReference=null!==e.project.currentReference,t.currentBatch=e.project.currentBatch,"reference"===t.runningType?t.hasCompare=!1:(t.hasCompare=null!==e.project.currentBatch&&0!==e.project.currentBatch,t.hasCompare=e.project.currentReference<=e.project.currentBatch)}function u(){e.project=o.getById(e.project.id,"history"),t.activeData=e.project&&e.project.batchHistory?e.project.batchHistory[t.currentBatch]:null,e.$emit("SIDEPANEL:UPDATE",e.project)}function l(r){r&&r.msg&&r.percent&&(t.progress.percent=parseInt(r.percent,10),t.progress.title=r.msg?r.msg:t.progress.title,e.$emit("PRELOADER:UPDATE",r))}function p(){u(),c(),s(),t.processing=!1}function f(e){console.log("RUNNER:FAILED reason",e),t.processing=!1}t.processing=!1,t.hasSettings=!1,t.hasReference=!1,t.hasCompare=!1,t.runningType="reference",t.batchItems=[],t.activeData={},t.currentBatch=e.project.currentBatch||0,t.progress={percent:0,title:"Starting"},u(),c(),s(),t.previewBatch=function(t){e.$emit("MODAL:OPEN",{type:"batch",items:t,project:e.project})},t.newCompare=function(){var r=a();r&&(t.runningType="compare",t.processing=!0,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"compare",projectId:e.project.id}))},t.newReference=function(){var r=a();r&&(t.processing=!0,t.runningType="reference",t.hasCompare=!1,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"reference",projectId:e.project.id}))},ipc.on("RUNNER:PROGRESS",l),ipc.on("RUNNER:COMPLETE",p),ipc.on("RUNNER:FAILED",f)}]),MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){function o(t,r){e.project[t].push(r)}var i;t.selectorTypes=["container","hide","remove"],t.hasChanges=!1,t.master={},angular.copy(e.project,t.master),t.$watch("project",function(e,r){e!=r&&(t.hasChanges=!0,t.save())},!0),t.save=function(){i&&window.clearTimeout(i),i=setTimeout(function(){n.save(e.project).then(function(r){e.$emit("SIDEPANEL:UPDATE",r),angular.copy(e.project,t.master),t.hasChanges=!1},function(e){console.log("err",e)})},200)},t.syncNow=function(){e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:5,type:"info"}),n.sync(e.project.id).then(function(t){e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:5,type:"success",icon:"check"})},function(t){console.log("syncNow err",t),e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})})},t.cancelSave=function(){var r=confirm("Are you sure you want to clear all your changes?");r&&(angular.copy(t.master,e.project),t.hasChanges=!1)},t.deleteProject=function(){var o=confirm("Are you sure you want to delete this project?");if(o){var i=e.project.id;n.remove(i).then(function(n){e.$emit("SIDEPANEL:REMOVE",{id:i}),r.go("main"),e.project={},t.hasChanges=!1,e.$broadcast("ALERT:FIRE",{title:"Project Removed Successfully",dur:5,type:"success"})},function(n){console.log("err",n),e.$emit("SIDEPANEL:REMOVE",{id:i}),r.go("main"),e.project={},t.hasChanges=!1})}},t.addViewport=function(){var e={active:!0,name:null,width:null,height:null};o("viewports",e)},t.addSelector=function(){var e={active:!0,type:"container",query:null};o("selectors",e)},t.addCookie=function(){var e={active:!0,name:null,value:null,path:null};o("cookies",e)},t.activateType=function(r,n){e.project[r][n].active=e.project[r][n].active===!0||"true"===e.project[r][n].active?!1:!0,t.save()},t.deleteTypeItem=function(r,n){e.project[r].splice(n,1),t.save()},t.clearHistory=function(){n.clearHistory(e.project).then(function(t){e.$broadcast("ALERT:FIRE",{title:"Cleared All History!",dur:5,type:"success",icon:"history"})},function(t){e.$broadcast("ALERT:FIRE",{title:"Error Occurred! Please try again.",dur:5,type:"error",icon:"stop"})})}}]);var fs=require("fs");MUG.controller("SidePanelCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){t.projects=[],t.projects=n.getAll(),e.$on("SIDEPANEL:NEWPROJECT",function(e,r){r&&r.id&&t.projects.unshift(r)}),e.$on("SIDEPANEL:UPDATE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&(t.projects[n].title=r.title,t.projects[n].timestamp=r.timestamp,r.batchHistory[r.currentBatch]&&(r.batchHistory[r.currentBatch].success&&(t.projects[n].totals.success=r.batchHistory[r.currentBatch].success),r.batchHistory[r.currentBatch].warning&&(t.projects[n].totals.warning=r.batchHistory[r.currentBatch].warning),r.batchHistory[r.currentBatch].error&&(t.projects[n].totals.error=r.batchHistory[r.currentBatch].error),r.batchHistory[r.currentBatch].views&&(t.projects[n].totals.views=r.batchHistory[r.currentBatch].views)))})}),e.$on("SIDEPANEL:REMOVE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&t.projects.splice(n,1)})}),t.goToProject=function(t){var n="runner";r.go("projects."+n,{id:t}),e.currentProjectId=t}}]),MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{},Compare:{errorColor:{red:255,green:0,blue:255},errorType:"flat",transparency:1,largeImageThreshold:0}}),MUG.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("main",{url:"/",templateUrl:"main.html"}).state("preferences",{url:"/preferences",templateUrl:"preferences.html",controller:"PreferencesCtrl"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html",controller:"ProjectSettingsCtrl"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html",controller:"ProjectRunnerCtrl"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html",controller:"ProjectHistoryCtrl"}),t.otherwise("/")}]),MUG.run(["$rootScope","$http",function(e,t){var r=t.defaults.headers.common;r["Content-Type"]="application/json",e.$on("$stateChangeError",function(e,t,r,n,o,i){console.log("$stateChangeError",i)})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFsZXJ0LmpzIiwiZmFkZWluLmpzIiwibW9kYWwuanMiLCJtc2djZW50ZXIuanMiLCJwcmVsb2FkZXIuanMiLCJ0aW1lYWdvLmpzIiwiY29tcGFyZS5qcyIsIm5vd3RpbWUuanMiLCJwcm9qZWN0cy5qcyIsInRpbWUtYWdvLmpzIiwibWFpbmN0cmwuanMiLCJwcmVmZXJlbmNlc2N0cmwuanMiLCJwcm9qZWN0Y3RybC5qcyIsInByb2plY3RoaXN0b3J5Y3RybC5qcyIsInByb2plY3RydW5uZXJjdHJsLmpzIiwicHJvamVjdHNldHRpbmdzY3RybC5qcyIsInNpZGVwYW5lbGN0cmwuanMiLCJjb25maWcuanMiLCJyb3V0ZXMuanMiLCJpbml0LmpzIl0sIm5hbWVzIjpbIk1VRyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJkaXJlY3RpdmUiLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCIkY29tcGlsZSIsIiR0ZW1wbGF0ZUNhY2hlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwidGVtcGxhdGUiLCJzY29wZSIsImxpbmsiLCJlbCIsImF0dHJzIiwiY3RybCIsInNob3dNZXNzYWdlIiwiZGF0YSIsIl9pZCIsIkRhdGUiLCIkdG1wU2NvcGUiLCJ0aXRsZSIsImljb24iLCIkbmV3IiwiYWxlcnQiLCJpZCIsInR5cGUiLCJhY3Rpb24iLCJjYWxsYmFjayIsInRoaXMiLCJjbGVhckVsIiwiYWxlcnRFbCIsImFsZXJ0VGVtcGxhdGUiLCJwcmV2aW91c0lkIiwiX2VsIiwiYXBwZW5kIiwiYWRkQ2xhc3MiLCJhbGVydEFjdGl2ZSIsImFsZXJ0VmlzaWJsZSIsInRpbWVyIiwiZHVyYXRpb24iLCJlbGVtIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsImdldCIsIiRvbiIsImUiLCJ3aW5kb3ciLCJjbGVhclRpbWVvdXQiLCJkdXIiLCJvZmZzZXQiLCJwYXJzZUludCIsImZhZGVJbiIsInNldFRpbWVvdXQiLCJjc3MiLCJ0ZW1wbGF0ZVVybCIsIiRzY29wZSIsIiRlbGVtZW50IiwiJGF0dHIiLCJzZXRBY3RpdmVJdGVtIiwiaW1hZ2VTcmMiLCJyZW1vdGVTb3VyY2UiLCJzb3VyY2UiLCJjb21wYXJlSXRlbSIsImEiLCJwcm9qZWN0IiwiY3VycmVudEJhdGNoIiwiY3VycmVudFJlZmVyZW5jZSIsImIiLCJjIiwibW9kYWxBY3RpdmUiLCJtb2RhbFZpc2libGUiLCJjb3B5IiwiYWN0aXZlT3B0aW9uIiwib3BhY2l0eVJhbmdlIiwiY3VycmVudEluZGV4IiwiYWN0aXZlSXRlbSIsInZpZXdlciIsIml0ZW1zIiwiYW1vdW50IiwiaW52ZXJzZSIsInBlcmNlbnQiLCIkd2F0Y2giLCJudiIsIm92IiwidG9GaXhlZCIsIk1hdGgiLCJyb3VuZCIsIm9wdGlvbk1vZGUiLCJhcmdzIiwiY2xvc2UiLCJpdGVtIiwibGVuZ3RoIiwibW9kYWxBY3Rpb25OYXYiLCJuZXh0SWR4IiwidG90YWwiLCJnb1RvSW5kZXgiLCJpZHgiLCJuZXdCb2R5IiwibXNnIiwibmV3SWNuIiwiZGVmYXVsdEljb24iLCJtc2dUZW1wbGF0ZSIsIm5ld01lc3NhZ2UiLCJtc2dFbCIsImZpbmQiLCJjaGFuZ2VUeXBlIiwiYm9keSIsImFjdGlvbkVsIiwiUCIsInJlcXVpcmUiLCJ1cGRhdGVQcmVsb2FkZXIiLCJwcmV2aW91c1RpdGxlIiwiQiIsImFuaW1hdGUiLCJyZXNldFByZWxvYWRlciIsImxvYWRpbmciLCJCcm93c2VyIiwiaW5pdCIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsImluc3RhbmNlIiwiZHJhd0Jyb3dzZXIiLCJ0aW1lQWdvIiwibm93VGltZSIsImZyb21UaW1lIiwiJG9ic2VydmUiLCJ2YWx1ZSIsInBhcnNlIiwiZ2V0VGltZSIsInRleHQiLCJpbldvcmRzIiwiZnMiLCJhc3luYyIsImZhY3RvcnkiLCIkcSIsIkNvbmZpZyIsInJlYWRBc3luYyIsImZpbGUiLCJyZWFkRmlsZSIsImZpbGVEaXJQcmVmaXgiLCJjb21wYXJlU2luZ2xlIiwiZGZkIiwiZGVmZXIiLCJvdXRwdXQiLCJyZXNlbWJsZSIsIm91dHB1dFNldHRpbmdzIiwiQ29tcGFyZSIsIm1hcCIsImVyciIsInJlc3VsdHMiLCJhRGF0YSIsImltYWdlUHJlZml4IiwiYkRhdGEiLCJyZWplY3QiLCJjb21wYXJlVG8iLCJpZ25vcmVDb2xvcnMiLCJvbkNvbXBsZXRlIiwiZGlmZkRhdGEiLCJyZXBvcnQiLCJzcmMiLCJnZXRJbWFnZURhdGFVcmwiLCJyZXNvbHZlIiwicHJvbWlzZSIsIl9fZGlybmFtZSIsInN0YXR1c1R5cGVzIiwicnVuU2luZ2xlIiwiZ2V0U3RhdHVzIiwibWlzTWF0Y2hWYWx1ZSIsInBhcnNlRmxvYXQiLCJtaXNNYXRjaFBlcmNlbnRhZ2UiLCJpc1NhbWVEaW1lbnNpb25zIiwibm93IiwidXBkYXRlVGltZSIsInBhdGgiLCJBV1MiLCJjcmVhdGVVVUlEIiwicyIsIkFycmF5Iiwiam9pbiIsIm4iLCJyYW5kb20iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjcmVhdGVEdW1teVByb2plY3QiLCJwcm9qZWN0SWQiLCJ0aW1lc3RhbXAiLCJ0b3RhbHMiLCJzdWNjZXNzIiwid2FybmluZyIsImVycm9yIiwidmlld3MiLCJjcmVhdGVEdW1teVByb2plY3RGaWxlIiwib3B0aW9ucyIsImJhdGNoSGlzdG9yeSIsInZpZXdwb3J0cyIsInNlbGVjdG9ycyIsImNvb2tpZXMiLCJtZXRhIiwidXJsIiwicmVhZHlFdmVudCIsImRlbGF5IiwibWlzTWF0Y2hUaHJlc2hvbGQiLCJnZXRKc29uRmlsZSIsInJlYWRGaWxlU3luYyIsImNvZGUiLCJKU09OIiwicmVtb3ZlQWxsSW5EaXJlY3RvcnkiLCJkaXJQYXRoIiwiZmlsZXMiLCJyZWFkZGlyU3luYyIsImkiLCJmaWxlUGF0aCIsInN0YXRTeW5jIiwiaXNGaWxlIiwidW5saW5rU3luYyIsInJtRGlyIiwicHJvbWlzZVdyaXRlIiwiX3EiLCJ3cml0ZUZpbGUiLCJzdHJpbmdpZnkiLCJwcm9taXNlUmVtb3ZlIiwiX3oiLCJ1bmxpbmsiLCJwcm9qZWN0c1BhdGgiLCJwcm9qZWN0RmlsZXNQYXRoIiwiZ2V0QWxsIiwiZ2V0QnlJZCIsImdldFR5cGVCeUlkIiwidmFsaWRhdGUiLCJib29sIiwib2JqIiwid2lkdGgiLCJoZWlnaHQiLCJuYW1lIiwicXVlcnkiLCJjcmVhdGVOZXciLCJhbGxQcm9qZWN0cyIsIm5ld1Byb2plY3REYXRhIiwibmV3UHJvamVjdEZpbGUiLCJ1bnNoaWZ0Iiwic2F2ZSIsInByb2plY3REYXRhIiwic3BsaWNlIiwiY2xlYXJIaXN0b3J5IiwibWFpblByb2plY3RzIiwiY2xlYW5JbWFnZUZpbGVzIiwic3luYyIsIl90aGlzIiwiZCIsInByb2plY3RGaWxlcyIsInJlYWR5RmlsZXMiLCJ0bXBGaWxlIiwic2VhcmNoIiwicHVzaCIsImtleSIsInVwbG9hZCIsInRoZW4iLCJyZXMiLCJjbGVhbkFmdGVyU3luYyIsIm5ld1JlZnMiLCJkZmRkIiwiaGlzdG9yeURhdGEiLCJ1cGRhdGVkUmVtb3RlRmlsZXMiLCJxdWV1ZVByb21pc2VzIiwidXBkYXRlZEF0IiwidG1wU3JjIiwidG1wUmVmIiwic3BsaXQiLCJ0bXBUeXBlIiwidG1wQWxpYXMiLCJyZW1SZWZQYXRoIiwicmVtUmVmIiwicmVtUmVmRGlmZiIsInByb2plY3RGaWxlIiwicHJvamVjdEhpc3RvcnlGaWxlIiwicHJvamVjdFdyaXRlIiwicHJvamVjdEhpc3RvcnlXcml0ZSIsImF3c1VwbG9hZCIsImFsbCIsImJhc2UiLCJjb21wcyIsInJlZnMiLCJ0cmltRGlnaXRzIiwibnVtIiwibSIsInRvU3RyaW5nIiwic2xpY2UiLCJzZXJ2aWNlIiwic2V0dGluZ3MiLCJyZWZyZXNoTWlsbGlzIiwiYWxsb3dGdXR1cmUiLCJzdHJpbmdzIiwicHJlZml4QWdvIiwicHJlZml4RnJvbU5vdyIsInN1ZmZpeEFnbyIsInN1ZmZpeEZyb21Ob3ciLCJzZWNvbmRzIiwibWludXRlIiwibWludXRlcyIsImhvdXIiLCJob3VycyIsImRheSIsImRheXMiLCJtb250aCIsIm1vbnRocyIsInllYXIiLCJ5ZWFycyIsIm51bWJlcnMiLCJkaXN0YW5jZU1pbGxpcyIsInN1YnN0aXR1dGUiLCJzdHJpbmdPckZ1bmN0aW9uIiwibnVtYmVyIiwic3RyaW5nIiwiaXNGdW5jdGlvbiIsIiRsIiwicHJlZml4Iiwic3VmZml4IiwiYWJzIiwid29yZHMiLCJzZXBhcmF0b3IiLCJ1bmRlZmluZWQiLCJ3b3JkU2VwYXJhdG9yIiwidHJpbSIsImlzbzg2MDEiLCJpc051bWJlciIsIm9yaWdpbmFsVGltZXN0YW1wIiwiZmlsdGVyIiwiZGlmZiIsImlwYyIsImNvbnRyb2xsZXIiLCIkc3RhdGUiLCJQcm9qZWN0cyIsImN1cnJlbnRQcm9qZWN0SWQiLCJjcmVhdGVOZXdQcm9qZWN0IiwiJGJyb2FkY2FzdCIsImdvIiwiY29uc29sZSIsImxvZyIsIm9uIiwibG9jYXRpb24iLCJhd3NDb25maWciLCJhdXRvc3luYyIsImJ1Y2tldCIsImFjY2Vzc0tleUlkIiwic2VjcmV0QWNjZXNzS2V5IiwiZ2V0Q29uZmlnIiwic2V0Q29uZmlnIiwiJHN0YXRlUGFyYW1zIiwiYWN0aXZlRmlsdGVyIiwiYWN0aXZlRmlsdGVyUXVlcnkiLCJoaXN0b3J5SXRlbXMiLCJjaGFuZ2VGaWx0ZXIiLCJwcmV2aWV3SXRlbSIsIiRlbWl0IiwicHJvY2Vzc0JhdGNoIiwiYWxsRGF0YSIsInBsYWNlSXRlbSIsInN0YXR1cyIsInRhcmdldCIsImZvcm1hdHRlZCIsImFjdGl2ZURhdGEiLCJoYXNSZWZlcmVuY2UiLCJiYXRjaCIsInNldHVwQ3VycmVudEJhdGNoIiwiYmF0Y2hJdGVtcyIsInJ1bm5pbmdUeXBlIiwidmFsaWRhdGVQcm9qZWN0IiwiaXNWYWxpZCIsImNoZWNrU3RhdGUiLCJoYXNTZXR0aW5ncyIsImhhc0NvbXBhcmUiLCJncmFiTGF0ZXN0RGF0YSIsInJ1bm5lckV2ZW50cyIsInByb2dyZXNzIiwicnVubmVyQ29tcGxldGUiLCJwcm9jZXNzaW5nIiwicnVubmVyRmFpbGVkIiwicmVhc29uIiwicHJldmlld0JhdGNoIiwibmV3Q29tcGFyZSIsInZhbGlkIiwic2VuZCIsIm5ld1JlZmVyZW5jZSIsImFkZE5ld1R5cGUiLCJzYXZlVGltZXIiLCJzZWxlY3RvclR5cGVzIiwiaGFzQ2hhbmdlcyIsIm1hc3RlciIsIm5WIiwib1YiLCJzeW5jTm93IiwiY2FuY2VsU2F2ZSIsInN1cmUiLCJjb25maXJtIiwiZGVsZXRlUHJvamVjdCIsInByb2plY3RJRCIsImFkZFZpZXdwb3J0IiwibmV3Vmlld3BvcnQiLCJhY3RpdmUiLCJhZGRTZWxlY3RvciIsIm5ld1NlbGVjdG9yIiwiYWRkQ29va2llIiwibmV3Q29va2llIiwiYWN0aXZhdGVUeXBlIiwiZGVsZXRlVHlwZUl0ZW0iLCJwcm9qZWN0cyIsImdvVG9Qcm9qZWN0IiwiY29uc3RhbnQiLCJFTlYiLCJTVEFHRSIsIlBST0QiLCJlcnJvckNvbG9yIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiZXJyb3JUeXBlIiwidHJhbnNwYXJlbmN5IiwibGFyZ2VJbWFnZVRocmVzaG9sZCIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwic3RhdGUiLCJvdGhlcndpc2UiLCJydW4iLCIkaHR0cCIsIiRjb21tb24iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUFBLEtBQUFDLFFBQUFDLE9BQUEsV0FBQSxZQUFBLGdCQ21CQUYsS0FBQUcsVUFBQSxTQUNBLGFBQUEsV0FBQSxXQUFBLGlCQUNBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FDQUMsU0FBQSxJQUNBQyxTQUFBLEVBQ0FDLFNBQUEsbUNBQ0FDLFNBQ0FDLEtBQUEsU0FBQUQsRUFBQUUsRUFBQUMsRUFBQUMsR0FTQSxRQUFBQyxHQUFBQyxHQUNBLEdBQUFDLElBQUEsR0FBQUMsTUFHQUMsR0FGQUgsRUFBQUksTUFDQUosRUFBQSxLQUFBQSxFQUFBSyxL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QS9OLElBQUEsZ0JBQ0FoSixZQUFBLGdCQUNBbVIsV0FBQSxnQkFFQTRGLE1BQUEscUJBQ0EvTixJQUFBLFlBQ0FoSixZQUFBLHlCQUNBbVIsV0FBQSx3QkFFQTRGLE1BQUEsbUJBQ0EvTixJQUFBLFVBQ0FoSixZQUFBLHVCQUNBbVIsV0FBQSxzQkFFQTRGLE1BQUEsb0JBQ0EvTixJQUFBLFdBQ0FoSixZQUFBLHdCQUNBbVIsV0FBQSx1QkFzQkEyRixFQUFBRSxVQUFBLFFDckVBMWEsSUFBQTJhLEtBQUEsYUFBQSxRQUNBLFNBQUF2YSxFQUFBd2EsR0FHQSxHQUFBQyxHQUFBRCxFQUFBRSxTQUFBQyxRQUFBQyxNQUNBSCxHQUFBLGdCQUFBLG1CQUVBemEsRUFBQTRDLElBQUEsb0JBQUEsU0FBQWlZLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFwUCxHQUNBbUosUUFBQUMsSUFBQSxvQkFBQXBKIiwiZmlsZSI6Im11Zy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNVUcgPSBhbmd1bGFyLm1vZHVsZSgnbXVnc2hvdCcsIFsndWkucm91dGVyJywgJ211Z3RlbXBsYXRlcyddKTtcbiIsIi8qKlxuICogYWxlcnRcbiAqIGEgZGlyZWN0aXZlIGZvciBoYW5kbGluZyBhbGwgYWxlcnRzIGFuZCBub3RpY2VzIGZvciBhIHVzZXJcbiAqXG4gKiBVU0U6XG4gKiA8YWxlcnQ+PC9hbGVydD5cbiAqXG4gKiAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiBcIkhleSB0aGVyZSwgSW0gYSBtZXNzYWdlISFcIiwgZHVyOiA1LCB0eXBlOiBcImluZm9cIiwgaWNvbjogXCJpbmZvXCIsIGNhbGxiYWNrOiBmdW5jdGlvbigpe30gfSk7XG4gKlxuICogVFlQRVM6XG4gKiAtIGluZm8sIHN1Y2Nlc3MsIHdhcm5pbmcsIGVycm9yXG4gKlxuICogT1BUSU9OUzpcbiAqIC0gdGl0bGU6IHRoZSBjb250ZW50cyBvZiB0aGUgbWVzc2FnZSwgKFRPRE86IGNhbiBiZSBodG1sIG9yIHNpbXBsZSB0ZXh0KVxuICogLSBjYWxsYmFjazogYSBmdW5jdGlvbiB0byBmaXJlIG9uIGFjdGlvbiB0YWtlbiBvbiBtZXNzYWdlXG4gKiAtIGR1cjogdGhlIHRpbWVvdXQgb2YgdGhlIG1lc3NhZ2UsIGluIHNlY29uZHNcbiAqIC0gdHlwZTogc2VlIGFib3ZlIHR5cGVzXG4gKiAtIGljb246IG5vIGRlZmF1bHQsIHNlZSBodHRwczovL29jdGljb25zLmdpdGh1Yi5jb20vIGZvciBvcHRpb25zXG4gKi9cbk1VRy5kaXJlY3RpdmUoJ2FsZXJ0JyxcblsnJHJvb3RTY29wZScsICckdGltZW91dCcsICckY29tcGlsZScsICckdGVtcGxhdGVDYWNoZScsXG5mdW5jdGlvbigkcm9vdFNjb3BlLCAkdGltZW91dCwgJGNvbXBpbGUsICR0ZW1wbGF0ZUNhY2hlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cImFsZXJ0LXBhcmVudFwiPjwvZGl2PicsXG4gICAgc2NvcGU6IHt9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgIHZhciBhbGVydFRlbXBsYXRlID0gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdhbGVydC5odG1sJyk7XG4gICAgICB2YXIgX2VsID0gYW5ndWxhci5lbGVtZW50KGVsKTtcbiAgICAgIHZhciB0aW1lcjtcbiAgICAgIHZhciBkdXJhdGlvbiA9IDUwMDA7XG4gICAgICB2YXIgcHJldmlvdXNJZCA9ICcnO1xuICAgICAgdmFyIGFsZXJ0QWN0aXZlID0gJ2FsZXJ0LWFjdGl2ZSc7XG4gICAgICB2YXIgYWxlcnRWaXNpYmxlID0gJ2FsZXJ0LXZpc2libGUnO1xuXG4gICAgICBmdW5jdGlvbiBzaG93TWVzc2FnZShkYXRhKSB7XG4gICAgICAgIHZhciBfaWQgPSAoK25ldyBEYXRlKCkpO1xuICAgICAgICB2YXIgbmV3Qm9keSA9IGRhdGEudGl0bGU7XG4gICAgICAgIHZhciBuZXdJY24gPSAoZGF0YS5pY29uKSA/IGRhdGEuaWNvbiA6IG51bGw7XG4gICAgICAgIHZhciAkdG1wU2NvcGUgPSAkcm9vdFNjb3BlLiRuZXcodHJ1ZSk7XG5cbiAgICAgICAgLy8gc2V0dXAgc2ltcGxlIHNjb3BlIGZvciBvbmx5IHRoaXMgYWxlcnQgaXRlbVxuICAgICAgICAkdG1wU2NvcGUuYWxlcnQgPSB7fTtcbiAgICAgICAgJHRtcFNjb3BlLmFsZXJ0LmlkID0gX2lkO1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQuaWNvbiA9IChkYXRhLmljb24pID8gZGF0YS5pY29uIDogbnVsbDtcbiAgICAgICAgJHRtcFNjb3BlLmFsZXJ0LnR5cGUgPSAoZGF0YS50eXBlKSA/IGRhdGEudHlwZSA6ICdpbmZvJztcbiAgICAgICAgJHRtcFNjb3BlLmFsZXJ0LnRpdGxlID0gZGF0YS50aXRsZTtcbiAgICAgICAgJHRtcFNjb3BlLmFsZXJ0LmFjdGlvbiA9ICghZGF0YS5jYWxsYmFjaykgPyBudWxsIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFjdGlvbkVsID0gdGhpcy5pZDtcbiAgICAgICAgICBkYXRhLmNhbGxiYWNrKCk7XG4gICAgICAgICAgY2xlYXJFbCh0aGlzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYWxlcnRFbCA9ICRjb21waWxlKGFsZXJ0VGVtcGxhdGUpKCR0bXBTY29wZSk7XG5cbiAgICAgICAgLy8gc2V0IGEgdW5pcXVlIGlkXG4gICAgICAgIGFsZXJ0RWxbMF0uaWQgPSBfaWQ7XG4gICAgICAgIHByZXZpb3VzSWQgPSBfaWQ7XG5cbiAgICAgICAgLy8gdGhyb3cgaW50byBkb20sIHRoZW4gc2hvdyBpbiB2aWV3LCBzdGFydCB0aW1lclxuICAgICAgICBfZWwuYXBwZW5kKGFsZXJ0RWwpO1xuICAgICAgICBhbGVydEVsLmFkZENsYXNzKGFsZXJ0QWN0aXZlKTtcblxuICAgICAgICAvLyBzaG93XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGFsZXJ0RWwuYWRkQ2xhc3MoYWxlcnRWaXNpYmxlKTtcbiAgICAgICAgfSwgMjApO1xuXG4gICAgICAgIHRpbWVyID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xlYXJFbChhbGVydEVsKTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhckVsKGVsZW0pIHtcbiAgICAgICAgaWYgKCFlbGVtICYmIHByZXZpb3VzSWQpIHtcbiAgICAgICAgICBlbGVtID0gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZXZpb3VzSWQpKTtcbiAgICAgICAgfSBlbHNlIGlmICghZWxlbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtKSB7XG4gICAgICAgICAgZWxlbSA9IGFuZ3VsYXIuZWxlbWVudChlbGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoYWxlcnRWaXNpYmxlKTtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbS5yZW1vdmUoKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kb24oJ0FMRVJUOkZJUkUnLCBmdW5jdGlvbihlLCBkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YS50aXRsZSkgeyByZXR1cm47IH1cblxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgY2xlYXJFbCgpO1xuXG4gICAgICAgIGlmIChkYXRhLmR1cikge1xuICAgICAgICAgIGR1cmF0aW9uID0gZGF0YS5kdXIgKiAxMDAwO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hvd01lc3NhZ2UoZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCIvKipcbiAqIGZhZGVJblxuICogQSBkaXJlY3RpdmUgZm9yIGFuaW1hdGluZyBpbiBlbGVtZW50c1xuICovXG5NVUcuZGlyZWN0aXZlKCdmYWRlSW4nLCBbZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cnMpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChhdHRycy5mYWRlSW4pIHx8IDEwO1xuICAgICAgZWxlbS5hZGRDbGFzcygnZmFkZS1pbicpO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtLmNzcygnb3BhY2l0eScsICcxJyk7XG4gICAgICB9LCBvZmZzZXQpO1xuICAgIH1cbiAgfTtcblxufV0pO1xuIiwiLyoqXG4gKiBNb2RhbFxuICogQnVpbGRzIGEgbW9kYWwgZm9yIGltYWdlIHZpZXdpbmcgYW5kIGNvbXBhcmluZ1xuICpcbiAqIEB1c2FnZVxuICogPG1vZGFsPjwvbW9kYWw+XG4gKi9cbk1VRy5kaXJlY3RpdmUoJ21vZGFsJyxcblsnJHRpbWVvdXQnLCAnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsXG5mdW5jdGlvbigkdGltZW91dCwgJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6ICdtb2RhbC5odG1sJyxcbiAgICBzY29wZToge30sXG4gICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgIHZhciBtb2RhbEFjdGl2ZSA9ICdtb2RhbC1vcGVuJztcbiAgICAgIHZhciBtb2RhbFZpc2libGUgPSAnbW9kYWwtdmlzaWJsZSc7XG5cbiAgICAgICRzY29wZS5wcm9qZWN0ID0gYW5ndWxhci5jb3B5KCRyb290U2NvcGUucHJvamVjdCk7XG4gICAgICAkc2NvcGUuYWN0aXZlT3B0aW9uID0gJ3NpZGVzJztcbiAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UgPSB7fTtcbiAgICAgICRzY29wZS5jdXJyZW50SW5kZXggPSAwO1xuICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSB7fTtcbiAgICAgICRzY29wZS5jb21wYXJlSXRlbSA9IHtcbiAgICAgICAgYTogJycsXG4gICAgICAgIGI6ICcnLFxuICAgICAgICBjOiAnJ1xuICAgICAgfTtcbiAgICAgICRzY29wZS52aWV3ZXIgPSB7XG4gICAgICAgIGl0ZW1zOiBbXVxuICAgICAgfTtcbiAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UgPSB7XG4gICAgICAgIGFtb3VudDogMC44LFxuICAgICAgICBpbnZlcnNlOiAwLjIsXG4gICAgICAgIHBlcmNlbnQ6ICc4MCUnXG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJHdhdGNoKCdvcGFjaXR5UmFuZ2UuYW1vdW50JywgZnVuY3Rpb24obnYsIG92KSB7XG4gICAgICAgIGlmIChudiA9PT0gb3YpIHtyZXR1cm47fVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgb3RoZXIgdmFsdWVzXG4gICAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UuaW52ZXJzZSA9ICgxIC0gbnYpLnRvRml4ZWQoMik7XG4gICAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UucGVyY2VudCA9IE1hdGgucm91bmQobnYgKiAxMDApICsgJyUnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHNldCB0aGUgYWN0aXZlIGl0ZW0gd2l0aCBjb3JyZWN0IHBhdGhzXG4gICAgICBmdW5jdGlvbiBzZXRBY3RpdmVJdGVtKGRhdGEpIHtcbiAgICAgICAgdmFyIGltYWdlU3JjID0gKCFkYXRhLnJlbW90ZVNvdXJjZSkgPyBkYXRhLnNvdXJjZSA6IGRhdGEucmVtb3RlU291cmNlO1xuICAgICAgICAkc2NvcGUuY29tcGFyZUl0ZW0uYSA9ICghZGF0YS5yZW1vdGVTb3VyY2UpID8gJ3NjcmVlbnMvcmVmZXJlbmNlLycgKyAkcm9vdFNjb3BlLnByb2plY3QuaWQgKyAnLycgKyBpbWFnZVNyYy5yZXBsYWNlKCRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2ggKyAnLnBuZycsICRyb290U2NvcGUucHJvamVjdC5jdXJyZW50UmVmZXJlbmNlICsgJy5wbmcnKSA6IGltYWdlU3JjO1xuICAgICAgICAkc2NvcGUuY29tcGFyZUl0ZW0uYiA9ICghZGF0YS5yZW1vdGVTb3VyY2UpID8gJ3NjcmVlbnMvY29tcGFyZS8nICsgJHJvb3RTY29wZS5wcm9qZWN0LmlkICsgJy8nICsgaW1hZ2VTcmMgOiBpbWFnZVNyYztcbiAgICAgICAgJHNjb3BlLmNvbXBhcmVJdGVtLmMgPSAoIWRhdGEucmVtb3RlU291cmNlKSA/ICdzY3JlZW5zL2NvbXBhcmUvJyArICRyb290U2NvcGUucHJvamVjdC5pZCArICcvJyArIGltYWdlU3JjLnJlcGxhY2UoJy5wbmcnLCAnX2RpZmYucG5nJykgOiBpbWFnZVNyYztcbiAgICAgIH1cblxuICAgICAgLy8gQ2hvb3NlIHRoZSB2aWV3ZXIgbGF5b3V0XG4gICAgICAkc2NvcGUub3B0aW9uTW9kZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZU9wdGlvbiA9IHR5cGU7XG4gICAgICB9O1xuXG4gICAgICAkcm9vdFNjb3BlLiRvbignTU9EQUw6Q0xPU0UnLCBmdW5jdGlvbihlLCBhcmdzKSB7XG4gICAgICAgICRzY29wZS5jbG9zZSgpO1xuICAgICAgfSk7XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCdNT0RBTDpPUEVOJywgZnVuY3Rpb24oZSwgYXJncykge1xuICAgICAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MudHlwZSkgeyByZXR1cm47IH1cblxuICAgICAgICAvLyBNYWtlIHN1cmUgdG8gcmVzZXQgY3VycmVudCBJbmRleFxuICAgICAgICAkc2NvcGUuY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgJHNjb3BlLnByb2plY3QgPSBhbmd1bGFyLmNvcHkoJHJvb3RTY29wZS5wcm9qZWN0KTtcblxuICAgICAgICAvLyBTaG93IGEgc2luZ2xlIGl0ZW1cbiAgICAgICAgaWYgKGFyZ3MudHlwZSA9PT0gJ3ByZXZpZXcnKSB7XG4gICAgICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSBhcmdzLml0ZW07XG4gICAgICAgICAgJHNjb3BlLnZpZXdlciA9IGFyZ3MucHJvamVjdCB8fCB7fTtcbiAgICAgICAgICAkc2NvcGUudmlld2VyLml0ZW1zID0gbnVsbDtcbiAgICAgICAgICAkc2NvcGUuY29tcGFyZUl0ZW0uYSA9ICdzY3JlZW5zLycgKyAkc2NvcGUuYWN0aXZlSXRlbS50eXBlICsgJy8nICsgJHJvb3RTY29wZS5wcm9qZWN0LmlkICsgJy8nICsgJHNjb3BlLmFjdGl2ZUl0ZW0uc291cmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvdyBtdWx0aXBsZSBpdGVtc1xuICAgICAgICBpZiAoYXJncy50eXBlID09PSAnYmF0Y2gnICYmIGFyZ3MuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRzY29wZS5hY3RpdmVJdGVtID0gYXJncy5pdGVtc1skc2NvcGUuY3VycmVudEluZGV4XTtcbiAgICAgICAgICAkc2NvcGUudmlld2VyID0gYXJncy5wcm9qZWN0IHx8IHt9O1xuICAgICAgICAgICRzY29wZS52aWV3ZXIuaXRlbXMgPSBhcmdzLml0ZW1zO1xuICAgICAgICAgIHNldEFjdGl2ZUl0ZW0oJHNjb3BlLmFjdGl2ZUl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWFrZSB0aGUgbW9kYWwgYWN0aXZlIHdpdGggZGF0YVxuICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhtb2RhbEFjdGl2ZSk7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhtb2RhbFZpc2libGUpO1xuICAgICAgICB9LCAzMCk7XG4gICAgICB9KTtcblxuICAgICAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKG1vZGFsVmlzaWJsZSk7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhtb2RhbEFjdGl2ZSk7XG4gICAgICAgIH0sIDIzMCk7XG4gICAgICB9O1xuXG4gICAgICAvLyBTZXR1cCBvZiBsZWZ0L3JpZ2h0IG5hdmlnYXRpb25cbiAgICAgICRzY29wZS5tb2RhbEFjdGlvbk5hdiA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgaWYgKCRzY29wZS52aWV3ZXIuaXRlbXMubGVuZ3RoIDwgMSkgeyByZXR1cm47IH1cblxuICAgICAgICB2YXIgdG90YWwgPSAkc2NvcGUudmlld2VyLml0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBuZXh0SWR4O1xuXG4gICAgICAgIGlmICh0eXBlID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgbmV4dElkeCA9ICgkc2NvcGUuY3VycmVudEluZGV4ID09PSB0b3RhbCkgPyAwIDogJHNjb3BlLmN1cnJlbnRJbmRleCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dElkeCA9ICgkc2NvcGUuY3VycmVudEluZGV4ID09PSAwKSA/IHRvdGFsIDogJHNjb3BlLmN1cnJlbnRJbmRleCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuYWN0aXZlSXRlbSA9ICRzY29wZS52aWV3ZXIuaXRlbXNbbmV4dElkeF07XG4gICAgICAgICRzY29wZS5jdXJyZW50SW5kZXggPSBuZXh0SWR4O1xuICAgICAgICBzZXRBY3RpdmVJdGVtKCRzY29wZS5hY3RpdmVJdGVtKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEdvIGRpcmVjdGx5IHRvIGFuIGl0ZW1cbiAgICAgICRzY29wZS5nb1RvSW5kZXggPSBmdW5jdGlvbihpZHgpIHtcbiAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50SW5kZXggPT09IGlkeCkge3JldHVybjt9XG5cbiAgICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSAkc2NvcGUudmlld2VyLml0ZW1zW2lkeF07XG4gICAgICAgICRzY29wZS5jdXJyZW50SW5kZXggPSBpZHg7XG4gICAgICAgIHNldEFjdGl2ZUl0ZW0oJHNjb3BlLmFjdGl2ZUl0ZW0pO1xuICAgICAgfTtcblxuICAgIH1cbiAgfTtcbn1dKTtcbiIsIi8qKlxuICogbXNnQ2VudGVyXG4gKiBhIGRpcmVjdGl2ZSBmb3IgaGFuZGxpbmcgYWxsIG1lc3NhZ2UgcmVsYXkgZm9yIGEgdXNlclxuICpcbiAqIFVTRTpcbiAqICRyb290U2NvcGUuJGJyb2FkY2FzdCgnTVNHQ0VOVEVSOkZJUkUnLCB7IG1zZzogXCJIZXkgdGhlcmUsIEltIGEgbWVzc2FnZSEhXCIsIGR1cjogNSwgdHlwZTogXCJpbmZvXCIsIGljb246IFwiaW5mb1wiLCBjYWxsYmFjazogZnVuY3Rpb24oKXt9IH0pO1xuICpcbiAqIFRZUEVTOlxuICogLSBERUZBVUxULCBzaG93cyBncmVlbiBtZXNzYWdlLCB1c2VkIGZvciBzdWNjZXNzXG4gKiAtIFdhcm5pbmc6IFwid2FyblwiIC0gc2hvd3Mgb3JhbmdlIG1lc3NhZ2UsIHVzZWQgZm9yIGVycm9ycyBvciB3YXJuaW5nc1xuICogLSBJbmZvOiBcImluZm9cIiAtIHNob3dzIGRhcmsgYmx1ZSBtZXNzYWdlLCB1c2VkIGZvciBnZW5lcmFsIHRoaW5nc1xuICpcbiAqIE9QVElPTlM6XG4gKiAtIG1zZzogdGhlIGNvbnRlbnRzIG9mIHRoZSBtZXNzYWdlLCAoVE9ETzogY2FuIGJlIGh0bWwgb3Igc2ltcGxlIHRleHQpXG4gKiAtIGNhbGxiYWNrOiBhIGZ1bmN0aW9uIHRvIGZpcmUgb24gYWN0aW9uIHRha2VuIG9uIG1lc3NhZ2VcbiAqIC0gZHVyOiB0aGUgdGltZW91dCBvZiB0aGUgbWVzc2FnZVxuICogLSB0eXBlOiBzZWUgYWJvdmUgdHlwZXNcbiAqIC0gaWNvbjogZGVmYXVsdCBpcyBnbG9iZSwgY2FuIGJlIHNldCB0byBBTlkgaS1zcHJpdGVzIChzcHJpdGVzLmxlc3MpXG4gKi9cbk1VRy5kaXJlY3RpdmUoJ21zZ0NlbnRlcicsXG5bIFwiJHJvb3RTY29wZVwiLCBcIiR0aW1lb3V0XCIsIFwiJGNvbXBpbGVcIixcbmZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdGltZW91dCwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBzY29wZToge30sXG4gICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgIHZhciBtc2dUZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwibXNnXCIgbmctY2xpY2s9XCJhY3Rpb24oKVwiPicrXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJtc2ctaWNuXCI+PGkgY2xhc3M9XCJpdyBpLUlDT05cIj48L2k+PC9kaXY+JytcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1zZy1jb250XCI+Qk9EWTwvZGl2PicrXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJtc2ctYWN0aW9uXCI+PGkgY2xhc3M9XCJpYiBpLXItYXJyb3dcIj48L2k+PC9kaXY+JytcbiAgICAgICAgJzwvZGl2Pic7XG5cbiAgICAgIHZhciBfZWwgPSBhbmd1bGFyLmVsZW1lbnQoZWwpO1xuICAgICAgdmFyIHRpbWVyO1xuICAgICAgdmFyIGR1cmF0aW9uID0gNTAwMDtcbiAgICAgIHZhciBwcmV2aW91c0lkID0gXCJcIjtcbiAgICAgIHZhciBkZWZhdWx0SWNvbiA9IFwiaW5mb1wiO1xuXG4gICAgICBzY29wZS5ib2R5ID0gXCJcIjtcbiAgICAgIHNjb3BlLmNhbGxiYWNrID0gbnVsbDtcbiAgICAgIHNjb3BlLmljb24gPSBkZWZhdWx0SWNvbjtcbiAgICAgIHNjb3BlLmFjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBhY3Rpb25FbCA9IF9lbC5maW5kKFwiI1wiICsgdGhpcy5pZCk7XG4gICAgICAgIHNjb3BlLmNhbGxiYWNrKCk7XG4gICAgICAgIGNsZWFyRWwoIGFjdGlvbkVsICk7XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBzaG93TWVzc2FnZSAoIGRhdGEgKXtcbiAgICAgICAgdmFyIF9pZCA9ICgrbmV3IERhdGUoKSk7XG4gICAgICAgIHZhciBuZXdCb2R5ID0gZGF0YS5tc2c7XG4gICAgICAgIHZhciBuZXdJY24gPSAoZGF0YS5pY29uKT8gZGF0YS5pY29uIDogZGVmYXVsdEljb247XG5cbiAgICAgICAgdmFyIHRlbXBsYXRlID0gbXNnVGVtcGxhdGUucmVwbGFjZShcIkJPRFlcIiwgbmV3Qm9keSkucmVwbGFjZShcIklDT05cIiwgbmV3SWNuKTtcbiAgICAgICAgdmFyIG5ld01lc3NhZ2UgPSAkY29tcGlsZSh0ZW1wbGF0ZSkoc2NvcGUpO1xuXG4gICAgICAgIC8vIHNldCBhIHVuaXF1ZSBpZFxuICAgICAgICBuZXdNZXNzYWdlWzBdLmlkID0gX2lkO1xuICAgICAgICBwcmV2aW91c0lkID0gX2lkO1xuXG4gICAgICAgIC8vIHRocm93IGludG8gZG9tLCB0aGVuIHNob3cgaW4gdmlldywgc3RhcnQgdGltZXJcbiAgICAgICAgX2VsLmFwcGVuZCggbmV3TWVzc2FnZSApO1xuXG4gICAgICAgIC8vIHJlbWVtYmVyIHRoZSBuZXcgZWwgZm9yIGxhdGVyXG4gICAgICAgIHZhciBtc2dFbCA9IF9lbC5maW5kKFwiI1wiICsgX2lkKTtcbiAgICAgICAgY2hhbmdlVHlwZSggbXNnRWwsIGRhdGEudHlwZSApO1xuXG4gICAgICAgIGlmKGRhdGEuY2FsbGJhY2spe1xuICAgICAgICAgIG1zZ0VsLmZpbmQoXCIubXNnLWFjdGlvblwiKS5hZGRDbGFzcyhcInNob3dcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG1zZ0VsLmFkZENsYXNzKCdhZGQnKTtcbiAgICAgICAgfSwgMjApO1xuXG4gICAgICAgIHRpbWVyID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjbGVhckVsKCBtc2dFbCApO1xuICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsZWFyRWwgKCBlbGVtICkge1xuICAgICAgICBpZighZWxlbSAmJiBwcmV2aW91c0lkKXtcbiAgICAgICAgICBlbGVtID0gX2VsLmZpbmQoXCIjXCIgKyBwcmV2aW91c0lkKTtcbiAgICAgICAgfSBlbHNlIGlmKCFlbGVtKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoJ2FkZCcpO1xuICAgICAgICBlbGVtLmFkZENsYXNzKCdyZW1vdmUnKTtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZWxlbSkucmVtb3ZlKCk7XG4gICAgICAgIH0sIDMwMCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCB0aGUgdHlwZSBieSBhIGNsYXNzXG4gICAgICBmdW5jdGlvbiBjaGFuZ2VUeXBlICggZWxlbSwgdHlwZSApIHtcbiAgICAgICAgZWxlbS5yZW1vdmVDbGFzcygnbXNnLWluZm8nKTtcbiAgICAgICAgZWxlbS5yZW1vdmVDbGFzcygnbXNnLXdhcm4nKTtcblxuICAgICAgICBpZih0eXBlKXtcbiAgICAgICAgICBlbGVtLmFkZENsYXNzKCdtc2ctJyArIHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCdNU0dDRU5URVI6RklSRScsIGZ1bmN0aW9uKGUsIGRhdGEpe1xuICAgICAgICBpZighZGF0YS5tc2cpeyByZXR1cm47IH1cbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIGNsZWFyRWwoKTtcblxuICAgICAgICBpZihkYXRhLmR1cil7XG4gICAgICAgICAgZHVyYXRpb24gPSBkYXRhLmR1ciAqIDEwMDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZihkYXRhLmNhbGxiYWNrKXtcbiAgICAgICAgICBzY29wZS5jYWxsYmFjayA9IGRhdGEuY2FsbGJhY2s7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93TWVzc2FnZSggZGF0YSApO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV0pO1xuIiwiLyoqXG4gKiBwcmVsb2FkZXJcbiAqIGEgZGlyZWN0aXZlIGZvciBzaG93aW5nIGEgcHJlbG9hZGVyIGFuaW1hdGlvbiBkdXJpbmcgYSBwcm9jZXNzaW5nIHBlcmlvZFxuICpcbiAqIFVTRTpcbiAqIDxwcmVsb2FkZXI+PC9wcmVsb2FkZXI+XG4gKlxuICogJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdQUkVMT0FERVI6T04nKTtcbiAqICRyb290U2NvcGUuJGJyb2FkY2FzdCgnUFJFTE9BREVSOk9GRicpO1xuICpcbiAqL1xudmFyIFAgPSByZXF1aXJlKCcuL3ZlbmRvci9jb3JlL3ByZWxvYWRlcicpO1xuXG5NVUcuZGlyZWN0aXZlKCdwcmVsb2FkZXInLFxuWyckcm9vdFNjb3BlJywgJyR0aW1lb3V0JyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICR0aW1lb3V0KSB7XG4gIHJldHVybiB7XG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHNjb3BlOiB7fSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwcmVsb2FkZXJcIj48L2Rpdj4nLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycywgY3RybCkge1xuICAgICAgdmFyIEI7XG4gICAgICB2YXIgZWw7XG4gICAgICB2YXIgdGltZXI7XG4gICAgICB2YXIgdGl0bGU7XG4gICAgICB2YXIgcHJldmlvdXNUaXRsZTtcbiAgICAgIHZhciBkdXJhdGlvbiA9IDUwMDA7XG4gICAgICB2YXIgbG9hZGluZyA9ICdsb2FkaW5nJztcblxuICAgICAgLy8gSU5JVCFcbiAgICAgIC8vIGF2b2lkIHRoZSBoaWRlL3Nob3cgdGltZWxpbmVcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBCID0gbmV3IFAuQnJvd3NlcigpO1xuICAgICAgICBCLmluaXQoKTtcblxuICAgICAgICAvLyBzZXR1cCBvbmUgaW5zdGFuY2Ugb2YgdGhlIGNhbnZhc1xuICAgICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVsb2FkZXInKTtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoQi5pbnN0YW5jZSk7XG5cbiAgICAgICAgLy8gZHJhdyBicm93c2VyXG4gICAgICAgIEIuZHJhd0Jyb3dzZXIoKTtcbiAgICAgIH0sIDMwKTtcblxuICAgICAgLy8gZnVuY3Rpb24gc2hvd1ByZWxvYWRlcigpIHtcbiAgICAgIC8vXG4gICAgICAvLyAgIC8vIGF2b2lkIHRoZSBoaWRlL3Nob3cgdGltZWxpbmVcbiAgICAgIC8vICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAvL1xuICAgICAgLy8gICAgIC8vIFN0YXJ0IGFuaW1hdGlvblxuICAgICAgLy8gICAgIEIuYW5pbWF0ZSgwLCAzMCk7XG4gICAgICAvLyAgIH0sIDMwKTtcbiAgICAgIC8vXG4gICAgICAvLyAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgLy9cbiAgICAgIC8vICAgICAvLyAvLyBkcmF3IGJyb3dzZXJcbiAgICAgIC8vICAgICAvLyBCLmRyYXdCcm93c2VyKCk7XG4gICAgICAvL1xuICAgICAgLy8gICAgIC8vIFN0YXJ0IGFuaW1hdGlvblxuICAgICAgLy8gICAgIEIuYW5pbWF0ZSgxLCAxNTApO1xuICAgICAgLy9cbiAgICAgIC8vICAgICAvLyBlbC5hZGRDbGFzcyhsb2FkaW5nKTtcbiAgICAgIC8vICAgfSwgMzAwMCk7XG4gICAgICAvLyB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVByZWxvYWRlcihlLCBhcmdzKSB7XG4gICAgICAgIGlmICghYXJncyB8fCAhYXJncy5tc2cpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGl0bGUgPSBhcmdzLm1zZztcblxuICAgICAgICB2YXIgdHlwZTtcblxuICAgICAgICBzd2l0Y2ggKHRpdGxlKSB7XG4gICAgICAgICAgLy8gY2FzZSAnU3RhcnRpbmcgY29tcGFyZSBjYXB0dXJlJzpcbiAgICAgICAgICAvLyAgIHR5cGUgPSAwO1xuICAgICAgICAgIC8vICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnT3BlbmluZyBCcm93c2VyIFNlc3Npb24nOlxuICAgICAgICAgICAgdHlwZSA9IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdDYXB0dXJpbmcgU2NyZWVucyc6XG4gICAgICAgICAgICB0eXBlID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIGNhc2UgJ1VwZGF0ZWQgUHJvamVjdCBIaXN0b3J5JzpcbiAgICAgICAgICAvLyAgIHR5cGUgPSAyO1xuICAgICAgICAgIC8vICAgYnJlYWs7XG4gICAgICAgICAgLy8gY2FzZSAnQ29tcGFyaW5nIENhcHR1cmUgRGF0YSc6XG4gICAgICAgICAgLy8gICB0eXBlID0gMjtcbiAgICAgICAgICAvLyAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgdGhhdCB0aGUgdGl0bGUgaGFzIGNoYW5nZWRcbiAgICAgICAgaWYgKHRpdGxlICE9PSBwcmV2aW91c1RpdGxlICYmIEIgJiYgQi5hbmltYXRlKSB7XG5cbiAgICAgICAgICAvLyBTdGFydCBhbmltYXRpb25cbiAgICAgICAgICBCLmFuaW1hdGUodHlwZSwgMzAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcHJldmlvdXNUaXRsZSA9IHRpdGxlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlc2V0UHJlbG9hZGVyKCkge1xuICAgICAgICBlbC5hZGRDbGFzcyhsb2FkaW5nKTtcbiAgICAgIH1cblxuICAgICAgLy8gJHJvb3RTY29wZS4kb24oJ1BSRUxPQURFUjpPTicsIHNob3dQcmVsb2FkZXIpO1xuICAgICAgJHJvb3RTY29wZS4kb24oJ1BSRUxPQURFUjpVUERBVEUnLCB1cGRhdGVQcmVsb2FkZXIpO1xuICAgICAgJHJvb3RTY29wZS4kb24oJ1BSRUxPQURFUjpPRkYnLCByZXNldFByZWxvYWRlcik7XG4gICAgfVxuICB9O1xufV0pO1xuIiwiTVVHLmZhY3RvcnkoJ3RpbWVBZ28nLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZXJ2aWNlID0ge307XG5cbiAgc2VydmljZS5zZXR0aW5ncyA9IHtcbiAgICByZWZyZXNoTWlsbGlzOiA2MDAwMCxcbiAgICBhbGxvd0Z1dHVyZTogZmFsc2UsXG4gICAgc3RyaW5nczoge1xuICAgICAgcHJlZml4QWdvOiBudWxsLFxuICAgICAgcHJlZml4RnJvbU5vdzogbnVsbCxcbiAgICAgIHN1ZmZpeEFnbzogJ2FnbycsXG4gICAgICBzdWZmaXhGcm9tTm93OiAnZnJvbSBub3cnLFxuICAgICAgc2Vjb25kczogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgICBtaW51dGU6ICdhYm91dCBhIG1pbnV0ZScsXG4gICAgICBtaW51dGVzOiAnJWQgbWludXRlcycsXG4gICAgICBob3VyOiAnYWJvdXQgYW4gaG91cicsXG4gICAgICBob3VyczogJyVkIGhvdXJzJyxcbiAgICAgIGRheTogJ2EgZGF5JyxcbiAgICAgIGRheXM6ICclZCBkYXlzJyxcbiAgICAgIG1vbnRoOiAnYWJvdXQgYSBtb250aCcsXG4gICAgICBtb250aHM6ICclZCBtb250aHMnLFxuICAgICAgeWVhcjogJ2Fib3V0IGEgeWVhcicsXG4gICAgICB5ZWFyczogJyVkIHllYXJzJyxcbiAgICAgIG51bWJlcnM6IFtdXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHRyaW1EaWdpdHMgKCBudW0gKSB7XG4gICAgICB2YXIgbSA9IG51bS50b1N0cmluZygpLnNsaWNlKDAsMTMpO1xuICAgICAgcmV0dXJuIChtLmxlbmd0aCA9PSAxMyk/IHBhcnNlSW50KG0pIDogbnVtO1xuICB9XG5cbiAgc2VydmljZS5pbldvcmRzID0gZnVuY3Rpb24gKGRpc3RhbmNlTWlsbGlzKSB7XG4gICAgdmFyICRsID0gc2VydmljZS5zZXR0aW5ncy5zdHJpbmdzO1xuICAgIHZhciBwcmVmaXggPSAkbC5wcmVmaXhBZ287XG4gICAgdmFyIHN1ZmZpeCA9ICRsLnN1ZmZpeEFnbztcbiAgICBpZiAoc2VydmljZS5zZXR0aW5ncy5hbGxvd0Z1dHVyZSkge1xuICAgICAgaWYgKGRpc3RhbmNlTWlsbGlzIDwgMCkge1xuICAgICAgICBwcmVmaXggPSAkbC5wcmVmaXhGcm9tTm93O1xuICAgICAgICBzdWZmaXggPSAkbC5zdWZmaXhGcm9tTm93O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzZWNvbmRzID0gTWF0aC5hYnMoZGlzdGFuY2VNaWxsaXMpIC8gMTAwMDtcbiAgICB2YXIgbWludXRlcyA9IHNlY29uZHMgLyA2MDtcbiAgICB2YXIgaG91cnMgPSBtaW51dGVzIC8gNjA7XG4gICAgdmFyIGRheXMgPSBob3VycyAvIDI0O1xuICAgIHZhciB5ZWFycyA9IGRheXMgLyAzNjU7XG5cbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlKHN0cmluZ09yRnVuY3Rpb24sIG51bWJlcikge1xuICAgICAgdmFyIHN0cmluZyA9IGFuZ3VsYXIuaXNGdW5jdGlvbihzdHJpbmdPckZ1bmN0aW9uKSA/XG4gICAgICBzdHJpbmdPckZ1bmN0aW9uKG51bWJlciwgZGlzdGFuY2VNaWxsaXMpIDogc3RyaW5nT3JGdW5jdGlvbjtcbiAgICAgIHZhciB2YWx1ZSA9ICgkbC5udW1iZXJzICYmICRsLm51bWJlcnNbbnVtYmVyXSkgfHwgbnVtYmVyO1xuICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8lZC9pLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgdmFyIHdvcmRzID0gc2Vjb25kcyA8IDQ1ICYmIHN1YnN0aXR1dGUoJGwuc2Vjb25kcywgTWF0aC5yb3VuZChzZWNvbmRzKSkgfHxcbiAgICAgICAgc2Vjb25kcyA8IDkwICYmIHN1YnN0aXR1dGUoJGwubWludXRlLCAxKSB8fFxuICAgICAgICBtaW51dGVzIDwgNDUgJiYgc3Vic3RpdHV0ZSgkbC5taW51dGVzLCBNYXRoLnJvdW5kKG1pbnV0ZXMpKSB8fFxuICAgICAgICBtaW51dGVzIDwgOTAgJiYgc3Vic3RpdHV0ZSgkbC5ob3VyLCAxKSB8fFxuICAgICAgICBob3VycyA8IDI0ICYmIHN1YnN0aXR1dGUoJGwuaG91cnMsIE1hdGgucm91bmQoaG91cnMpKSB8fFxuICAgICAgICBob3VycyA8IDQyICYmIHN1YnN0aXR1dGUoJGwuZGF5LCAxKSB8fFxuICAgICAgICBkYXlzIDwgMzAgJiYgc3Vic3RpdHV0ZSgkbC5kYXlzLCBNYXRoLnJvdW5kKGRheXMpKSB8fFxuICAgICAgICBkYXlzIDwgNDUgJiYgc3Vic3RpdHV0ZSgkbC5tb250aCwgMSkgfHxcbiAgICAgICAgZGF5cyA8IDM2NSAmJiBzdWJzdGl0dXRlKCRsLm1vbnRocywgTWF0aC5yb3VuZChkYXlzIC8gMzApKSB8fFxuICAgICAgICB5ZWFycyA8IDEuNSAmJiBzdWJzdGl0dXRlKCRsLnllYXIsIDEpIHx8XG4gICAgICAgIHN1YnN0aXR1dGUoJGwueWVhcnMsIE1hdGgucm91bmQoeWVhcnMpKTtcblxuICAgIHZhciBzZXBhcmF0b3IgPSAkbC53b3JkU2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnICcgOiAkbC53b3JkU2VwYXJhdG9yO1xuICAgIHJldHVybiBbcHJlZml4LCB3b3Jkcywgc3VmZml4XS5qb2luKHNlcGFyYXRvcikudHJpbSgpO1xuICB9O1xuXG4gIHNlcnZpY2UucGFyc2UgPSBmdW5jdGlvbiAoaXNvODYwMSkge1xuICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKGlzbzg2MDEpKSB7XG4gICAgICBpc284NjAxID0gaXNvODYwMSArIFwiXCI7XG4gICAgICAvLyBmb3JtYXQgZm9yIGNvcnJlY3QgbGVuZ3RoXG4gICAgICB2YXIgb3JpZ2luYWxUaW1lc3RhbXAgPSB0cmltRGlnaXRzKCBpc284NjAxICk7XG4gICAgICByZXR1cm4gcGFyc2VJbnQob3JpZ2luYWxUaW1lc3RhbXAsIDEwKTtcbiAgICB9XG4gICAgdmFyIHMgPSAoaXNvODYwMSB8fCAnJykudHJpbSgpO1xuICAgIHMgPSBzLnJlcGxhY2UoL1xcLlxcZCsvLCAnJyk7IC8vIHJlbW92ZSBtaWxsaXNlY29uZHNcbiAgICBzID0gcy5yZXBsYWNlKC8tLywgJy8nKS5yZXBsYWNlKC8tLywgJy8nKTtcbiAgICBzID0gcy5yZXBsYWNlKC9ULywgJyAnKS5yZXBsYWNlKC9aLywgJyBVVEMnKTtcbiAgICBzID0gcy5yZXBsYWNlKC8oW1xcK1xcLV1cXGRcXGQpXFw6PyhcXGRcXGQpLywgJyAkMSQyJyk7IC8vIC0wNDowMCAtPiAtMDQwMFxuICAgIHJldHVybiBuZXcgRGF0ZShzKTtcbiAgfTtcblxuICByZXR1cm4gc2VydmljZTtcbn0pO1xuIiwidmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG5cbk1VRy5mYWN0b3J5KCdDb21wYXJlJyxcblsnJHEnLCAnQ29uZmlnJyxcbmZ1bmN0aW9uKCRxLCBDb25maWcpIHtcbiAgLy8gQ29uZmlnIHZhcnNcbiAgdmFyIGZpbGVEaXJQcmVmaXggPSBfX2Rpcm5hbWUgKyAnLyc7XG4gIHZhciBpbWFnZVByZWZpeCA9ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJztcbiAgdmFyIHN0YXR1c1R5cGVzID0gWydwYXNzZWQnLCAnd2FybmluZycsICdmYWlsZWQnXTtcblxuICAvLyBhc3luYyBoZWxwZXJcbiAgZnVuY3Rpb24gcmVhZEFzeW5jKGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgZnMucmVhZEZpbGUoZmlsZURpclByZWZpeCArIGZpbGUsICdiYXNlNjQnLCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBUT0RPOiBsZXQgdGhlIGJhY2tlbmQgcHJvY2VzcyBoYW5kbGUgdGhpcyFcbiAgZnVuY3Rpb24gY29tcGFyZVNpbmdsZShhLCBiKSB7XG4gICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgdmFyIG91dHB1dCA9IHt9O1xuXG4gICAgLy8gQXBwbHkgTWFpbiBDb21wYXJlIENvbmZpZ1xuICAgIHJlc2VtYmxlLm91dHB1dFNldHRpbmdzKENvbmZpZy5Db21wYXJlKTtcblxuICAgIC8vIE9wZW4gYm90aCBmaWxlcywgYmVmb3JlIHdlIGFyZSByZWFkeSB0byBwcm9jZXNzXG4gICAgYXN5bmMubWFwKFthLCBiXSwgcmVhZEFzeW5jLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICAgIHZhciBhRGF0YSA9IGltYWdlUHJlZml4ICsgcmVzdWx0c1swXTtcbiAgICAgIHZhciBiRGF0YSA9IGltYWdlUHJlZml4ICsgcmVzdWx0c1sxXTtcblxuICAgICAgLy8gSGFuZGxlcyBlcnJvcnNcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgfVxuXG4gICAgICAvLyBSdW4gdGhlIGNvbXBhcmUgZnVuY3Rpb24sIHJldHVybiB0aGUgZGlmZiBkYXRhXG4gICAgICByZXNlbWJsZShhRGF0YSlcbiAgICAgICAgLmNvbXBhcmVUbyhiRGF0YSlcbiAgICAgICAgLmlnbm9yZUNvbG9ycygpXG4gICAgICAgIC5vbkNvbXBsZXRlKGZ1bmN0aW9uKGRpZmZEYXRhKSB7XG4gICAgICAgICAgb3V0cHV0LnJlcG9ydCA9IGRpZmZEYXRhO1xuICAgICAgICAgIG91dHB1dC5zcmMgPSBkaWZmRGF0YS5nZXRJbWFnZURhdGFVcmwoKTtcblxuICAgICAgICAgIGRmZC5yZXNvbHZlKG91dHB1dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICB9O1xuXG4gIHJldHVybiB7XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gaW1hZ2VzIGFuZCByZXR1cm5zIGFsbCBkYXRhIHdpdGggYW4gaW1hZ2Ugb2YgY2hhbmdlc1xuICAgICAqL1xuICAgIHJ1blNpbmdsZTogY29tcGFyZVNpbmdsZSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgdGhlIHR5cGUgb2YgcGFzcy93YXJuL2ZhaWwgc3RhdHVzXG4gICAgICovXG4gICAgZ2V0U3RhdHVzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbWlzTWF0Y2hWYWx1ZSA9IHBhcnNlRmxvYXQoZGF0YS5taXNNYXRjaFBlcmNlbnRhZ2UpO1xuXG4gICAgICAvLyBsb3dlc3QgdG9sZXJhbmNlXG4gICAgICBpZiAobWlzTWF0Y2hWYWx1ZSA8IDAuMSkge1xuXG4gICAgICAgIC8vIFdhcm4gdGhhdCBkaW1lbnNpb25zIGFyZSBkaWZmZXJlbmNlXG4gICAgICAgIGlmIChkYXRhLmlzU2FtZURpbWVuc2lvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXR1c1R5cGVzWzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzdGF0dXNUeXBlc1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB3YXJuaW5nIHRvbGVyYW5jZVxuICAgICAgaWYgKG1pc01hdGNoVmFsdWUgPiAwLjEgJiYgbWlzTWF0Y2hWYWx1ZSA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHN0YXR1c1R5cGVzWzFdO1xuICAgICAgfVxuXG4gICAgICAvLyBlcnJvciB0b2xlcmFuY2UgcmVhY2hlZFxuICAgICAgcmV0dXJuIHN0YXR1c1R5cGVzWzJdO1xuICAgIH1cblxuICB9O1xufV0pO1xuIiwiTVVHLmZhY3RvcnkoJ25vd1RpbWUnLFxuWyckdGltZW91dCcsXG5mdW5jdGlvbigkdGltZW91dCkge1xuICB2YXIgbm93VGltZSA9IERhdGUubm93KCk7XG4gIHZhciB1cGRhdGVUaW1lID0gZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBub3dUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICB9LCAxMDAwKTtcbiAgfTtcblxuICB1cGRhdGVUaW1lKCk7XG4gIHJldHVybiB7XG4gICAgZ2V0VGltZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbm93VGltZTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCJ2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgQVdTID0gcmVxdWlyZSgnLi92ZW5kb3IvY29yZS9hd3MnKTtcblxuTVVHLmZhY3RvcnkoJ1Byb2plY3RzJyxcblsnJHEnLFxuZnVuY3Rpb24oJHEpIHtcbiAgLy8gQ29uZmlnIHRoZSBtYWluIHBhdGhzXG4gIHZhciBwcm9qZWN0c1BhdGggPSBfX2Rpcm5hbWUgKyAnL3Byb2plY3RzLmpzb24nO1xuICB2YXIgcHJvamVjdEZpbGVzUGF0aCA9IF9fZGlybmFtZSArICcvcHJvamVjdHMvJztcblxuICAvLyBDcmVhdGVzIGEgVVVJRCBvZiB0aGUgc3BlY2lmaWVkIGxlbmd0aFxuICBmdW5jdGlvbiBjcmVhdGVVVUlEKHMpIHtcbiAgICB2YXIgbjtcbiAgICBpZiAodHlwZW9mIHMgPT0gJ251bWJlcicgJiYgcyA9PT0gcGFyc2VJbnQocywgMTApKSB7XG4gICAgICBzID0gQXJyYXkocyArIDEpLmpvaW4oJ3gnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcy5yZXBsYWNlKC94L2csIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG4gPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA2MSkgKyA0ODtcbiAgICAgIG4gPSBuID4gNTcgPyAobiArIDcgPiA5MCA/IG4gKyAxMyA6IG4gKyA3KSA6IG47XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIENyZWF0ZXMgYSBKU09OIG9iamVjdCBmb3IgYSBiYXNlbGluZSBuZXcgcHJvamVjdFxuICBmdW5jdGlvbiBjcmVhdGVEdW1teVByb2plY3QodG90YWwpIHtcbiAgICB0b3RhbCA9IHRvdGFsIHx8IDA7XG4gICAgdmFyIHByb2plY3RJZCA9IGNyZWF0ZVVVSUQoMTIpO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogcHJvamVjdElkLFxuICAgICAgdGl0bGU6ICdQcm9qZWN0ICcgKyAocGFyc2VJbnQodG90YWwsIDEwKSArIDEpLFxuICAgICAgdGltZXN0YW1wOiAoK25ldyBEYXRlKSxcbiAgICAgIHRvdGFsczoge1xuICAgICAgICBzdWNjZXNzOiBudWxsLFxuICAgICAgICB3YXJuaW5nOiBudWxsLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgdmlld3M6IDBcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gU2V0cyB1cCB0aGUgbmVlZGVkIGJhc2UgZGF0YSBmb3Igc3RvcmluZyBhbiBpbmRpdmlkdWFsIHByb2plY3RcbiAgZnVuY3Rpb24gY3JlYXRlRHVtbXlQcm9qZWN0RmlsZShvcHRpb25zKSB7XG4gICAgdmFyIHByb2plY3RJZCA9IGNyZWF0ZVVVSUQoMTIpO1xuICAgIHJldHVybiB7XG4gICAgICBiYXRjaEhpc3Rvcnk6IHt9LFxuICAgICAgY3VycmVudEJhdGNoOiBudWxsLFxuICAgICAgY3VycmVudFJlZmVyZW5jZTogbnVsbCxcbiAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgdGl0bGU6IG9wdGlvbnMudGl0bGUsXG4gICAgICB0aW1lc3RhbXA6IG9wdGlvbnMudGltZXN0YW1wLFxuICAgICAgdmlld3BvcnRzOiBbXSxcbiAgICAgIHNlbGVjdG9yczogW10sXG4gICAgICBjb29raWVzOiBbXSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICByZWFkeUV2ZW50OiBudWxsLFxuICAgICAgICBkZWxheTogbnVsbCxcbiAgICAgICAgbWlzTWF0Y2hUaHJlc2hvbGQ6IG51bGxcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gR3JhYnMgSlNPTiBmaWxlIGFuZCBhcHByb3ByaWF0ZWx5IGhhbmRsZXMgZXJyb3JzXG4gIGZ1bmN0aW9uIGdldEpzb25GaWxlKHBhdGgsIHR5cGUpIHtcbiAgICB2YXIgZmlsZTtcblxuICAgIHRyeSB7XG4gICAgICBmaWxlID0gZnMucmVhZEZpbGVTeW5jKHBhdGgsICd1dGY4Jyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gY291bGRuJ3QgZmluZCBmaWxlXG4gICAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICByZXR1cm4gdHlwZSB8fCB7fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZmlsZSk7XG4gIH1cblxuICAvLyByZW1vdmUgYWxsIGZpbGVzIGluIGRpcmVjdG9yeVxuICBmdW5jdGlvbiByZW1vdmVBbGxJbkRpcmVjdG9yeShkaXJQYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKGRpclBhdGgpO1xuICAgIH0gY2F0Y2ggKGUpIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAoZmlsZXMubGVuZ3RoID4gMClcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZpbGVQYXRoID0gcGF0aC5qb2luKGRpclBhdGgsIGZpbGVzW2ldKTtcblxuICAgICAgICBpZiAoZnMuc3RhdFN5bmMoZmlsZVBhdGgpLmlzRmlsZSgpKSB7XG4gICAgICAgICAgZnMudW5saW5rU3luYyhmaWxlUGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm1EaXIoZmlsZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gIH07XG5cbiAgLy8gc2V0cyB1cCBhIHByb21pc2UgZHJpdmVuIGZpbGUgd3JpdGVcbiAgZnVuY3Rpb24gcHJvbWlzZVdyaXRlKGZpbGVQYXRoLCBkYXRhKSB7XG4gICAgdmFyIF9xID0gJHEuZGVmZXIoKTtcblxuICAgIGZzLndyaXRlRmlsZShmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkoZGF0YSksIGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBfcS5yZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX3EucmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9xLnByb21pc2U7XG4gIH1cblxuICAvLyBzZXRzIHVwIGEgcHJvbWlzZSBkcml2ZW4gZmlsZSBkZWxldGVcbiAgZnVuY3Rpb24gcHJvbWlzZVJlbW92ZShwYXRoKSB7XG4gICAgdmFyIF96ID0gJHEuZGVmZXIoKTtcblxuICAgIC8vIGZzLnVubGlua1xuICAgIGZzLnVubGluayhwYXRoLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgX3oucmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF96LnJlc29sdmUoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfei5wcm9taXNlO1xuICB9XG5cbiAgcmV0dXJuIHtcblxuICAgIGdldEFsbDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0SnNvbkZpbGUocHJvamVjdHNQYXRoLCBbXSk7XG4gICAgfSxcblxuICAgIGdldEJ5SWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gZ2V0SnNvbkZpbGUocHJvamVjdEZpbGVzUGF0aCArIGlkICsgJy5qc29uJyk7XG4gICAgfSxcblxuICAgIGdldFR5cGVCeUlkOiBmdW5jdGlvbihpZCwgdHlwZSkge1xuICAgICAgcmV0dXJuIGdldEpzb25GaWxlKHByb2plY3RGaWxlc1BhdGggKyBpZCArICdfJyArIHR5cGUgKyAnLmpzb24nLCBbXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHZhbGlkYXRlcyB0aGUgcHJvamVjdCwgbWFrZXMgc3VyZSBhbGwgc2V0dGluZ3MgYXJlIHNldHVwIGFuZCB2YWxpZFxuICAgICAqL1xuICAgIHZhbGlkYXRlOiBmdW5jdGlvbihwcm9qZWN0KSB7XG4gICAgICB2YXIgY29va2llcyA9IHByb2plY3QuY29va2llcztcbiAgICAgIHZhciB2aWV3cG9ydHMgPSBwcm9qZWN0LnZpZXdwb3J0cztcbiAgICAgIHZhciBzZWxlY3RvcnMgPSBwcm9qZWN0LnNlbGVjdG9ycztcbiAgICAgIHZhciB0aXRsZSA9IHByb2plY3QudGl0bGU7XG4gICAgICB2YXIgdXJsID0gcHJvamVjdC5tZXRhLnVybDtcbiAgICAgIHZhciBib29sID0gdHJ1ZTtcblxuICAgICAgLy8gdmVyaWZ5IGFsbCBkZWZhdWx0cyBhcmUgc2V0dXBcbiAgICAgIGlmICghdmlld3BvcnRzIHx8ICFzZWxlY3RvcnMgfHwgIXRpdGxlIHx8ICF1cmwgfHwgdmlld3BvcnRzLmxlbmd0aCA8IDEgfHwgc2VsZWN0b3JzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSBoYXZlIHZpZXdwb3J0cywgdmVyaWZ5IHRoZXkncmUgc2V0dXAgcmlnaHRcbiAgICAgIGlmICh2aWV3cG9ydHMpIHtcbiAgICAgICAgdmlld3BvcnRzLm1hcChmdW5jdGlvbihvYmosIGlkeCkge1xuICAgICAgICAgIGlmICghb2JqLndpZHRoIHx8ICFvYmouaGVpZ2h0IHx8ICFvYmoubmFtZSkge1xuICAgICAgICAgICAgYm9vbCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGhhdmUgc2VsZWN0b3JzLCB2ZXJpZnkgdGhleSdyZSBzZXR1cCByaWdodFxuICAgICAgaWYgKHNlbGVjdG9ycykge1xuICAgICAgICBzZWxlY3RvcnMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICAgICAgaWYgKCFvYmoucXVlcnkgfHwgIW9iai50eXBlKSB7XG4gICAgICAgICAgICBib29sID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UgaGF2ZSBjb29raWVzLCB2ZXJpZnkgdGhleSdyZSBzZXR1cCByaWdodFxuICAgICAgaWYgKGNvb2tpZXMpIHtcbiAgICAgICAgY29va2llcy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgICAgICBpZiAoIW9iai5uYW1lIHx8ICFvYmoucGF0aCB8fCAhb2JqLnZhbHVlKSB7XG4gICAgICAgICAgICBib29sID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVmYXVsdCB0byB0cnVlXG4gICAgICByZXR1cm4gYm9vbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlcyBhIG5ldyBwcm9qZWN0LCBhbmQgcmV0dXJucyB0aGUgZGF0YSBpbiBhIHByb21pc2VcbiAgICAgKi9cbiAgICBjcmVhdGVOZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgYWxsUHJvamVjdHMgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwcm9qZWN0c1BhdGgsICd1dGY4JykpO1xuICAgICAgdmFyIG5ld1Byb2plY3REYXRhID0gY3JlYXRlRHVtbXlQcm9qZWN0KGFsbFByb2plY3RzLmxlbmd0aCk7XG4gICAgICB2YXIgbmV3UHJvamVjdEZpbGUgPSBjcmVhdGVEdW1teVByb2plY3RGaWxlKG5ld1Byb2plY3REYXRhKTtcblxuICAgICAgYWxsUHJvamVjdHMudW5zaGlmdChuZXdQcm9qZWN0RGF0YSk7XG5cbiAgICAgIC8vIHNhdmUgdGhlIGRhdGEgdG8gdGhlIHByb2plY3RzIGxpc3RcbiAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0c1BhdGgsIEpTT04uc3RyaW5naWZ5KGFsbFByb2plY3RzKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2F2ZSBhcyBhbiBpbmRpdmlkdWFsIGZpbGVcbiAgICAgICAgZnMud3JpdGVGaWxlKHByb2plY3RGaWxlc1BhdGggKyBuZXdQcm9qZWN0RGF0YS5pZCArICcuanNvbicsIEpTT04uc3RyaW5naWZ5KG5ld1Byb2plY3RGaWxlKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNhdmUgYXMgYW4gaW5kaXZpZHVhbCBmaWxlXG4gICAgICAgICAgZnMud3JpdGVGaWxlKHByb2plY3RGaWxlc1BhdGggKyBuZXdQcm9qZWN0RGF0YS5pZCArICdfaGlzdG9yeS5qc29uJywgSlNPTi5zdHJpbmdpZnkoW10pLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlZGlyZWN0IHVzZXIgdG8gdGhlIHNldHRpbmdzIHBhZ2VcbiAgICAgICAgICAgIGRmZC5yZXNvbHZlKG5ld1Byb2plY3REYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH0sXG5cbiAgICAvLyBzYXZlIHRvIGZpbGUgYW5kIGxpc3RzLCByZXR1cm4gbGlzdCBkYXRhXG4gICAgc2F2ZTogZnVuY3Rpb24ocHJvamVjdERhdGEpIHtcbiAgICAgIHZhciBkZmQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIGFsbFByb2plY3RzID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocHJvamVjdHNQYXRoLCAndXRmOCcpKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBsaXN0aW5nIGRhdGFcbiAgICAgIGFsbFByb2plY3RzLm1hcChmdW5jdGlvbihvYmosIGlkeCkge1xuICAgICAgICBpZiAob2JqLmlkID09PSBwcm9qZWN0RGF0YS5pZCkge1xuICAgICAgICAgIGFsbFByb2plY3RzW2lkeF0udGl0bGUgPSBwcm9qZWN0RGF0YS50aXRsZTtcbiAgICAgICAgICBhbGxQcm9qZWN0c1tpZHhdLnRpbWVzdGFtcCA9ICgrbmV3IERhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gc2F2ZSBhcyBhbiBpbmRpdmlkdWFsIGZpbGVcbiAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0RmlsZXNQYXRoICsgcHJvamVjdERhdGEuaWQgKyAnLmpzb24nLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0RGF0YSksIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgbGlzdGluZyBkYXRhXG4gICAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0c1BhdGgsIEpTT04uc3RyaW5naWZ5KGFsbFByb2plY3RzKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJldHVybiB0aGUgbGlzdGluZyBkYXRhLCBzbyB3ZSBjYW4gdXBkYXRlIHRoZSBzaWRlcGFuZWxcbiAgICAgICAgICBkZmQucmVzb2x2ZShwcm9qZWN0RGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLy8gVE9ETzogc2hvdWxkIHJlbW92ZSBpbWFnZXMgdXBvbiBkZWxldGU/XG4gICAgLy8gUmVtb3ZlcyBhIHNpbmdsZSBwcm9qZWN0IGJ5IElEXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgYWxsUHJvamVjdHMgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwcm9qZWN0c1BhdGgsICd1dGY4JykpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGxpc3RpbmcgZGF0YVxuICAgICAgYWxsUHJvamVjdHMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICAgIGlmIChvYmouaWQgPT09IGlkKSB7XG4gICAgICAgICAgYWxsUHJvamVjdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlIHByb2plY3QgZmlsZVxuICAgICAgZnMudW5saW5rKHByb2plY3RGaWxlc1BhdGggKyBpZCArICcuanNvbicsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgcHJvamVjdCBoaXN0b3J5IGZpbGVcbiAgICAgICAgZnMudW5saW5rKHByb2plY3RGaWxlc1BhdGggKyBpZCArICdfaGlzdG9yeS5qc29uJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgbGlzdGluZyBkYXRhXG4gICAgICAgICAgZnMud3JpdGVGaWxlKHByb2plY3RzUGF0aCwgSlNPTi5zdHJpbmdpZnkoYWxsUHJvamVjdHMpLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJldHVyblxuICAgICAgICAgICAgZGZkLnJlc29sdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZW1vdmVzIGFsbCBzdG9yZWQgaGlzdG9yeSBmb3IgYSBwcm9qZWN0XG4gICAgICovXG4gICAgY2xlYXJIaXN0b3J5OiBmdW5jdGlvbihwcm9qZWN0KSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgIHZhciBtYWluUHJvamVjdHMgPSBnZXRKc29uRmlsZShwcm9qZWN0c1BhdGgsIFtdKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBwcm9qZWN0IGRhdGEgdG8gcmVmbGVjdCBubyBoaXN0b3J5XG4gICAgICBwcm9qZWN0LmN1cnJlbnRCYXRjaCA9IG51bGw7XG4gICAgICBwcm9qZWN0LmN1cnJlbnRSZWZlcmVuY2UgPSBudWxsO1xuICAgICAgcHJvamVjdC5iYXRjaEhpc3RvcnkgPSB7fTtcblxuICAgICAgLy8gdXBkYXRlIHRoZSBjdXJyZW50IHByb2plY3QgdG8gaGF2ZSBubyBiYXRjaEhpc3RvcnlcbiAgICAgIG1haW5Qcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgICAgaWYgKG9iai5pZCA9PT0gcHJvamVjdC5pZCkge1xuICAgICAgICAgIG1haW5Qcm9qZWN0c1tpZHhdLnRvdGFscy5zdWNjZXNzID0gMDtcbiAgICAgICAgICBtYWluUHJvamVjdHNbaWR4XS50b3RhbHMud2FybmluZyA9IDA7XG4gICAgICAgICAgbWFpblByb2plY3RzW2lkeF0udG90YWxzLmVycm9yID0gMDtcbiAgICAgICAgICBtYWluUHJvamVjdHNbaWR4XS50b3RhbHMudmlld3MgPSAwO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gcmVtb3ZlIGFsbCBsb2NhbCBpbWFnZXNcbiAgICAgIHRoaXMuY2xlYW5JbWFnZUZpbGVzKHByb2plY3QpO1xuXG4gICAgICAvLyBzYXZlIHRoZSBkYXRhIHRvIHRoZSBwcm9qZWN0cyBsaXN0XG4gICAgICBmcy53cml0ZUZpbGUocHJvamVjdEZpbGVzUGF0aCArIHByb2plY3QuaWQgKyAnX2hpc3RvcnkuanNvbicsIEpTT04uc3RyaW5naWZ5KFtdKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2F2ZSB0aGUgZGF0YSB0byB0aGUgaWQgcHJvamVjdFxuICAgICAgICBmcy53cml0ZUZpbGUocHJvamVjdEZpbGVzUGF0aCArIHByb2plY3QuaWQgKyAnLmpzb24nLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0KSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgZGF0YSBvbiB0aGUgcHJvamVjdHMgbGlzdFxuICAgICAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0c1BhdGgsIEpTT04uc3RyaW5naWZ5KG1haW5Qcm9qZWN0cyksIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVkaXJlY3QgdXNlciB0byB0aGUgc2V0dGluZ3MgcGFnZVxuICAgICAgICAgICAgZGZkLnJlc29sdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBwYXNzIGluIGEgcHJvamVjdElkLCB0aGVuIGl0IHdpbGwgcmVhZCB0aGUgcHJvamVjdCBhbmQgaXRzIGN1cnJlbnQgYmF0Y2ggb2YgZmlsZXMgdG8gdXBsb2FkXG4gICAgICogb25jZSBjb21wbGV0ZSwgaXQgd2lsbCBjbGVhbiBvdXQgYW55IGxvY2FsIHNjcmVlbnMgYW5kIHJlcGxhY2Ugd2l0aCBhd3MgcmVzb3VyY2VzXG4gICAgICovXG4gICAgc3luYzogZnVuY3Rpb24oaWQpIHtcbiAgICAgIGlmICghaWQpIHtyZXR1cm47fVxuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIHByb2plY3QgPSB0aGlzLmdldEJ5SWQoaWQpO1xuICAgICAgdmFyIHByb2plY3RGaWxlcyA9IHRoaXMuZ2V0VHlwZUJ5SWQoaWQsICdoaXN0b3J5Jyk7XG4gICAgICB2YXIgcmVhZHlGaWxlcyA9IFtdO1xuXG4gICAgICAvLyBwdWxsIG91dCBmaWxlcyB0aGF0IGFyZSBhbHJlYWR5IGluc2lkZSBhd3MsIHByZXAgZm9yIHVwbG9hZFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9qZWN0RmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRtcEZpbGUgPSBwcm9qZWN0RmlsZXNbaV07XG4gICAgICAgIGlmICh0bXBGaWxlLnNvdXJjZS5zZWFyY2goJ2FtYXpvbicpID09PSAtMSkge1xuICAgICAgICAgIHZhciBzcmMgPSB0bXBGaWxlLnNvdXJjZTtcbiAgICAgICAgICB2YXIgdHlwZSA9IHRtcEZpbGUudHlwZTtcbiAgICAgICAgICB2YXIgcGF0aCA9IF9fZGlybmFtZSArICcvc2NyZWVucy8nICsgdHlwZSArICcvJyArIHByb2plY3QuaWQgKyAnLycgKyBzcmM7XG4gICAgICAgICAgcmVhZHlGaWxlcy5wdXNoKHsga2V5OiB0eXBlICsgJy8nICsgc3JjLCBwYXRoOiBwYXRoIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHVwbG9hZCBmaWxlc1xuICAgICAgQVdTLmluaXQoKVxuICAgICAgICAudXBsb2FkKHJlYWR5RmlsZXMsIHByb2plY3QuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuXG4gICAgICAgICAgLy8gZG8gcG9zdC1wcm9jZXNzIGFjdGlvblxuICAgICAgICAgIF90aGlzLmNsZWFuQWZ0ZXJTeW5jKHByb2plY3QsIHJlcykudGhlbihkLnJlc29sdmUsIGQucmVqZWN0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNsZWFuIGxvY2FsIGltYWdlcywgdXBkYXRlIGhpc3Rvcnkgd2l0aCBhd3MgcmVzb3VyY2VzLCByZXR1cm5zIHRoZSB1cGRhdGVzXG4gICAgICovXG4gICAgY2xlYW5BZnRlclN5bmM6IGZ1bmN0aW9uIChwcm9qZWN0LCBuZXdSZWZzKSB7XG4gICAgICB2YXIgZGZkZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgaGlzdG9yeURhdGEgPSBnZXRKc29uRmlsZShwcm9qZWN0RmlsZXNQYXRoICsgcHJvamVjdC5pZCArICdfaGlzdG9yeS5qc29uJywgW10pO1xuICAgICAgdmFyIHVwZGF0ZWRSZW1vdGVGaWxlcyA9IFtdO1xuICAgICAgdmFyIHF1ZXVlUHJvbWlzZXMgPSBbXTtcbiAgICAgIHByb2plY3QudXBkYXRlZEF0ID0gKCtuZXcgRGF0ZSgpKTtcblxuICAgICAgLy8gbG9vcCB0aHJvdWdoIG5ldyBmaWxlc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdSZWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0bXBTcmMgPSBuZXdSZWZzW2ldO1xuICAgICAgICB2YXIgdG1wUmVmID0gdG1wU3JjLnNwbGl0KCcvJyk7XG4gICAgICAgIHZhciB0bXBUeXBlID0gdG1wUmVmW3RtcFJlZi5sZW5ndGggLSAyXTtcbiAgICAgICAgdmFyIHRtcEFsaWFzID0gdG1wUmVmW3RtcFJlZi5sZW5ndGggLSAxXTtcblxuICAgICAgICBoaXN0b3J5RGF0YS5tYXAoZnVuY3Rpb24oaXRlbSwgaWR4KSB7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgaGlzdG9yeSByZWZcbiAgICAgICAgICBpZiAoaXRlbS5zb3VyY2UgPT09IHRtcEFsaWFzKSB7XG4gICAgICAgICAgICBkZWxldGUgaGlzdG9yeURhdGFbaWR4XS5zb3VyY2U7XG4gICAgICAgICAgICBoaXN0b3J5RGF0YVtpZHhdLnJlbW90ZVNvdXJjZSA9IG5ld1JlZnNbaV07XG5cbiAgICAgICAgICAgIHZhciByZW1SZWZQYXRoID0gX19kaXJuYW1lICsgJy9zY3JlZW5zLycgKyB0bXBUeXBlICsgJy8nICsgcHJvamVjdC5pZCArICcvJyArIHRtcEFsaWFzO1xuICAgICAgICAgICAgdmFyIHJlbVJlZiA9IHByb21pc2VSZW1vdmUocmVtUmVmUGF0aCk7XG4gICAgICAgICAgICBxdWV1ZVByb21pc2VzLnB1c2gocmVtUmVmKTtcblxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIHJlbW92ZSB0aGUgZGlmZiBhbHNvXG4gICAgICAgICAgICBpZiAodG1wVHlwZSA9PT0gJ2NvbXBhcmUnKSB7XG4gICAgICAgICAgICAgIHZhciByZW1SZWZEaWZmID0gcHJvbWlzZVJlbW92ZShyZW1SZWZQYXRoLnJlcGxhY2UoJy4nLCAnX2RpZmYuJykpO1xuICAgICAgICAgICAgICBxdWV1ZVByb21pc2VzLnB1c2gocmVtUmVmRGlmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gc2F2ZSBoaXN0b3J5ICYgcHJvamVjdFxuICAgICAgdmFyIHByb2plY3RGaWxlID0gX19kaXJuYW1lICsgJy9wcm9qZWN0cy8nICsgcHJvamVjdC5pZCArICcuanNvbic7XG4gICAgICB2YXIgcHJvamVjdEhpc3RvcnlGaWxlID0gcHJvamVjdEZpbGUucmVwbGFjZSgnLmpzb24nLCAnX2hpc3RvcnkuanNvbicpO1xuICAgICAgdmFyIHByb2plY3RXcml0ZSA9IHByb21pc2VXcml0ZShwcm9qZWN0RmlsZSwgcHJvamVjdCk7XG4gICAgICB2YXIgcHJvamVjdEhpc3RvcnlXcml0ZSA9IHByb21pc2VXcml0ZShwcm9qZWN0SGlzdG9yeUZpbGUsIGhpc3RvcnlEYXRhKTtcbiAgICAgIHF1ZXVlUHJvbWlzZXMudW5zaGlmdChwcm9qZWN0V3JpdGUpO1xuICAgICAgcXVldWVQcm9taXNlcy51bnNoaWZ0KHByb2plY3RIaXN0b3J5V3JpdGUpO1xuXG4gICAgICAvLyBhZGQgcHJvamVjdCBmaWxlcyB0byB0aGUgdXBsb2FkIHJlYWRpbmVzc1xuICAgICAgdXBkYXRlZFJlbW90ZUZpbGVzLnB1c2goeyBrZXk6IHByb2plY3QuaWQsIHBhdGg6IHByb2plY3RGaWxlIH0pO1xuICAgICAgdXBkYXRlZFJlbW90ZUZpbGVzLnB1c2goeyBrZXk6IHByb2plY3QuaWQgKyAnX2hpc3RvcnknLCBwYXRoOiBwcm9qZWN0SGlzdG9yeUZpbGUgfSk7XG5cbiAgICAgIC8vIHVwbG9hZCB1cGRhdGVkIGhpc3RvcnkgJiBwcm9qZWN0XG4gICAgICB2YXIgYXdzVXBsb2FkID0gQVdTLmluaXQoKS51cGxvYWQodXBkYXRlZFJlbW90ZUZpbGVzLCBwcm9qZWN0LmlkKTtcbiAgICAgIHF1ZXVlUHJvbWlzZXMudW5zaGlmdChhd3NVcGxvYWQpO1xuXG4gICAgICAvLyBkbyBhbGwgcHJvbWlzZSBvcGVyYXRpb25zXG4gICAgICAkcS5hbGwocXVldWVQcm9taXNlcykudGhlbihkZmRkLnJlc29sdmUsIGRmZGQucmVqZWN0KTtcblxuICAgICAgcmV0dXJuIGRmZGQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2xlYW4gbG9jYWwgaW1hZ2VzLCB1cGRhdGUgaGlzdG9yeSB3aXRoIGF3cyByZXNvdXJjZXMsIHJldHVybnMgdGhlIHVwZGF0ZXNcbiAgICAgKi9cbiAgICBjbGVhbkltYWdlRmlsZXM6IGZ1bmN0aW9uIChwcm9qZWN0KSB7XG4gICAgICB2YXIgYmFzZSA9IF9fZGlybmFtZSArICcvc2NyZWVucy9CQVNFLycgKyBwcm9qZWN0LmlkO1xuICAgICAgdmFyIGNvbXBzID0gYmFzZS5yZXBsYWNlKCdCQVNFJywgJ2NvbXBhcmUnKTtcbiAgICAgIHZhciByZWZzID0gYmFzZS5yZXBsYWNlKCdCQVNFJywgJ3JlZmVyZW5jZScpO1xuXG4gICAgICByZW1vdmVBbGxJbkRpcmVjdG9yeShjb21wcyk7XG4gICAgICByZW1vdmVBbGxJbkRpcmVjdG9yeShyZWZzKTtcbiAgICB9XG5cbiAgfTtcbn1dKTtcbiIsIk1VRy5maWx0ZXIoJ3RpbWVBZ28nLFxuWydub3dUaW1lJywgJ3RpbWVBZ28nLFxuZnVuY3Rpb24gKG5vd1RpbWUsIHRpbWVBZ28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBmcm9tVGltZSA9IHRpbWVBZ28ucGFyc2UodmFsdWUpO1xuICAgIHZhciBkaWZmID0gbm93VGltZS5nZXRUaW1lKCkgLSBmcm9tVGltZTtcbiAgICByZXR1cm4gdGltZUFnby5pbldvcmRzKGRpZmYpO1xuICB9O1xufV0pO1xuIiwidmFyIGlwYyA9IHJlcXVpcmUoJ2lwYycpO1xuXG5NVUcuY29udHJvbGxlcignTWFpbkN0cmwnLFxuWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckc3RhdGUnLCAnQ29uZmlnJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBDb25maWcsIFByb2plY3RzKSB7XG4gICRyb290U2NvcGUuY3VycmVudFByb2plY3RJZCA9ICcnO1xuXG4gICRzY29wZS5jcmVhdGVOZXdQcm9qZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgUHJvamVjdHMuY3JlYXRlTmV3KCkudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnU0lERVBBTkVMOk5FV1BST0pFQ1QnLCByZXMpO1xuICAgICAgJHN0YXRlLmdvKCdwcm9qZWN0cy5zZXR0aW5ncycsIHsgaWQ6IHJlcy5pZCB9KTtcbiAgICB9LFxuXG4gICAgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZygnZXJyJywgZXJyKTtcbiAgICB9KTtcbiAgfTtcblxuICBpcGMub24oJ05BVklHQVRFOlRPJywgZnVuY3Rpb24oYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5sb2NhdGlvbikge3JldHVybjt9XG5cbiAgICBjb25zb2xlLmxvZygnTkFWSUdBVEU6VE8nLCBhcmdzKTtcbiAgICAkc3RhdGUuZ28oYXJncy5sb2NhdGlvbik7XG4gIH0pO1xuXG59XSk7XG4iLCJ2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIEFXUyA9IHJlcXVpcmUoJy4vdmVuZG9yL2NvcmUvYXdzJyk7XG5cbk1VRy5jb250cm9sbGVyKCdQcmVmZXJlbmNlc0N0cmwnLFxuWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckc3RhdGUnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkc3RhdGUpIHtcbiAgJHNjb3BlLmF3c0NvbmZpZyA9IHtcbiAgICBhdXRvc3luYzogdHJ1ZSxcbiAgICBidWNrZXQ6ICcnLFxuICAgIGFjY2Vzc0tleUlkOiAnJyxcbiAgICBzZWNyZXRBY2Nlc3NLZXk6ICcnXG4gIH07XG5cbiAgLy8gZ3JhYiBzZXR0aW5ncyByZWFsIHF1aWNrXG4gICRzY29wZS5hd3NDb25maWcgPSBBV1MuZ2V0Q29uZmlnKCk7XG5cbiAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBzYXZlIHRoZSBBV1MgY29uZmlnXG4gICAgQVdTLnNldENvbmZpZygkc2NvcGUuYXdzQ29uZmlnKTtcbiAgfTtcblxufV0pO1xuIiwiTVVHLmNvbnRyb2xsZXIoJ1Byb2plY3RDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlUGFyYW1zLCBQcm9qZWN0cykge1xuXG4gIC8vIEFsbG93IHRoZSBjaGlsZCB2aWV3cyB0byBiaW5kIHRvIHNhbWUgc2NvcGVcbiAgJHJvb3RTY29wZS5wcm9qZWN0ID0gUHJvamVjdHMuZ2V0QnlJZCgkc3RhdGVQYXJhbXMuaWQpO1xuXG59XSk7XG4iLCJNVUcuY29udHJvbGxlcignUHJvamVjdEhpc3RvcnlDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlUGFyYW1zLCBQcm9qZWN0cykge1xuICAkc2NvcGUuYWN0aXZlRmlsdGVyID0gJ0FsbCc7XG4gICRzY29wZS5hY3RpdmVGaWx0ZXJRdWVyeSA9ICcnO1xuXG4gIC8vIGdyYWIgYWxsIHRoZSBoaXN0b3J5IGRhdGFcbiAgJHNjb3BlLmhpc3RvcnlJdGVtcyA9IFByb2plY3RzLmdldFR5cGVCeUlkKCRzdGF0ZVBhcmFtcy5pZCwgJ2hpc3RvcnknKTtcblxuICAkc2NvcGUuY2hhbmdlRmlsdGVyID0gZnVuY3Rpb24odHlwZSkge1xuICAgICRzY29wZS5hY3RpdmVGaWx0ZXIgPSB0eXBlO1xuICAgICRzY29wZS5hY3RpdmVGaWx0ZXJRdWVyeSA9ICh0eXBlID09ICdBbGwnKSA/ICcnIDogdHlwZTtcbiAgfTtcblxuICAkc2NvcGUucHJldmlld0l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgJHJvb3RTY29wZS4kZW1pdCgnTU9EQUw6T1BFTicsIHsgdHlwZTogJ3ByZXZpZXcnLCBpdGVtOiBpdGVtLCBwcm9qZWN0OiAkcm9vdFNjb3BlLnByb2plY3QgfSk7XG4gIH07XG5cbn1dKTtcbiIsInZhciBpcGMgPSByZXF1aXJlKCdpcGMnKTtcblxuTVVHLmNvbnRyb2xsZXIoJ1Byb2plY3RSdW5uZXJDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHRpbWVvdXQnLCAnJHN0YXRlUGFyYW1zJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHRpbWVvdXQsICRzdGF0ZVBhcmFtcywgUHJvamVjdHMpIHtcbiAgJHNjb3BlLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgJHNjb3BlLmhhc1NldHRpbmdzID0gZmFsc2U7XG4gICRzY29wZS5oYXNSZWZlcmVuY2UgPSBmYWxzZTtcbiAgJHNjb3BlLmhhc0NvbXBhcmUgPSBmYWxzZTtcbiAgJHNjb3BlLnJ1bm5pbmdUeXBlID0gJ3JlZmVyZW5jZSc7XG4gICRzY29wZS5iYXRjaEl0ZW1zID0gW107XG4gICRzY29wZS5hY3RpdmVEYXRhID0ge307XG4gICRzY29wZS5jdXJyZW50QmF0Y2ggPSAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoIHx8IDA7XG4gICRzY29wZS5wcm9ncmVzcyA9IHtcbiAgICBwZXJjZW50OiAwLFxuICAgIHRpdGxlOiAnU3RhcnRpbmcnXG4gIH07XG5cbiAgLy8gUHV0cyBkYXRhIGludG8gc29ydGVkIHNlY3Rpb25zXG4gIGZ1bmN0aW9uIHByb2Nlc3NCYXRjaChhbGxEYXRhKSB7XG4gICAgaWYgKCFhbGxEYXRhIHx8IGFsbERhdGEubGVuZ3RoIDwgMSkge1xuICAgICAgJHNjb3BlLmhhc1JlZmVyZW5jZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIHJlc2V0IGp1c3QgdGhlIHN0YXRzXG4gICAgJHNjb3BlLmFjdGl2ZURhdGEgPSB7fTtcbiAgICAkc2NvcGUuYWN0aXZlRGF0YS5zdWNjZXNzID0gMDtcbiAgICAkc2NvcGUuYWN0aXZlRGF0YS53YXJuaW5nID0gMDtcbiAgICAkc2NvcGUuYWN0aXZlRGF0YS5lcnJvciA9IDA7XG4gICAgdmFyIGZvcm1hdHRlZCA9IFt7IHR5cGU6ICdzdWNjZXNzJywgaXRlbXM6IFtdfSwgeyB0eXBlOiAnd2FybmluZycsIGl0ZW1zOiBbXX0sIHsgdHlwZTogJ2Vycm9yJywgaXRlbXM6IFtdfV07XG5cbiAgICBmdW5jdGlvbiBwbGFjZUl0ZW0oaXRlbSkge1xuXG4gICAgICAvLyBLZWVwIHRoaW5ncyBvcmdhbml6ZXMgd2l0aCBwcmVzZXQgcHJpb3JpdHlcbiAgICAgIGlmIChpdGVtLnN0YXR1cykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gMDtcblxuICAgICAgICBzd2l0Y2ggKGl0ZW0uc3RhdHVzKSB7XG4gICAgICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgICAgICB0YXJnZXQgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgICAgIHRhcmdldCA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdHRlZFt0YXJnZXRdLml0ZW1zLnVuc2hpZnQoaXRlbSk7XG4gICAgICAgICRzY29wZS5hY3RpdmVEYXRhW2Zvcm1hdHRlZFt0YXJnZXRdLnR5cGVdID0gJHNjb3BlLmFjdGl2ZURhdGFbZm9ybWF0dGVkW3RhcmdldF0udHlwZV0gKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFsbERhdGEubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICBpZiAob2JqLmJhdGNoID09PSAkc2NvcGUuY3VycmVudEJhdGNoKSB7XG4gICAgICAgIHBsYWNlSXRlbShvYmopO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLmhhc1JlZmVyZW5jZSA9IHRydWU7XG4gICAgcmV0dXJuIGZvcm1hdHRlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldHVwQ3VycmVudEJhdGNoKCkge1xuICAgIGlmICgkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoID09PSBudWxsKSB7cmV0dXJuO31cblxuICAgIC8vIGdyYWIgYWxsIHRoZSBydW5uZXIgdGVzdCBkYXRhXG4gICAgdmFyIGlkID0gKHR5cGVvZiAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoICE9PSB1bmRlZmluZWQpID8gJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCA6IDA7XG4gICAgdmFyIGhpc3RvcnlEYXRhID0gUHJvamVjdHMuZ2V0VHlwZUJ5SWQoJHN0YXRlUGFyYW1zLmlkLCAnaGlzdG9yeScpO1xuXG4gICAgLy8gU3RvcmUgdGhlIHByb2Nlc3NlZCBkYXRhIGludG8gdGhlIGJhdGNoIGRhdGFcbiAgICAkc2NvcGUuYmF0Y2hJdGVtcyA9IHByb2Nlc3NCYXRjaChoaXN0b3J5RGF0YSk7XG5cbiAgICAvLyBzZXR1cCB3aGljaCB2aWV3IHRvIHNob3cgYmFzZWQgb24gaGlzdG9yeVxuICAgICRzY29wZS5ydW5uaW5nVHlwZSA9ICgkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudFJlZmVyZW5jZSA+PSAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoKSA/ICdyZWZlcmVuY2UnIDogJ2NvbXBhcmUnO1xuICB9XG5cbiAgLy8gdmFsaWRhdGlvbiBvZiBwcm9qZWN0XG4gIGZ1bmN0aW9uIHZhbGlkYXRlUHJvamVjdCgpIHtcbiAgICAvLyB2ZXJpZnkgaWYgaXRzIHZhbGlkXG4gICAgdmFyIGlzVmFsaWQgPSBQcm9qZWN0cy52YWxpZGF0ZSgkcm9vdFNjb3BlLnByb2plY3QpO1xuXG4gICAgLy8gYWxlcnQgb2YgaW52YWxpZGl0eVxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdBTEVSVDpGSVJFJywgeyB0aXRsZTogJ1BsZWFzZSBmaW5pc2ggY29uZmlndXJpbmcgc2V0dGluZ3MhJywgZHVyOiA1LCB0eXBlOiAnZXJyb3InLCBpY29uOiAnc3RvcCcgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzVmFsaWQ7XG4gIH1cblxuICAvLyBjaGVja3MgZm9yIGNoYW5nZXMgYW5kIHVwZGF0ZXMgVUkgYWNjb3VyZGluZ2x5XG4gIGZ1bmN0aW9uIGNoZWNrU3RhdGUoKSB7XG4gICAgJHNjb3BlLmhhc1NldHRpbmdzID0gdmFsaWRhdGVQcm9qZWN0KCk7XG4gICAgJHNjb3BlLmhhc1JlZmVyZW5jZSA9ICgkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudFJlZmVyZW5jZSAhPT0gbnVsbCk7XG4gICAgJHNjb3BlLmN1cnJlbnRCYXRjaCA9ICRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2g7XG5cbiAgICBpZiAoJHNjb3BlLnJ1bm5pbmdUeXBlID09PSAncmVmZXJlbmNlJykge1xuICAgICAgJHNjb3BlLmhhc0NvbXBhcmUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLmhhc0NvbXBhcmUgPSAoJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCAhPT0gbnVsbCAmJiAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoICE9PSAwKTtcbiAgICAgICRzY29wZS5oYXNDb21wYXJlID0gKCRyb290U2NvcGUucHJvamVjdC5jdXJyZW50UmVmZXJlbmNlIDw9ICRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGdyYWIgdGhlIGxhdGVzdCBkYXRhIGZvciB0aGUgcHJvamVjdFxuICBmdW5jdGlvbiBncmFiTGF0ZXN0RGF0YSgpIHtcbiAgICAkcm9vdFNjb3BlLnByb2plY3QgPSBQcm9qZWN0cy5nZXRCeUlkKCRyb290U2NvcGUucHJvamVjdC5pZCwgJ2hpc3RvcnknKTtcblxuICAgIC8vIFNldCB0aGUgYWN0aXZlIGRhdGEgYmFzZWQgb24gY3VycmVudEJhdGNoXG4gICAgJHNjb3BlLmFjdGl2ZURhdGEgPSAoJHJvb3RTY29wZS5wcm9qZWN0ICYmICRyb290U2NvcGUucHJvamVjdC5iYXRjaEhpc3RvcnkpID8gJHJvb3RTY29wZS5wcm9qZWN0LmJhdGNoSGlzdG9yeVskc2NvcGUuY3VycmVudEJhdGNoXSA6IG51bGw7XG5cbiAgICAkcm9vdFNjb3BlLiRlbWl0KCdTSURFUEFORUw6VVBEQVRFJywgJHJvb3RTY29wZS5wcm9qZWN0KTtcbiAgfVxuXG4gIGdyYWJMYXRlc3REYXRhKCk7XG4gIHNldHVwQ3VycmVudEJhdGNoKCk7XG4gIGNoZWNrU3RhdGUoKTtcblxuICAvLyBGaXJlIG9mZiB0aGUgdmlld2VyXG4gICRzY29wZS5wcmV2aWV3QmF0Y2ggPSBmdW5jdGlvbihpdGVtcykge1xuICAgICRyb290U2NvcGUuJGVtaXQoJ01PREFMOk9QRU4nLCB7IHR5cGU6ICdiYXRjaCcsIGl0ZW1zOiBpdGVtcywgcHJvamVjdDogJHJvb3RTY29wZS5wcm9qZWN0IH0pO1xuICB9O1xuXG4gIC8vIEZpcmUgb2ZmIGEgbmV3IHRlc3QhIVxuICAkc2NvcGUubmV3Q29tcGFyZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWxpZCA9IHZhbGlkYXRlUHJvamVjdCgpO1xuXG4gICAgLy8gdmFsaWRhdGlvbiBwYXVzZVxuICAgIGlmICghdmFsaWQpIHtyZXR1cm47fVxuXG4gICAgJHNjb3BlLnJ1bm5pbmdUeXBlID0gJ2NvbXBhcmUnO1xuICAgICRzY29wZS5wcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkcm9vdFNjb3BlLiRlbWl0KCdQUkVMT0FERVI6T04nKTtcbiAgICB9LCAxMCk7XG5cbiAgICBpcGMuc2VuZCgnUlVOTkVSOkZJUkUnLCB7IHR5cGU6ICdjb21wYXJlJywgcHJvamVjdElkOiAkcm9vdFNjb3BlLnByb2plY3QuaWQgfSk7XG4gIH07XG5cbiAgLy8gc2V0dXAgbmV3IHJlZmVyZW5jZVxuICAkc2NvcGUubmV3UmVmZXJlbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbGlkID0gdmFsaWRhdGVQcm9qZWN0KCk7XG5cbiAgICAvLyB2YWxpZGF0aW9uIHBhdXNlXG4gICAgaWYgKCF2YWxpZCkge3JldHVybjt9XG5cbiAgICAkc2NvcGUucHJvY2Vzc2luZyA9IHRydWU7XG4gICAgJHNjb3BlLnJ1bm5pbmdUeXBlID0gJ3JlZmVyZW5jZSc7XG4gICAgJHNjb3BlLmhhc0NvbXBhcmUgPSBmYWxzZTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkcm9vdFNjb3BlLiRlbWl0KCdQUkVMT0FERVI6T04nKTtcbiAgICB9LCAxMCk7XG5cbiAgICBpcGMuc2VuZCgnUlVOTkVSOkZJUkUnLCB7IHR5cGU6ICdyZWZlcmVuY2UnLCBwcm9qZWN0SWQ6ICRyb290U2NvcGUucHJvamVjdC5pZCB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBydW5uZXJFdmVudHMoYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5tc2cgfHwgIWFyZ3MucGVyY2VudCkge3JldHVybjt9XG5cbiAgICAvLyBXcml0ZSB0aGUgcHJvZ3Jlc3MgdG8gVUlcbiAgICAkc2NvcGUucHJvZ3Jlc3MucGVyY2VudCA9IHBhcnNlSW50KGFyZ3MucGVyY2VudCwgMTApO1xuICAgICRzY29wZS5wcm9ncmVzcy50aXRsZSA9IChhcmdzLm1zZykgPyBhcmdzLm1zZyA6ICRzY29wZS5wcm9ncmVzcy50aXRsZTtcblxuICAgICRyb290U2NvcGUuJGVtaXQoJ1BSRUxPQURFUjpVUERBVEUnLCBhcmdzKTtcbiAgfVxuXG4gIC8vIHNpZ25hbCBVSSBvZiBjaGFuZ2VzXG4gIGZ1bmN0aW9uIHJ1bm5lckNvbXBsZXRlKCkge1xuICAgIGdyYWJMYXRlc3REYXRhKCk7XG4gICAgc2V0dXBDdXJyZW50QmF0Y2goKTtcbiAgICBjaGVja1N0YXRlKCk7XG4gICAgJHNjb3BlLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bm5lckZhaWxlZChyZWFzb24pIHtcbiAgICBjb25zb2xlLmxvZygnUlVOTkVSOkZBSUxFRCByZWFzb24nLCByZWFzb24pO1xuICAgICRzY29wZS5wcm9jZXNzaW5nID0gZmFsc2U7XG4gIH1cblxuICBpcGMub24oJ1JVTk5FUjpQUk9HUkVTUycsIHJ1bm5lckV2ZW50cyk7XG4gIGlwYy5vbignUlVOTkVSOkNPTVBMRVRFJywgcnVubmVyQ29tcGxldGUpO1xuICBpcGMub24oJ1JVTk5FUjpGQUlMRUQnLCBydW5uZXJGYWlsZWQpO1xuXG59XSk7XG4iLCJNVUcuY29udHJvbGxlcignUHJvamVjdFNldHRpbmdzQ3RybCcsXG5bJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRzdGF0ZScsICdQcm9qZWN0cycsXG5mdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRzdGF0ZSwgUHJvamVjdHMpIHtcbiAgdmFyIHNhdmVUaW1lcjtcblxuICAkc2NvcGUuc2VsZWN0b3JUeXBlcyA9IFsnY29udGFpbmVyJywgJ2hpZGUnLCAncmVtb3ZlJ107XG4gICRzY29wZS5oYXNDaGFuZ2VzID0gZmFsc2U7XG4gICRzY29wZS5tYXN0ZXIgPSB7fTtcbiAgYW5ndWxhci5jb3B5KCRyb290U2NvcGUucHJvamVjdCwgJHNjb3BlLm1hc3Rlcik7XG5cbiAgZnVuY3Rpb24gYWRkTmV3VHlwZSh0eXBlLCBkYXRhKSB7XG4gICAgJHJvb3RTY29wZS5wcm9qZWN0W3R5cGVdLnB1c2goZGF0YSk7XG4gIH1cblxuICAvLyBXYXRjaCBmb3IgY2hhbmdlcywgc28gd2UgY2FuIHNhdmVcbiAgJHNjb3BlLiR3YXRjaCgncHJvamVjdCcsIGZ1bmN0aW9uKG5WLCBvVikge1xuICAgIGlmIChuViAhPSBvVikge1xuICAgICAgJHNjb3BlLmhhc0NoYW5nZXMgPSB0cnVlO1xuXG4gICAgICAvLyBzYXZlIHRoZSBmaWxlIGZvciBjb252ZW5pZW5jZVxuICAgICAgJHNjb3BlLnNhdmUoKTtcbiAgICB9XG4gIH0sIHRydWUpO1xuXG4gIC8vIFRPRE86IHNldHVwIHZhbGlkYXRpb25zXG4gIC8vIHNhdmUgdGhlIGN1cnJlbnQgcHJvamVjdFxuICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzYXZlVGltZXIpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoc2F2ZVRpbWVyKTtcbiAgICB9XG5cbiAgICAvLyB0aHJvdHRsZSB0aGUgc2F2ZXMsIHNpbmNlIHdlIHNhdmUgb24gYW55IGNoYW5nZXNcbiAgICBzYXZlVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAvLyBTYXZlIHRlaCBwcm9qZWN0b2lkXG4gICAgICBQcm9qZWN0cy5zYXZlKCRyb290U2NvcGUucHJvamVjdClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBzaWRlYmFyIHdpdGggY2hhbmdlc1xuICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ1NJREVQQU5FTDpVUERBVEUnLCByZXMpO1xuXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSByZXZlcnQgbW9kZWxcbiAgICAgICAgICBhbmd1bGFyLmNvcHkoJHJvb3RTY29wZS5wcm9qZWN0LCAkc2NvcGUubWFzdGVyKTtcbiAgICAgICAgICAkc2NvcGUuaGFzQ2hhbmdlcyA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnInLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCAyMDApO1xuICB9O1xuXG4gIC8vIHN5bmMgdGhpcyBwcm9qZWN0IHRvIEFXU1xuICAkc2NvcGUuc3luY05vdyA9IGZ1bmN0aW9uKCkge1xuICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6ICdTeW5jIFN0YXJ0aW5nJywgZHVyOiA1LCB0eXBlOiAnaW5mbycgfSk7XG5cbiAgICBQcm9qZWN0cy5zeW5jKCRyb290U2NvcGUucHJvamVjdC5pZClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnU3luYyBDb21wbGV0ZScsIGR1cjogNSwgdHlwZTogJ3N1Y2Nlc3MnLCBpY29uOiAnY2hlY2snIH0pO1xuICAgICAgfVxuXG4gICAgICAsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnc3luY05vdyBlcnInLCBlcnIpO1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnU3luYyBGYWlsZWQnLCBkdXI6IDUsIHR5cGU6ICdlcnJvcicsIGljb246ICdzdG9wZScgfSk7XG4gICAgICB9KTtcbiAgfTtcblxuICAvLyByZXZlcnQgdGhlIGN1cnJlbnQgcHJvamVjdFxuICAkc2NvcGUuY2FuY2VsU2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdXJlID0gY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNsZWFyIGFsbCB5b3VyIGNoYW5nZXM/Jyk7XG4gICAgaWYgKHN1cmUpIHtcbiAgICAgIC8vIHB1dCByZXZlcnQgbW9kZWwgaW50byB0aGUgcHJvamVjdCBtb2RlbFxuICAgICAgYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIsICRyb290U2NvcGUucHJvamVjdCk7XG4gICAgICAkc2NvcGUuaGFzQ2hhbmdlcyA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICAvLyBkZWxldGUgdGhlIHByb2plY3QsIGFuZCByZW1vdmUgZnJvbSBwcm9qZWN0IGxpc3RzLCB0aGVuIHJlZGlyZWN0IHRvIG1haW5cbiAgJHNjb3BlLmRlbGV0ZVByb2plY3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3VyZSA9IGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBwcm9qZWN0PycpO1xuICAgIGlmIChzdXJlKSB7XG4gICAgICB2YXIgcHJvamVjdElEID0gJHJvb3RTY29wZS5wcm9qZWN0LmlkO1xuXG4gICAgICBQcm9qZWN0cy5yZW1vdmUocHJvamVjdElEKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdTSURFUEFORUw6UkVNT1ZFJywgeyBpZDogcHJvamVjdElEIH0pO1xuICAgICAgICAgICRzdGF0ZS5nbygnbWFpbicpO1xuICAgICAgICAgICRyb290U2NvcGUucHJvamVjdCA9IHt9O1xuICAgICAgICAgICRzY29wZS5oYXNDaGFuZ2VzID0gZmFsc2U7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdBTEVSVDpGSVJFJywgeyB0aXRsZTogJ1Byb2plY3QgUmVtb3ZlZCBTdWNjZXNzZnVsbHknLCBkdXI6IDUsIHR5cGU6ICdzdWNjZXNzJyB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXJyJywgZXJyKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdTSURFUEFORUw6UkVNT1ZFJywgeyBpZDogcHJvamVjdElEIH0pO1xuICAgICAgICAgICRzdGF0ZS5nbygnbWFpbicpO1xuICAgICAgICAgICRyb290U2NvcGUucHJvamVjdCA9IHt9O1xuICAgICAgICAgICRzY29wZS5oYXNDaGFuZ2VzID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZHMgYSBuZXcgdmlld3BvcnQgaXRlbVxuICAkc2NvcGUuYWRkVmlld3BvcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3Vmlld3BvcnQgPSB7XG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICBuYW1lOiBudWxsLFxuICAgICAgd2lkdGg6IG51bGwsXG4gICAgICBoZWlnaHQ6IG51bGxcbiAgICB9O1xuXG4gICAgYWRkTmV3VHlwZSgndmlld3BvcnRzJywgbmV3Vmlld3BvcnQpO1xuICB9O1xuXG4gIC8vIEFkZHMgYSBuZXcgc2VsZWN0b3IgaXRlbVxuICAkc2NvcGUuYWRkU2VsZWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3U2VsZWN0b3IgPSB7XG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICB0eXBlOiAnY29udGFpbmVyJyxcbiAgICAgIHF1ZXJ5OiBudWxsXG4gICAgfTtcblxuICAgIGFkZE5ld1R5cGUoJ3NlbGVjdG9ycycsIG5ld1NlbGVjdG9yKTtcbiAgfTtcblxuICAvLyBBZGRzIGEgbmV3IGNvb2tpZSBpdGVtXG4gICRzY29wZS5hZGRDb29raWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3Q29va2llID0ge1xuICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgbmFtZTogbnVsbCxcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcGF0aDogbnVsbFxuICAgIH07XG5cbiAgICBhZGROZXdUeXBlKCdjb29raWVzJywgbmV3Q29va2llKTtcbiAgfTtcblxuICAvLyBhY3RpdmF0ZSBhIGNvb2tpZS92aWV3L3NlbGVjdFxuICAkc2NvcGUuYWN0aXZhdGVUeXBlID0gZnVuY3Rpb24odHlwZSwgaWQpIHtcbiAgICAkcm9vdFNjb3BlLnByb2plY3RbdHlwZV1baWRdLmFjdGl2ZSA9ICgkcm9vdFNjb3BlLnByb2plY3RbdHlwZV1baWRdLmFjdGl2ZSA9PT0gdHJ1ZSB8fCAkcm9vdFNjb3BlLnByb2plY3RbdHlwZV1baWRdLmFjdGl2ZSA9PT0gJ3RydWUnKSA/IGZhbHNlIDogdHJ1ZTtcblxuICAgIC8vIHNhdmUgdGhlIGZpbGUgZm9yIGNvbnZlbmllbmNlXG4gICAgJHNjb3BlLnNhdmUoKTtcbiAgfTtcblxuICAvLyBSZW1vdmUgYSBjb29raWUvdmlldy9zZWxlY3RcbiAgJHNjb3BlLmRlbGV0ZVR5cGVJdGVtID0gZnVuY3Rpb24odHlwZSwgaWQpIHtcbiAgICAkcm9vdFNjb3BlLnByb2plY3RbdHlwZV0uc3BsaWNlKGlkLCAxKTtcblxuICAgIC8vIHNhdmUgdGhlIGZpbGUgZm9yIGNvbnZlbmllbmNlXG4gICAgJHNjb3BlLnNhdmUoKTtcbiAgfTtcblxuICAvLyBSZW1vdmVzIGFsbCBoaXN0b3J5IGRhdGFcbiAgJHNjb3BlLmNsZWFySGlzdG9yeSA9IGZ1bmN0aW9uKCkge1xuICAgIFByb2plY3RzLmNsZWFySGlzdG9yeSgkcm9vdFNjb3BlLnByb2plY3QpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdBTEVSVDpGSVJFJywgeyB0aXRsZTogJ0NsZWFyZWQgQWxsIEhpc3RvcnkhJywgZHVyOiA1LCB0eXBlOiAnc3VjY2VzcycsIGljb246ICdoaXN0b3J5JyB9KTtcbiAgICAgIH1cblxuICAgICAgLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdBTEVSVDpGSVJFJywgeyB0aXRsZTogJ0Vycm9yIE9jY3VycmVkISBQbGVhc2UgdHJ5IGFnYWluLicsIGR1cjogNSwgdHlwZTogJ2Vycm9yJywgaWNvbjogJ3N0b3AnIH0pO1xuICAgICAgfSk7XG4gIH07XG5cbn1dKTtcbiIsInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbk1VRy5jb250cm9sbGVyKCdTaWRlUGFuZWxDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBQcm9qZWN0cykge1xuICAkc2NvcGUucHJvamVjdHMgPSBbXTtcblxuICAvLyBncmFiIGFsbCBwcm9qZWN0cyBsaXN0XG4gICRzY29wZS5wcm9qZWN0cyA9IFByb2plY3RzLmdldEFsbCgpO1xuXG4gIC8vIGFkZCBuZXcgcHJvamVjdCB0byB0aGUgcHJvamVjdHMgbGlzdFxuICAkcm9vdFNjb3BlLiRvbignU0lERVBBTkVMOk5FV1BST0pFQ1QnLCBmdW5jdGlvbihlLCBhcmdzKSB7XG4gICAgaWYgKCFhcmdzIHx8ICFhcmdzLmlkKSB7IHJldHVybjsgfVxuXG4gICAgJHNjb3BlLnByb2plY3RzLnVuc2hpZnQoYXJncyk7XG4gIH0pO1xuXG4gIC8vIHVwZGF0ZSB0aGUgcHJvamVjdHMgbGlzdFxuICAkcm9vdFNjb3BlLiRvbignU0lERVBBTkVMOlVQREFURScsIGZ1bmN0aW9uKGUsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MuaWQpIHsgcmV0dXJuOyB9XG5cbiAgICAkc2NvcGUucHJvamVjdHMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICBpZiAob2JqLmlkID09PSBhcmdzLmlkKSB7XG4gICAgICAgICRzY29wZS5wcm9qZWN0c1tpZHhdLnRpdGxlID0gYXJncy50aXRsZTtcbiAgICAgICAgJHNjb3BlLnByb2plY3RzW2lkeF0udGltZXN0YW1wID0gYXJncy50aW1lc3RhbXA7XG5cbiAgICAgICAgaWYgKGFyZ3MuYmF0Y2hIaXN0b3J5W2FyZ3MuY3VycmVudEJhdGNoXSkge1xuICAgICAgICAgIC8vIG9ubHkgdXBkYXRlIHRvdGFscyBpZiB3ZSBoYXZlIHRoZW1cbiAgICAgICAgICBpZiAoYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICRzY29wZS5wcm9qZWN0c1tpZHhdLnRvdGFscy5zdWNjZXNzID0gYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLnN1Y2Nlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFyZ3MuYmF0Y2hIaXN0b3J5W2FyZ3MuY3VycmVudEJhdGNoXS53YXJuaW5nKSB7XG4gICAgICAgICAgICAkc2NvcGUucHJvamVjdHNbaWR4XS50b3RhbHMud2FybmluZyA9IGFyZ3MuYmF0Y2hIaXN0b3J5W2FyZ3MuY3VycmVudEJhdGNoXS53YXJuaW5nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhcmdzLmJhdGNoSGlzdG9yeVthcmdzLmN1cnJlbnRCYXRjaF0uZXJyb3IpIHtcbiAgICAgICAgICAgICRzY29wZS5wcm9qZWN0c1tpZHhdLnRvdGFscy5lcnJvciA9IGFyZ3MuYmF0Y2hIaXN0b3J5W2FyZ3MuY3VycmVudEJhdGNoXS5lcnJvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLnZpZXdzKSB7XG4gICAgICAgICAgICAkc2NvcGUucHJvamVjdHNbaWR4XS50b3RhbHMudmlld3MgPSBhcmdzLmJhdGNoSGlzdG9yeVthcmdzLmN1cnJlbnRCYXRjaF0udmlld3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHVwZGF0ZSB0aGUgcHJvamVjdHMgbGlzdFxuICAkcm9vdFNjb3BlLiRvbignU0lERVBBTkVMOlJFTU9WRScsIGZ1bmN0aW9uKGUsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MuaWQpIHsgcmV0dXJuOyB9XG5cbiAgICAkc2NvcGUucHJvamVjdHMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICBpZiAob2JqLmlkID09PSBhcmdzLmlkKSB7XG4gICAgICAgICRzY29wZS5wcm9qZWN0cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgJHNjb3BlLmdvVG9Qcm9qZWN0ID0gZnVuY3Rpb24oaWQpIHtcbiAgICAvLyBUT0RPOiBmaXggdGhpc1xuICAgIC8vIHZhciB0eXBlID0gJ3NldHRpbmdzJztcbiAgICB2YXIgdHlwZSA9ICdydW5uZXInO1xuXG4gICAgLy8gVE9ETzogc2V0dXAgdG8gZmlndXJlIG91dCBpZiB3ZSBuZWVkIHRvIGdvIHRvIHNldHRpbmdzLCBvdGhlcndpc2UgZ28gdG8gcnVubmVyXG4gICAgJHN0YXRlLmdvKCdwcm9qZWN0cy4nICsgdHlwZSwgeyBpZDogaWQgfSk7XG4gICAgJHJvb3RTY29wZS5jdXJyZW50UHJvamVjdElkID0gaWQ7XG4gIH1cblxufV0pO1xuIiwiLyoqXG4gKiBDb25maWdcbiAqL1xuTVVHLmNvbnN0YW50KCdDb25maWcnLCB7XG4gIEVOVjogJ1NUQUdFJyxcbiAgU1RBR0U6IHtcbiAgfSxcbiAgUFJPRDoge1xuICB9LFxuICBDb21wYXJlOiB7XG4gICAgZXJyb3JDb2xvcjoge1xuICAgICAgcmVkOiAyNTUsXG4gICAgICBncmVlbjogMCxcbiAgICAgIGJsdWU6IDI1NVxuICAgIH0sXG4gICAgZXJyb3JUeXBlOiAnZmxhdCcsXG4gICAgdHJhbnNwYXJlbmN5OiAxLFxuICAgIGxhcmdlSW1hZ2VUaHJlc2hvbGQ6IDBcbiAgfVxufSk7XG4iLCJNVUcuY29uZmlnKFxuWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInLFxuZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuXG4gIC8vIFJvdXRlc1xuICAvLyAvXG4gIC8vIC9wcm9qZWN0c1xuICAvLyAvcHJvamVjdHMvOmlkL3J1bm5lclxuICAvLyAvcHJvamVjdHMvOmlkL2hpc3RvcnlcbiAgLy8gL3Byb2plY3RzLzppZC9zZXR0aW5nc1xuXG4gICRzdGF0ZVByb3ZpZGVyXG5cbiAgLyoqXG4gICAqIEJhc2UgUm91dGVcbiAgICovXG4gIC5zdGF0ZSgnbWFpbicsIHtcbiAgICB1cmw6ICcvJyxcbiAgICB0ZW1wbGF0ZVVybDogJ21haW4uaHRtbCdcbiAgfSlcbiAgLnN0YXRlKCdwcmVmZXJlbmNlcycsIHtcbiAgICB1cmw6ICcvcHJlZmVyZW5jZXMnLFxuICAgIHRlbXBsYXRlVXJsOiAncHJlZmVyZW5jZXMuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1ByZWZlcmVuY2VzQ3RybCdcbiAgfSlcblxuICAvKipcbiAgICogUHJvamVjdCBSb3V0ZXNcbiAgICovXG4gIC5zdGF0ZSgncHJvamVjdHMnLCB7XG4gICAgdXJsOiAnL3Byb2plY3RzLzppZCcsXG4gICAgdGVtcGxhdGVVcmw6ICdwcm9qZWN0cy5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUHJvamVjdEN0cmwnXG4gIH0pXG4gIC5zdGF0ZSgncHJvamVjdHMuc2V0dGluZ3MnLCB7XG4gICAgdXJsOiAnL3NldHRpbmdzJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2plY3RzLnNldHRpbmdzLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0U2V0dGluZ3NDdHJsJ1xuICB9KVxuICAuc3RhdGUoJ3Byb2plY3RzLnJ1bm5lcicsIHtcbiAgICB1cmw6ICcvcnVubmVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2plY3RzLnJ1bm5lci5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUHJvamVjdFJ1bm5lckN0cmwnXG4gIH0pXG4gIC5zdGF0ZSgncHJvamVjdHMuaGlzdG9yeScsIHtcbiAgICB1cmw6ICcvaGlzdG9yeScsXG4gICAgdGVtcGxhdGVVcmw6ICdwcm9qZWN0cy5oaXN0b3J5Lmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0SGlzdG9yeUN0cmwnXG4gIH0pXG5cbiAgLyoqXG4gICAqIFN0YXRpYyBSb3V0ZXNcbiAgICovXG5cbiAgLy8gLnN0YXRlKCdtYWluLjQwNCcsIHtcbiAgLy8gICAgIHVybDogXCIvNDA0XCIsXG4gIC8vICAgICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvNDA0Lmh0bWxcIixcbiAgLy8gICAgIGlzRXh0ZXJuYWw6IHRydWVcbiAgLy8gfSlcblxuICAvLyBFbmQgb2YgdGhlIHdvcmxkXG4gIDtcblxuICAvLyB1cmwgcmUtcm91dGluZ1xuICAvLyAkdXJsUm91dGVyUHJvdmlkZXJcbiAgLy8gICAud2hlbignL3Byb2plY3RzJywgJy8nKVxuICAvLyAgIC53aGVuKCcvcHJvamVjdHMvJywgJy8nKTtcblxuICAvLyBpZiBub25lIG9mIHRoZSBhYm92ZSBzdGF0ZXMgYXJlIG1hdGNoZWQsIHVzZSB0aGlzIGFzIHRoZSBmYWxsYmFja1xuICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG5cbn1dKTtcbiIsIk1VRy5ydW4oWyckcm9vdFNjb3BlJywgJyRodHRwJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRodHRwKSB7XG5cbiAgLy8gaGVhZGVyc1xuICB2YXIgJGNvbW1vbiA9ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uO1xuICAkY29tbW9uWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbihldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcbiAgICBjb25zb2xlLmxvZygnJHN0YXRlQ2hhbmdlRXJyb3InLCBlcnJvcik7XG4gIH0pO1xuXG59XSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=