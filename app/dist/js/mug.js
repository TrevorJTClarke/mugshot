var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.directive("alert",["$rootScope","$timeout","$compile","$templateCache",function(e,t,r,n){return{restrict:"E",replace:!0,template:'<div class="alert-parent"></div>',scope:{},link:function(o,c,i,a){function s(n){var o=+new Date,c=(n.title,n.icon?n.icon:null,e.$new(!0));c.alert={},c.alert.id=o,c.alert.icon=n.icon?n.icon:null,c.alert.type=n.type?n.type:"info",c.alert.title=n.title,c.alert.action=n.callback?function(){this.id;n.callback(),u(this)}:null;var i=r(p)(c);i[0].id=o,d=o,f.append(i),i.addClass(h),t(function(){i.addClass(v)},20),l=t(function(){u(i)},m)}function u(e){if(!e&&d)e=angular.element(document.getElementById(d));else{if(!e)return;e&&(e=angular.element(e))}e.removeClass(v),t(function(){e.remove()},300)}var l,p=n.get("alert.html"),f=angular.element(c),m=5e3,d="",h="alert-active",v="alert-visible";e.$on("ALERT:FIRE",function(e,t){t.title&&(window.clearTimeout(l),u(),t.dur&&(m=1e3*t.dur),s(t))})}}}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(e,t,r){var n=parseInt(r.fadeIn)||10;t.addClass("fade-in"),setTimeout(function(){t.css("opacity","1")},n)}}}]),MUG.directive("modal",["$timeout","$compile","$rootScope",function(e,t,r){return{restrict:"E",replace:!0,templateUrl:"modal.html",scope:{},link:function(e,t,n){function o(t){var n=t.remoteSource?t.remoteSource:t.source;e.compareItem.a=t.remoteSource?n:"screens/reference/"+r.project.id+"/"+n.replace(r.project.currentBatch+".png",r.project.currentReference+".png"),e.compareItem.b=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n,e.compareItem.c=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n.replace(".png","_diff.png")}var c="modal-open",i="modal-visible";e.project=angular.copy(r.project),e.activeOption="sides",e.opacityRange={},e.currentIndex=0,e.activeItem={},e.compareItem={a:"",b:"",c:""},e.viewer={items:[]},e.opacityRange={amount:.8,inverse:.2,percent:"80%"},e.$watch("opacityRange.amount",function(t,r){t!==r&&(e.opacityRange.inverse=(1-t).toFixed(2),e.opacityRange.percent=Math.round(100*t)+"%")}),e.optionMode=function(t){e.activeOption=t},r.$on("MODAL:CLOSE",function(t,r){e.close()}),r.$on("MODAL:OPEN",function(n,a){a&&a.type&&(e.currentIndex=0,e.project=angular.copy(r.project),"preview"===a.type&&(e.activeItem=a.item,e.viewer=a.project||{},e.viewer.items=null,e.compareItem.a=e.activeItem.remoteSource?e.activeItem.remoteSource:"screens/"+e.activeItem.type+"/"+r.project.id+"/"+e.activeItem.source),"batch"===a.type&&a.items.length>0&&(e.activeItem=a.items[e.currentIndex],e.viewer=a.project||{},e.viewer.items=a.items,o(e.activeItem)),t.addClass(c),setTimeout(function(){t.addClass(i)},30))}),e.close=function(){t.removeClass(i),setTimeout(function(){t.removeClass(c)},230)},e.modalActionNav=function(t){if(!(e.viewer.items.length<1)){var r,n=e.viewer.items.length-1;r="right"===t?e.currentIndex===n?0:e.currentIndex+1:0===e.currentIndex?n:e.currentIndex-1,e.activeItem=e.viewer.items[r],e.currentIndex=r,o(e.activeItem)}},e.goToIndex=function(t){e.currentIndex!==t&&(e.activeItem=e.viewer.items[t],e.currentIndex=t,o(e.activeItem))}}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(e,t,r){return{scope:{},link:function(n,o,c,i){function a(e){var o=+new Date,c=e.msg,i=e.icon?e.icon:h,a=p.replace("BODY",c).replace("ICON",i),v=r(a)(n);v[0].id=o,d=o,f.append(v);var g=f.find("#"+o);u(g,e.type),e.callback&&g.find(".msg-action").addClass("show"),t(function(){g.addClass("add")},20),l=t(function(){s(g)},m)}function s(e){if(!e&&d)e=f.find("#"+d);else if(!e)return;e.removeClass("add"),e.addClass("remove"),t(function(){angular.element(e).remove()},300)}function u(e,t){e.removeClass("msg-info"),e.removeClass("msg-warn"),t&&e.addClass("msg-"+t)}var l,p='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',f=angular.element(o),m=5e3,d="",h="info";n.body="",n.callback=null,n.icon=h,n.action=function(){var e=f.find("#"+this.id);n.callback(),s(e)},e.$on("MSGCENTER:FIRE",function(e,t){t.msg&&(window.clearTimeout(l),s(),t.dur&&(m=1e3*t.dur),t.callback&&(n.callback=t.callback),a(t))})}}}]);var P=require("./vendor/core/preloader");MUG.directive("preloader",["$rootScope","$timeout",function(e,t){function r(e){var t=0,r=0,o=0,c=12;if(e.selectors&&e.selectors.length>0)for(var i=0;i<e.selectors.length;i++)e.selectors[i]&&"container"===e.selectors[i].type&&(o+=1);e.viewports&&e.viewports.length>0&&(r=e.viewports.length),e.meta&&e.meta.delay&&(t=parseInt(e.meta.delay,10)),n=c*r*o+30}var n=30;return{replace:!0,restrict:"E",scope:{},template:'<div class="preloader"></div>',link:function(o,c,i,a){function s(e,t){if(t&&t.msg){if(t.project&&r(t.project),!h)return h=!0,void(f=setTimeout(function(){h=!1},10*n));m=t.msg;var o;switch(m){case"Opening Browser Session":o=0;break;case"Capturing Screens":o=1}m!==d&&l&&l.animate&&l.animate(o,n,function(){d=m})}}function u(){l.resetBrowser()}var l,p,f,m,d,h=!1;t(function(){l=new P.Browser,l.init(),p=document.querySelector(".preloader"),p.appendChild(l.instance),l.drawBrowser()},30),e.$on("PRELOADER:UPDATE",s),e.$on("PRELOADER:OFF",u)}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(e,t){return{restrict:"EA",link:function(r,n,o){var c;o.$observe("fromTime",function(t){c=e.parse(t)}),r.$watch(function(){return t.getTime()-c},function(t){angular.element(n).text(e.inWords(t))})}}}]);var fs=require("fs"),async=require("async");MUG.factory("Compare",["$q","Config",function(e,t){function r(e,t){fs.readFile(o+e,"base64",t)}function n(n,o){var i=e.defer(),a={};return resemble.outputSettings(t.Compare),async.map([n,o],r,function(e,t){var r=c+t[0],n=c+t[1];e&&i.reject(e),resemble(r).compareTo(n).ignoreColors().onComplete(function(e){a.report=e,a.src=e.getImageDataUrl(),i.resolve(a)})}),i.promise}var o=__dirname+"/",c="data:image/png;base64,",i=["passed","warning","failed"];return{runSingle:n,getStatus:function(e){var t=parseFloat(e.misMatchPercentage);return.1>t?e.isSameDimensions===!1?i[1]:i[0]:t>.1&&2>t?i[1]:i[2]}}}]),MUG.factory("nowTime",["$timeout",function(e){var t=Date.now(),r=function(){e(function(){t=Date.now(),r()},1e3)};return r(),{getTime:function(){return t}}}]);var fs=require("fs"),path=require("path"),AWS=require("./vendor/core/aws");MUG.factory("Projects",["$q",function(e){function t(e){return"number"==typeof e&&e===parseInt(e,10)&&(e=Array(e+1).join("x")),e.replace(/x/g,function(){var e=Math.round(61*Math.random())+48;return e=e>57?e+7>90?e+13:e+7:e,String.fromCharCode(e)})}function r(e){e=e||0;var r=t(12);return{id:r,title:"Project "+(parseInt(e,10)+1),timestamp:+new Date,totals:{success:null,warning:null,error:null,views:0}}}function n(e){t(12);return{batchHistory:{},currentBatch:null,currentReference:null,id:e.id,title:e.title,timestamp:e.timestamp,viewports:[],selectors:[],cookies:[],meta:{url:null,readyEvent:null,delay:null,misMatchThreshold:null}}}function o(e,t){var r;try{r=fs.readFileSync(e,"utf8")}catch(n){if("ENOENT"===n.code)return t||{};throw n}return JSON.parse(r)}function c(e){try{var t=fs.readdirSync(e)}catch(r){return}if(t.length>0)for(var n=0;n<t.length;n++){var o=path.join(e,t[n]);fs.statSync(o).isFile()?fs.unlinkSync(o):rmDir(o)}}function i(t,r){var n=e.defer();return fs.writeFile(t,JSON.stringify(r),function(e){return e?void n.reject(e):void n.resolve()}),n.promise}function a(t){var r=e.defer();return fs.unlink(t,function(e){return e?void r.reject(e):void r.resolve()}),r.promise}var s=__dirname+"/projects.json",u=__dirname+"/projects/";return{get:function(e,t){return o(__dirname+e,t)},getAll:function(){return o(s,[])},getById:function(e){return o(u+e+".json")},getTypeById:function(e,t){var r=t?"_"+t:"";return o(u+e+r+".json",[])},validate:function(e){var t=e.cookies,r=e.viewports,n=e.selectors,o=e.title,c=e.meta.url,i=!0;return!r||!n||!o||!c||r.length<1||n.length<1?!1:(r&&r.map(function(e,t){e.width&&e.height&&e.name||(i=!1)}),n&&n.map(function(e,t){e.query&&e.type||(i=!1)}),t&&t.map(function(e,t){e.name&&e.path&&e.value||(i=!1)}),i)},createNew:function(){var t=e.defer(),o=[],c=JSON.parse(fs.readFileSync(s,"utf8")),a=r(c.length),l=n(a);c.unshift(a);var p=i(s,c),f=i(u+a.id+".json",l),m=i(u+a.id+"_history.json",[]);return o.push(p),o.push(f),o.push(m),e.all(o).then(t.resolve,t.reject),t.promise},save:function(t){var r=e.defer(),n=[],c=o(s,[]);c.map(function(e,r){e.id===t.id&&(c[r].title=t.title,c[r].timestamp=+new Date)});var t=i(u+t.id+".json",t),a=i(s,c);return n.push(t),n.push(a),e.all(n).then(r.resolve,r.reject),r.promise},remove:function(t){var r=e.defer(),n=[],o=JSON.parse(fs.readFileSync(s,"utf8"));o.map(function(e,r){e.id===t&&o.splice(r,1)}),this.cleanImageFiles(t);var c=a(u+t+".json"),l=a(u+t+"_history.json"),p=i(s,o);return n.push(c),n.push(l),n.push(p),e.all(n).then(r.resolve,r.reject),r.promise},clearHistory:function(t){var r=e.defer(),n=[],c=o(s,[]);t.currentBatch=null,t.currentReference=null,t.batchHistory={},c.map(function(e,r){e.id===t.id&&(c[r].totals.success=0,c[r].totals.warning=0,c[r].totals.error=0,c[r].totals.views=0)}),this.cleanImageFiles(t.id);var a=i(u+t.id+"_history.json",[]),l=i(u+t.id+".json",t),p=i(s,c);return n.push(a),n.push(l),n.push(p),e.all(n).then(r.resolve,r.reject),r.promise},sync:function(t){if(t){for(var r=this,n=e.defer(),o=this.getById(t),c=this.getTypeById(t,"history"),i=[],a=0;a<c.length;a++){var s=c[a];if(s.source&&-1===s.source.search("amazon")){var u=s.source,l=s.type,p=__dirname+"/screens/"+l+"/"+o.id+"/"+u;i.push({key:l+"/"+u,path:p})}}return AWS.init().upload(i,o.id).then(function(e){r.cleanAfterSync(o,e).then(n.resolve,n.reject)},function(e){n.reject(e)}),n.promise}},cleanAfterSync:function(t,r){var n=e.defer(),c=o(u+t.id+"_history.json",[]),s=[],l=[];t.updatedAt=+new Date;for(var p=0;p<r.length;p++){var f=r[p],m=f.split("/"),d=m[m.length-2],h=m[m.length-1];c.map(function(e,n){if(e.source===h&&"compare"===d){var o=__dirname+"/screens/"+d+"/"+t.id+"/"+h,i=a(o),s=a(o.replace(".","_diff."));delete c[n].source,c[n].remoteSource=r[p],l.push(i),l.push(s)}})}var v=__dirname+"/projects/"+t.id+".json",g=v.replace(".json","_history.json"),y=i(v,t),j=i(g,c);l.unshift(y),l.unshift(j),s.push({key:t.id,path:v}),s.push({key:t.id+"_history",path:g});var w=AWS.init().upload(s,t.id);return l.unshift(w),e.all(l).then(n.resolve,n.reject),n.promise},cleanImageFiles:function(e){var t=__dirname+"/screens/BASE/"+e,r=t.replace("BASE","compare"),n=t.replace("BASE","reference");c(r),c(n)}}}]),MUG.factory("timeAgo",function(){function e(e){var t=e.toString().slice(0,13);return 13==t.length?parseInt(t):e}var t={};return t.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},t.inWords=function(e){function r(t,r){var o=angular.isFunction(t)?t(r,e):t,c=n.numbers&&n.numbers[r]||r;return o.replace(/%d/i,c)}var n=t.settings.strings,o=n.prefixAgo,c=n.suffixAgo;t.settings.allowFuture&&0>e&&(o=n.prefixFromNow,c=n.suffixFromNow);var i=Math.abs(e)/1e3,a=i/60,s=a/60,u=s/24,l=u/365,p=45>i&&r(n.seconds,Math.round(i))||90>i&&r(n.minute,1)||45>a&&r(n.minutes,Math.round(a))||90>a&&r(n.hour,1)||24>s&&r(n.hours,Math.round(s))||42>s&&r(n.day,1)||30>u&&r(n.days,Math.round(u))||45>u&&r(n.month,1)||365>u&&r(n.months,Math.round(u/30))||1.5>l&&r(n.year,1)||r(n.years,Math.round(l)),f=void 0===n.wordSeparator?" ":n.wordSeparator;return[o,p,c].join(f).trim()},t.parse=function(t){if(angular.isNumber(t)){t+="";var r=e(t);return parseInt(r,10)}var n=(t||"").trim();return n=n.replace(/\.\d+/,""),n=n.replace(/-/,"/").replace(/-/,"/"),n=n.replace(/T/," ").replace(/Z/," UTC"),n=n.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(n)},t}),MUG.filter("timeAgo",["nowTime","timeAgo",function(e,t){return function(r){var n=t.parse(r),o=e.getTime()-n;return t.inWords(o)}}]);var ipc=require("ipc");MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","Projects",function(e,t,r,n,o){e.currentProjectId="",t.createNewProject=function(){o.createNew().then(function(t){e.$broadcast("SIDEPANEL:NEWPROJECT",t),r.go("projects.settings",{id:t.id})},function(e){console.log("err",e)})},ipc.on("NAVIGATE:TO",function(e){e&&e.location&&(console.log("NAVIGATE:TO",e),r.go(e.location))}),e.SafeApply=function(e,t){e.$$phase||e.$root.$$phase?"undefined"!=typeof t&&t():e.$apply(t)}}]);var fs=require("fs"),AWS=require("./vendor/core/aws");MUG.controller("PreferencesCtrl",["$rootScope","$scope","$state",function(e,t,r){t.awsConfig={bucket:"",accessKeyId:"",secretAccessKey:""},t.awsConfig=AWS.getConfig(),t.save=function(){AWS.setConfig(t.awsConfig)}}]),MUG.controller("ProjectCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){e.project=n.getById(r.id)}]),MUG.controller("ProjectHistoryCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){t.activeFilter="All",t.activeFilterQuery="",t.historyItems=n.getTypeById(r.id,"history"),t.changeFilter=function(e){t.activeFilter=e,t.activeFilterQuery="All"==e?"":e},t.previewItem=function(t){e.$emit("MODAL:OPEN",{type:"preview",item:t,project:e.project})}}]);var ipc=require("ipc");MUG.controller("ProjectRunnerCtrl",["$rootScope","$scope","$timeout","$stateParams","Projects",function(e,t,r,n,o){function c(e){function r(e){if(e.status){var r=0;switch(e.status){case"warning":r=1;break;case"failed":r=2}n[r].items.unshift(e),t.activeData[n[r].type]=t.activeData[n[r].type]+1}}if(!e||e.length<1)return t.hasReference=!1,[];t.activeData={},t.activeData.success=0,t.activeData.warning=0,t.activeData.error=0;var n=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];return e.map(function(e,n){e.batch===t.currentBatch&&r(e)}),t.hasReference=!0,n}function i(){if(null!==e.project.currentBatch){var r=o.getTypeById(e.project.id,"history");t.batchItems=c(r),t.runningType=e.project.currentReference>=e.project.currentBatch?"reference":"compare"}}function a(){var t=o.validate(e.project);return t||e.$broadcast("ALERT:FIRE",{title:"Please finish configuring settings!",dur:5,type:"error",icon:"stop"}),t}function s(){t.hasSettings=a(),t.hasReference=null!==e.project.currentReference,"reference"===t.runningType?t.hasCompare=!1:(t.hasCompare=null!==e.project.currentBatch&&0!==e.project.currentBatch,t.hasCompare=e.project.currentReference<=e.project.currentBatch)}function u(){e.project=o.getById(e.project.id),t.currentBatch=e.project.currentBatch,t.activeData=e.project&&e.project.batchHistory?e.project.batchHistory[t.currentBatch]:null,e.$emit("SIDEPANEL:UPDATE",e.project)}function l(){void 0===typeof e.project.meta.autoSyncAws||e.project.meta.autoSyncAws!==!0||h||(e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:3,type:"info"}),h=!0,o.sync(e.project.id).then(function(t){h=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:3,type:"success",icon:"check"})},function(t){console.log("syncNow err",t),h=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})}))}function p(r){if(r&&r.msg&&r.percent){t.progress.percent=parseInt(r.percent,10),t.progress.title=r.msg?r.msg:t.progress.title;var n=r;n.project=e.project,e.$emit("PRELOADER:UPDATE",n)}}function f(){r(function(){u(),i(),s(),l(),t.processing=!1},3)}function m(e){console.log("RUNNER:FAILED reason",e),t.processing=!1}var d=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];t.processing=!1,t.hasSettings=!1,t.hasReference=!1,t.hasCompare=!1,t.runningType="reference",t.batchItems=d,t.activeData={},t.currentBatch=e.project.currentBatch||0,t.progress={percent:0,title:"Starting"};var h=!1;u(),i(),s(),t.previewBatch=function(t){e.$emit("MODAL:OPEN",{type:"batch",items:t,project:e.project})},t.newCompare=function(){var r=a();r&&(t.runningType="compare",t.processing=!0,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"compare",projectId:e.project.id}))},t.newReference=function(){var r=a();r&&(t.processing=!0,t.runningType="reference",t.hasCompare=!1,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"reference",projectId:e.project.id}))},ipc.on("RUNNER:PROGRESS",p),ipc.on("RUNNER:COMPLETE",f),ipc.on("RUNNER:FAILED",m)}]);var fs=require("fs");MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){function o(t,r){e.project[t].push(r)}function c(){var e=n.get("/config/aws.json",{});return e&&e.bucket&&e.accessKeyId&&e.secretAccessKey?!0:!1}var i;t.syncing=!1,t.selectorTypes=["container","hide","remove"],t.hasChanges=!1,t.hasAwsSettings=!1,t.master={},angular.copy(e.project,t.master),t.hasAwsSettings=c(),t.$watch("project",function(e,r){e!=r&&(t.hasChanges=!0,t.save())},!0),t.save=function(){i&&window.clearTimeout(i),i=setTimeout(function(){n.save(e.project).then(function(r){e.$emit("SIDEPANEL:UPDATE",r),angular.copy(e.project,t.master),t.hasChanges=!1},function(e){console.log("err",e)})},200)},t.syncNow=function(){t.syncing=!0,e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:5,type:"info"}),n.sync(e.project.id).then(function(r){t.syncing=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:5,type:"success",icon:"check"})},function(r){t.syncing=!1,console.log("syncNow err",r),e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})})},t.cancelSave=function(){var r=confirm("Are you sure you want to clear all your changes?");r&&(angular.copy(t.master,e.project),t.hasChanges=!1)},t.deleteProject=function(){var o=confirm("Are you sure you want to delete this project?");if(o){var c=e.project.id;n.remove(c).then(function(n){e.$emit("SIDEPANEL:REMOVE",{id:c}),r.go("main"),e.project={},t.hasChanges=!1,e.$broadcast("ALERT:FIRE",{title:"Project Removed Successfully",dur:5,type:"success"})},function(n){console.log("err",n),e.$emit("SIDEPANEL:REMOVE",{id:c}),r.go("main"),e.project={},t.hasChanges=!1})}},t.addViewport=function(){var e={active:!0,name:null,width:null,height:null};o("viewports",e)},t.addSelector=function(){var e={active:!0,type:"container",query:null};o("selectors",e)},t.addCookie=function(){var e={active:!0,name:null,value:null,path:null};o("cookies",e)},t.activateType=function(r,n){e.project[r][n].active=e.project[r][n].active===!0||"true"===e.project[r][n].active?!1:!0,t.save()},t.deleteTypeItem=function(r,n){e.project[r].splice(n,1),t.save()},t.clearHistory=function(){n.clearHistory(e.project).then(function(t){e.$broadcast("ALERT:FIRE",{title:"Cleared All History!",dur:5,type:"success",icon:"history"})},function(t){e.$broadcast("ALERT:FIRE",{title:"Error Occurred! Please try again.",dur:5,type:"error",icon:"stop"})})}}]);var fs=require("fs");MUG.controller("SidePanelCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){t.projects=[],t.projects=n.getAll(),e.$on("SIDEPANEL:NEWPROJECT",function(e,r){r&&r.id&&t.projects.unshift(r)}),e.$on("SIDEPANEL:UPDATE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&(t.projects[n].title=r.title,t.projects[n].timestamp=r.timestamp,r.batchHistory[r.currentBatch]&&(r.batchHistory[r.currentBatch].success&&(t.projects[n].totals.success=r.batchHistory[r.currentBatch].success),r.batchHistory[r.currentBatch].warning&&(t.projects[n].totals.warning=r.batchHistory[r.currentBatch].warning),r.batchHistory[r.currentBatch].error&&(t.projects[n].totals.error=r.batchHistory[r.currentBatch].error),r.batchHistory[r.currentBatch].views&&(t.projects[n].totals.views=r.batchHistory[r.currentBatch].views)))})}),e.$on("SIDEPANEL:REMOVE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&t.projects.splice(n,1)})}),t.goToProject=function(t){var n="runner";r.go("projects."+n,{id:t}),e.currentProjectId=t}}]),MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{},Compare:{errorColor:{red:255,green:0,blue:255},errorType:"flat",transparency:1,largeImageThreshold:0}}),MUG.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("main",{url:"/",templateUrl:"main.html"}).state("preferences",{url:"/preferences",templateUrl:"preferences.html",controller:"PreferencesCtrl"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html",controller:"ProjectSettingsCtrl"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html",controller:"ProjectRunnerCtrl"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html",controller:"ProjectHistoryCtrl"}),t.otherwise("/")}]),MUG.run(["$rootScope","$http",function(e,t){var r=t.defaults.headers.common;r["Content-Type"]="application/json",e.$on("$stateChangeError",function(e,t,r,n,o,c){console.log("$stateChangeError",c)})}]);
//# sourceMappingURL=data:application/json;base64,