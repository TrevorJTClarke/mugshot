var MUG=angular.module("mugshot",[]);MUG.controller("MainCtrl",["$rootScope","$scope","Config","$http",function(n,e,r,t){}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(n,e,r){var t=parseInt(r.fadeIn)||10;e.addClass("fade-in"),setTimeout(function(){e.css("opacity","1")},t)}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(n,e,r){return{scope:{},link:function(t,i,o,a){function s(n){var i=+new Date,o=n.msg,a=n.icon?n.icon:v,s=l.replace("BODY",o).replace("ICON",a),p=r(s)(t);p[0].id=i,g=i,m.append(p);var h=m.find("#"+i);c(h,n.type),n.callback&&h.find(".msg-action").addClass("show"),e(function(){h.addClass("add")},20),d=e(function(){u(h)},f)}function u(n){if(!n&&g)n=m.find("#"+g);else if(!n)return;n.removeClass("add"),n.addClass("remove"),e(function(){angular.element(n).remove()},300)}function c(n,e){n.removeClass("msg-info"),n.removeClass("msg-warn"),e&&n.addClass("msg-"+e)}var d,l='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',m=angular.element(i),f=5e3,g="",v="info";t.body="",t.callback=null,t.icon=v,t.action=function(){var n=m.find("#"+this.id);t.callback(),u(n)},n.$on("MSGCENTER:FIRE",function(n,e){e.msg&&(window.clearTimeout(d),u(),e.dur&&(f=1e3*e.dur),e.callback&&(t.callback=e.callback),s(e))})}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(n,e){return{restrict:"EA",link:function(r,t,i){var o;i.$observe("fromTime",function(e){o=n.parse(e)}),r.$watch(function(){return e.getTime()-o},function(e){angular.element(t).text(n.inWords(e))})}}}]),MUG.factory("nowTime",["$timeout",function(n){var e=Date.now(),r=function(){n(function(){e=Date.now(),r()},1e3)};return r(),{getTime:function(){return e}}}]),MUG.factory("timeAgo",function(){function n(n){var e=n.toString().slice(0,13);return 13==e.length?parseInt(e):n}var e={};return e.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},e.inWords=function(n){function r(e,r){var i=angular.isFunction(e)?e(r,n):e,o=t.numbers&&t.numbers[r]||r;return i.replace(/%d/i,o)}var t=e.settings.strings,i=t.prefixAgo,o=t.suffixAgo;e.settings.allowFuture&&0>n&&(i=t.prefixFromNow,o=t.suffixFromNow);var a=Math.abs(n)/1e3,s=a/60,u=s/60,c=u/24,d=c/365,l=45>a&&r(t.seconds,Math.round(a))||90>a&&r(t.minute,1)||45>s&&r(t.minutes,Math.round(s))||90>s&&r(t.hour,1)||24>u&&r(t.hours,Math.round(u))||42>u&&r(t.day,1)||30>c&&r(t.days,Math.round(c))||45>c&&r(t.month,1)||365>c&&r(t.months,Math.round(c/30))||1.5>d&&r(t.year,1)||r(t.years,Math.round(d)),m=void 0===t.wordSeparator?" ":t.wordSeparator;return[i,l,o].join(m).trim()},e.parse=function(e){if(angular.isNumber(e)){e+="";var r=n(e);return parseInt(r,10)}var t=(e||"").trim();return t=t.replace(/\.\d+/,""),t=t.replace(/-/,"/").replace(/-/,"/"),t=t.replace(/T/," ").replace(/Z/," UTC"),t=t.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(t)},e}),MUG.filter("timeAgo",["nowTime","timeAgo",function(n,e){return function(r){var t=e.parse(r),i=n.getTime()-t;return e.inWords(i)}}]);
//# sourceMappingURL=data:application/json;base64,