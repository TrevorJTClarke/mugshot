var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.directive("alert",["$rootScope","$timeout","$compile","$templateCache",function(e,t,r,n){return{restrict:"E",replace:!0,template:'<div class="alert-parent"></div>',scope:{},link:function(o,c,i,a){function s(n){var o=+new Date,c=(n.title,n.icon?n.icon:null,e.$new(!0));c.alert={},c.alert.id=o,c.alert.icon=n.icon?n.icon:null,c.alert.type=n.type?n.type:"info",c.alert.title=n.title,c.alert.action=n.callback?function(){this.id;n.callback(),u(this)}:null;var i=r(p)(c);i[0].id=o,d=o,f.append(i),i.addClass(h),t(function(){i.addClass(v)},20),l=t(function(){u(i)},m)}function u(e){if(!e&&d)e=angular.element(document.getElementById(d));else{if(!e)return;e&&(e=angular.element(e))}e.removeClass(v),t(function(){e.remove()},300)}var l,p=n.get("alert.html"),f=angular.element(c),m=5e3,d="",h="alert-active",v="alert-visible";e.$on("ALERT:FIRE",function(e,t){t.title&&(window.clearTimeout(l),u(),t.dur&&(m=1e3*t.dur),s(t))})}}}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(e,t,r){var n=parseInt(r.fadeIn)||10;t.addClass("fade-in"),setTimeout(function(){t.css("opacity","1")},n)}}}]),MUG.directive("modal",["$timeout","$compile","$rootScope",function(e,t,r){return{restrict:"E",replace:!0,templateUrl:"modal.html",scope:{},link:function(e,t,n){function o(t){var n=t.remoteSource?t.remoteSource:t.source;e.compareItem.a=t.remoteSource?n:"screens/reference/"+r.project.id+"/"+n.replace(r.project.currentBatch+".png",r.project.currentReference+".png"),e.compareItem.b=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n,e.compareItem.c=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n.replace(".png","_diff.png")}var c="modal-open",i="modal-visible";e.project=angular.copy(r.project),e.activeOption="sides",e.opacityRange={},e.currentIndex=0,e.activeItem={},e.compareItem={a:"",b:"",c:""},e.viewer={items:[]},e.opacityRange={amount:.8,inverse:.2,percent:"80%"},e.$watch("opacityRange.amount",function(t,r){t!==r&&(e.opacityRange.inverse=(1-t).toFixed(2),e.opacityRange.percent=Math.round(100*t)+"%")}),e.optionMode=function(t){e.activeOption=t},r.$on("MODAL:CLOSE",function(t,r){e.close()}),r.$on("MODAL:OPEN",function(n,a){a&&a.type&&(e.currentIndex=0,e.project=angular.copy(r.project),"preview"===a.type&&(e.activeItem=a.item,e.viewer=a.project||{},e.viewer.items=null,e.compareItem.a=e.activeItem.remoteSource?e.activeItem.remoteSource:"screens/"+e.activeItem.type+"/"+r.project.id+"/"+e.activeItem.source),"batch"===a.type&&a.items.length>0&&(e.activeItem=a.items[e.currentIndex],e.viewer=a.project||{},e.viewer.items=a.items,o(e.activeItem)),t.addClass(c),setTimeout(function(){t.addClass(i)},30))}),e.close=function(){t.removeClass(i),setTimeout(function(){t.removeClass(c)},230)},e.modalActionNav=function(t){if(!(e.viewer.items.length<1)){var r,n=e.viewer.items.length-1;r="right"===t?e.currentIndex===n?0:e.currentIndex+1:0===e.currentIndex?n:e.currentIndex-1,e.activeItem=e.viewer.items[r],e.currentIndex=r,o(e.activeItem)}},e.goToIndex=function(t){e.currentIndex!==t&&(e.activeItem=e.viewer.items[t],e.currentIndex=t,o(e.activeItem))}}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(e,t,r){return{scope:{},link:function(n,o,c,i){function a(e){var o=+new Date,c=e.msg,i=e.icon?e.icon:h,a=p.replace("BODY",c).replace("ICON",i),v=r(a)(n);v[0].id=o,d=o,f.append(v);var g=f.find("#"+o);u(g,e.type),e.callback&&g.find(".msg-action").addClass("show"),t(function(){g.addClass("add")},20),l=t(function(){s(g)},m)}function s(e){if(!e&&d)e=f.find("#"+d);else if(!e)return;e.removeClass("add"),e.addClass("remove"),t(function(){angular.element(e).remove()},300)}function u(e,t){e.removeClass("msg-info"),e.removeClass("msg-warn"),t&&e.addClass("msg-"+t)}var l,p='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',f=angular.element(o),m=5e3,d="",h="info";n.body="",n.callback=null,n.icon=h,n.action=function(){var e=f.find("#"+this.id);n.callback(),s(e)},e.$on("MSGCENTER:FIRE",function(e,t){t.msg&&(window.clearTimeout(l),s(),t.dur&&(m=1e3*t.dur),t.callback&&(n.callback=t.callback),a(t))})}}}]);var P=require("./vendor/core/preloader");MUG.directive("preloader",["$rootScope","$timeout",function(e,t){function r(e){var t=0,r=0,o=0,c=12;if(e.selectors&&e.selectors.length>0)for(var i=0;i<e.selectors.length;i++)e.selectors[i]&&"container"===e.selectors[i].type&&(o+=1);e.viewports&&e.viewports.length>0&&(r=e.viewports.length),e.meta&&e.meta.delay&&(t=parseInt(e.meta.delay,10)),n=c*r*o+30}var n=30;return{replace:!0,restrict:"E",scope:{},template:'<div class="preloader"></div>',link:function(o,c,i,a){function s(e,t){if(t&&t.msg){if(t.project&&r(t.project),!h)return h=!0,void(f=setTimeout(function(){h=!1},10*n));m=t.msg;var o;switch(m){case"Opening Browser Session":o=0;break;case"Capturing Screens":o=1}m!==d&&l&&l.animate&&l.animate(o,n,function(){d=m})}}function u(){l.resetBrowser()}var l,p,f,m,d,h=!1;t(function(){l=new P.Browser,l.init(),p=document.querySelector(".preloader"),p.appendChild(l.instance),l.drawBrowser()},30),e.$on("PRELOADER:UPDATE",s),e.$on("PRELOADER:OFF",u)}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(e,t){return{restrict:"EA",link:function(r,n,o){var c;o.$observe("fromTime",function(t){c=e.parse(t)}),r.$watch(function(){return t.getTime()-c},function(t){angular.element(n).text(e.inWords(t))})}}}]);var fs=require("fs"),async=require("async");MUG.factory("Compare",["$q","Config",function(e,t){function r(e,t){fs.readFile(o+e,"base64",t)}function n(n,o){var i=e.defer(),a={};return resemble.outputSettings(t.Compare),async.map([n,o],r,function(e,t){var r=c+t[0],n=c+t[1];e&&i.reject(e),resemble(r).compareTo(n).ignoreColors().onComplete(function(e){a.report=e,a.src=e.getImageDataUrl(),i.resolve(a)})}),i.promise}var o=__dirname+"/",c="data:image/png;base64,",i=["passed","warning","failed"];return{runSingle:n,getStatus:function(e){var t=parseFloat(e.misMatchPercentage);return.1>t?e.isSameDimensions===!1?i[1]:i[0]:t>.1&&2>t?i[1]:i[2]}}}]),MUG.factory("nowTime",["$timeout",function(e){var t=Date.now(),r=function(){e(function(){t=Date.now(),r()},1e3)};return r(),{getTime:function(){return t}}}]);var fs=require("fs"),path=require("path"),AWS=require("./vendor/core/aws");MUG.factory("Projects",["$q",function(e){function t(e){return"number"==typeof e&&e===parseInt(e,10)&&(e=Array(e+1).join("x")),e.replace(/x/g,function(){var e=Math.round(61*Math.random())+48;return e=e>57?e+7>90?e+13:e+7:e,String.fromCharCode(e)})}function r(e){e=e||0;var r=t(12);return{id:r,title:"Project "+(parseInt(e,10)+1),timestamp:+new Date,totals:{success:null,warning:null,error:null,views:0}}}function n(e){t(12);return{batchHistory:{},currentBatch:null,currentReference:null,id:e.id,title:e.title,timestamp:e.timestamp,viewports:[],selectors:[],cookies:[],meta:{url:null,readyEvent:null,delay:null,misMatchThreshold:null}}}function o(e,t){var r;try{r=fs.readFileSync(e,"utf8")}catch(n){if("ENOENT"===n.code)return t||{};throw n}return JSON.parse(r)}function c(e){try{var t=fs.readdirSync(e)}catch(r){return}if(t.length>0)for(var n=0;n<t.length;n++){var o=path.join(e,t[n]);fs.statSync(o).isFile()?fs.unlinkSync(o):rmDir(o)}}function i(t,r){var n=e.defer();return fs.writeFile(t,JSON.stringify(r),function(e){return e?void n.reject(e):void n.resolve()}),n.promise}function a(t){var r=e.defer();return fs.unlink(t,function(e){return e?void r.reject(e):void r.resolve()}),r.promise}var s=__dirname+"/projects.json",u=__dirname+"/projects/";return{get:function(e,t){return o(__dirname+e,t)},getAll:function(){return o(s,[])},getById:function(e){return o(u+e+".json")},getTypeById:function(e,t){var r=t?"_"+t:"";return o(u+e+r+".json",[])},validate:function(e){var t=e.cookies,r=e.viewports,n=e.selectors,o=e.title,c=e.meta.url,i=!0;return!r||!n||!o||!c||r.length<1||n.length<1?!1:(r&&r.map(function(e,t){e.width&&e.height&&e.name||(i=!1)}),n&&n.map(function(e,t){e.query&&e.type||(i=!1)}),t&&t.map(function(e,t){e.name&&e.path&&e.value||(i=!1)}),i)},createNew:function(){var t=e.defer(),o=[],c=JSON.parse(fs.readFileSync(s,"utf8")),a=r(c.length),l=n(a);c.unshift(a);var p=i(s,c),f=i(u+a.id+".json",l),m=i(u+a.id+"_history.json",[]);return o.push(p),o.push(f),o.push(m),e.all(o).then(function(){t.resolve(a)},t.reject),t.promise},save:function(t){var r=e.defer(),n=[],c=o(s,[]);c.map(function(e,r){e.id===t.id&&(c[r].title=t.title,c[r].timestamp=+new Date)});var a=i(u+t.id+".json",t),l=i(s,c);return n.push(a),n.push(l),e.all(n).then(function(){r.resolve(t)},r.reject),r.promise},remove:function(t){var r=e.defer(),n=[],o=JSON.parse(fs.readFileSync(s,"utf8"));o.map(function(e,r){e.id===t&&o.splice(r,1)}),this.cleanImageFiles(t);var c=a(u+t+".json"),l=a(u+t+"_history.json"),p=i(s,o);return n.push(c),n.push(l),n.push(p),e.all(n).then(r.resolve,r.reject),r.promise},clearHistory:function(t){var r=e.defer(),n=[],c=o(s,[]);t.currentBatch=null,t.currentReference=null,t.batchHistory={},c.map(function(e,r){e.id===t.id&&(c[r].totals.success=0,c[r].totals.warning=0,c[r].totals.error=0,c[r].totals.views=0)}),this.cleanImageFiles(t.id);var a=i(u+t.id+"_history.json",[]),l=i(u+t.id+".json",t),p=i(s,c);return n.push(a),n.push(l),n.push(p),e.all(n).then(r.resolve,r.reject),r.promise},sync:function(t){if(t){for(var r=this,n=e.defer(),o=this.getById(t),c=this.getTypeById(t,"history"),i=[],a=0;a<c.length;a++){var s=c[a];if(s.source&&-1===s.source.search("amazon")){var u=s.source,l=s.type,p=__dirname+"/screens/"+l+"/"+o.id+"/"+u;i.push({key:l+"/"+u,path:p})}}return AWS.init().upload(i,o.id).then(function(e){r.cleanAfterSync(o,e).then(n.resolve,n.reject)},function(e){n.reject(e)}),n.promise}},cleanAfterSync:function(t,r){var n=e.defer(),c=o(u+t.id+"_history.json",[]),s=[],l=[];t.updatedAt=+new Date;for(var p=0;p<r.length;p++){var f=r[p],m=f.split("/"),d=m[m.length-2],h=m[m.length-1];c.map(function(e,n){if(e.source===h&&"compare"===d){var o=__dirname+"/screens/"+d+"/"+t.id+"/"+h,i=a(o),s=a(o.replace(".","_diff."));delete c[n].source,c[n].remoteSource=r[p],l.push(i),l.push(s)}})}var v=__dirname+"/projects/"+t.id+".json",g=v.replace(".json","_history.json"),y=i(v,t),j=i(g,c);l.unshift(y),l.unshift(j),s.push({key:t.id,path:v}),s.push({key:t.id+"_history",path:g});var w=AWS.init().upload(s,t.id);return l.unshift(w),e.all(l).then(n.resolve,n.reject),n.promise},cleanImageFiles:function(e){var t=__dirname+"/screens/BASE/"+e,r=t.replace("BASE","compare"),n=t.replace("BASE","reference");c(r),c(n)}}}]),MUG.factory("timeAgo",function(){function e(e){var t=e.toString().slice(0,13);return 13==t.length?parseInt(t):e}var t={};return t.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},t.inWords=function(e){function r(t,r){var o=angular.isFunction(t)?t(r,e):t,c=n.numbers&&n.numbers[r]||r;return o.replace(/%d/i,c)}var n=t.settings.strings,o=n.prefixAgo,c=n.suffixAgo;t.settings.allowFuture&&0>e&&(o=n.prefixFromNow,c=n.suffixFromNow);var i=Math.abs(e)/1e3,a=i/60,s=a/60,u=s/24,l=u/365,p=45>i&&r(n.seconds,Math.round(i))||90>i&&r(n.minute,1)||45>a&&r(n.minutes,Math.round(a))||90>a&&r(n.hour,1)||24>s&&r(n.hours,Math.round(s))||42>s&&r(n.day,1)||30>u&&r(n.days,Math.round(u))||45>u&&r(n.month,1)||365>u&&r(n.months,Math.round(u/30))||1.5>l&&r(n.year,1)||r(n.years,Math.round(l)),f=void 0===n.wordSeparator?" ":n.wordSeparator;return[o,p,c].join(f).trim()},t.parse=function(t){if(angular.isNumber(t)){t+="";var r=e(t);return parseInt(r,10)}var n=(t||"").trim();return n=n.replace(/\.\d+/,""),n=n.replace(/-/,"/").replace(/-/,"/"),n=n.replace(/T/," ").replace(/Z/," UTC"),n=n.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(n)},t}),MUG.filter("timeAgo",["nowTime","timeAgo",function(e,t){return function(r){var n=t.parse(r),o=e.getTime()-n;return t.inWords(o)}}]);var ipc=require("ipc");MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","Projects",function(e,t,r,n,o){e.currentProjectId="",t.createNewProject=function(){o.createNew().then(function(t){e.$broadcast("SIDEPANEL:NEWPROJECT",t),r.go("projects.settings",{id:t.id})},function(e){console.log("err",e)})},ipc.on("NAVIGATE:TO",function(e){e&&e.location&&(console.log("NAVIGATE:TO",e),r.go(e.location))}),e.SafeApply=function(e,t){e.$$phase||e.$root.$$phase?"undefined"!=typeof t&&t():e.$apply(t)}}]);var fs=require("fs"),AWS=require("./vendor/core/aws");MUG.controller("PreferencesCtrl",["$rootScope","$scope","$state",function(e,t,r){t.awsConfig={bucket:"",accessKeyId:"",secretAccessKey:""},t.awsConfig=AWS.getConfig(),t.save=function(){AWS.setConfig(t.awsConfig)}}]),MUG.controller("ProjectCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){e.project=n.getById(r.id)}]),MUG.controller("ProjectHistoryCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){t.activeFilter="All",t.activeFilterQuery="",t.historyItems=n.getTypeById(r.id,"history"),t.changeFilter=function(e){t.activeFilter=e,t.activeFilterQuery="All"==e?"":e},t.previewItem=function(t){e.$emit("MODAL:OPEN",{type:"preview",item:t,project:e.project})}}]);var ipc=require("ipc");MUG.controller("ProjectRunnerCtrl",["$rootScope","$scope","$timeout","$stateParams","Projects",function(e,t,r,n,o){function c(e){function r(e){if(e.status){var r=0;switch(e.status){case"warning":r=1;break;case"failed":r=2}n[r].items.unshift(e),t.activeData[n[r].type]=t.activeData[n[r].type]+1}}if(!e||e.length<1)return t.hasReference=!1,[];t.activeData={},t.activeData.success=0,t.activeData.warning=0,t.activeData.error=0;var n=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];return e.map(function(e,n){e.batch===t.currentBatch&&r(e)}),t.hasReference=!0,n}function i(){if(null!==e.project.currentBatch){var r=o.getTypeById(e.project.id,"history");t.batchItems=c(r),t.runningType=e.project.currentReference>=e.project.currentBatch?"reference":"compare"}}function a(){var t=o.validate(e.project);return t||e.$broadcast("ALERT:FIRE",{title:"Please finish configuring settings!",dur:5,type:"error",icon:"stop"}),t}function s(){t.hasSettings=a(),t.hasReference=null!==e.project.currentReference,"reference"===t.runningType?t.hasCompare=!1:(t.hasCompare=null!==e.project.currentBatch&&0!==e.project.currentBatch,t.hasCompare=e.project.currentReference<=e.project.currentBatch)}function u(){e.project=o.getById(e.project.id),t.currentBatch=e.project.currentBatch,t.activeData=e.project&&e.project.batchHistory?e.project.batchHistory[t.currentBatch]:null,e.$emit("SIDEPANEL:UPDATE",e.project)}function l(){void 0===typeof e.project.meta.autoSyncAws||e.project.meta.autoSyncAws!==!0||h||(e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:3,type:"info"}),h=!0,o.sync(e.project.id).then(function(t){h=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:3,type:"success",icon:"check"})},function(t){console.log("syncNow err",t),h=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})}))}function p(r){if(r&&r.msg&&r.percent){t.progress.percent=parseInt(r.percent,10),t.progress.title=r.msg?r.msg:t.progress.title;var n=r;n.project=e.project,e.$emit("PRELOADER:UPDATE",n)}}function f(){r(function(){u(),i(),s(),l(),t.processing=!1},3)}function m(e){console.log("RUNNER:FAILED reason",e),t.processing=!1}var d=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];t.processing=!1,t.hasSettings=!1,t.hasReference=!1,t.hasCompare=!1,t.runningType="reference",t.batchItems=d,t.activeData={},t.currentBatch=e.project.currentBatch||0,t.progress={percent:0,title:"Starting"};var h=!1;u(),i(),s(),t.previewBatch=function(t){e.$emit("MODAL:OPEN",{type:"batch",items:t,project:e.project})},t.newCompare=function(){var r=a();r&&(t.runningType="compare",t.processing=!0,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"compare",projectId:e.project.id}))},t.newReference=function(){var r=a();r&&(t.processing=!0,t.runningType="reference",t.hasCompare=!1,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"reference",projectId:e.project.id}))},ipc.on("RUNNER:PROGRESS",p),ipc.on("RUNNER:COMPLETE",f),ipc.on("RUNNER:FAILED",m)}]);var fs=require("fs");MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){function o(t,r){e.project[t].push(r)}function c(){var e=n.get("/config/aws.json",{});return e&&e.bucket&&e.accessKeyId&&e.secretAccessKey?!0:!1}var i;t.syncing=!1,t.selectorTypes=["container","hide","remove"],t.hasChanges=!1,t.hasAwsSettings=!1,t.master={},angular.copy(e.project,t.master),t.hasAwsSettings=c(),t.$watch("project",function(e,r){e!=r&&(t.hasChanges=!0,t.save())},!0),t.save=function(){i&&window.clearTimeout(i),i=setTimeout(function(){n.save(e.project).then(function(r){e.$emit("SIDEPANEL:UPDATE",r),angular.copy(e.project,t.master),t.hasChanges=!1},function(e){console.log("err",e)})},200)},t.syncNow=function(){t.syncing=!0,e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:5,type:"info"}),n.sync(e.project.id).then(function(r){t.syncing=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:5,type:"success",icon:"check"})},function(r){t.syncing=!1,console.log("syncNow err",r),e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})})},t.cancelSave=function(){var r=confirm("Are you sure you want to clear all your changes?");r&&(angular.copy(t.master,e.project),t.hasChanges=!1)},t.deleteProject=function(){var o=confirm("Are you sure you want to delete this project?");if(o){var c=e.project.id;n.remove(c).then(function(n){e.$emit("SIDEPANEL:REMOVE",{id:c}),r.go("main"),e.project={},t.hasChanges=!1,e.$broadcast("ALERT:FIRE",{title:"Project Removed Successfully",dur:5,type:"success"})},function(n){console.log("err",n),e.$emit("SIDEPANEL:REMOVE",{id:c}),r.go("main"),e.project={},t.hasChanges=!1})}},t.addViewport=function(){var e={active:!0,name:null,width:null,height:null};o("viewports",e)},t.addSelector=function(){var e={active:!0,type:"container",query:null};o("selectors",e)},t.addCookie=function(){var e={active:!0,name:null,value:null,path:null};o("cookies",e)},t.activateType=function(r,n){e.project[r][n].active=e.project[r][n].active===!0||"true"===e.project[r][n].active?!1:!0,t.save()},t.deleteTypeItem=function(r,n){e.project[r].splice(n,1),t.save()},t.clearHistory=function(){n.clearHistory(e.project).then(function(t){e.$broadcast("ALERT:FIRE",{title:"Cleared All History!",dur:5,type:"success",icon:"history"})},function(t){e.$broadcast("ALERT:FIRE",{title:"Error Occurred! Please try again.",dur:5,type:"error",icon:"stop"})})}}]);var fs=require("fs");MUG.controller("SidePanelCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){t.projects=[],t.projects=n.getAll(),e.$on("SIDEPANEL:NEWPROJECT",function(e,r){r&&r.id&&t.projects.unshift(r)}),e.$on("SIDEPANEL:UPDATE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&(t.projects[n].title=r.title,t.projects[n].timestamp=r.timestamp,r.batchHistory[r.currentBatch]&&(r.batchHistory[r.currentBatch].success&&(t.projects[n].totals.success=r.batchHistory[r.currentBatch].success),r.batchHistory[r.currentBatch].warning&&(t.projects[n].totals.warning=r.batchHistory[r.currentBatch].warning),r.batchHistory[r.currentBatch].error&&(t.projects[n].totals.error=r.batchHistory[r.currentBatch].error),r.batchHistory[r.currentBatch].views&&(t.projects[n].totals.views=r.batchHistory[r.currentBatch].views)))})}),e.$on("SIDEPANEL:REMOVE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&t.projects.splice(n,1)})}),t.goToProject=function(t){var n="runner";r.go("projects."+n,{id:t}),e.currentProjectId=t}}]),MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{},Compare:{errorColor:{red:255,green:0,blue:255},errorType:"flat",transparency:1,largeImageThreshold:0}}),MUG.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("main",{url:"/",templateUrl:"main.html"}).state("preferences",{url:"/preferences",templateUrl:"preferences.html",controller:"PreferencesCtrl"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html",controller:"ProjectSettingsCtrl"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html",controller:"ProjectRunnerCtrl"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html",controller:"ProjectHistoryCtrl"}),t.otherwise("/")}]),MUG.run(["$rootScope","$http",function(e,t){var r=t.defaults.headers.common;r["Content-Type"]="application/json",e.$on("$stateChangeError",function(e,t,r,n,o,c){console.log("$stateChangeError",c)})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFsZXJ0LmpzIiwiZmFkZWluLmpzIiwibW9kYWwuanMiLCJtc2djZW50ZXIuanMiLCJwcmVsb2FkZXIuanMiLCJ0aW1lYWdvLmpzIiwiY29tcGFyZS5qcyIsIm5vd3RpbWUuanMiLCJwcm9qZWN0cy5qcyIsInRpbWUtYWdvLmpzIiwibWFpbmN0cmwuanMiLCJwcmVmZXJlbmNlc2N0cmwuanMiLCJwcm9qZWN0Y3RybC5qcyIsInByb2plY3RoaXN0b3J5Y3RybC5qcyIsInByb2plY3RydW5uZXJjdHJsLmpzIiwicHJvamVjdHNldHRpbmdzY3RybC5qcyIsInNpZGVwYW5lbGN0cmwuanMiLCJjb25maWcuanMiLCJyb3V0ZXMuanMiLCJpbml0LmpzIl0sIm5hbWVzIjpbIk1VRyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJkaXJlY3RpdmUiLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCIkY29tcGlsZSIsIiR0ZW1wbGF0ZUNhY2hlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwidGVtcGxhdGUiLCJzY29wZSIsImxpbmsiLCJlbCIsImF0dHJzIiwiY3RybCIsInNob3dNZXNzYWdlIiwiZGF0YSIsIl9pZCIsIkRhdGUiLCIkdG1wU2NvcGUiLCJ0aXRsZSIsImljb24iLCIkbmV3IiwiYWxlcnQiLCJpZCIsInR5cGUiLCJhY3Rpb24iLCJjYWxsYmFjayIsInRoaXMiLCJjbGVhckVsIiwiYWxlcnRFbCIsImFsZXJ0VGVtcGxhdGUiLCJwcmV2aW91c0lkIiwiX2VsIiwiYXBwZW5kIiwiYWRkQ2xhc3MiLCJhbGVydEFjdGl2ZSIsImFsZXJ0VmlzaWJsZSIsInRpbWVyIiwiZHVyYXRpb24iLCJlbGVtIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsImdldCIsIiRvbiIsImUiLCJ3aW5kb3ciLCJjbGVhclRpbWVvdXQiLCJkdXIiLCJvZmZzZXQiLCJwYXJzZUludCIsImZhZGVJbiIsInNldFRpbWVvdXQiLCJjc3MiLCJ0ZW1wbGF0ZVVybCIsIiRzY29wZSIsIiRlbGVtZW50IiwiJGF0dHIiLCJzZXRBY3RpdmVJdGVtIiwiaW1hZ2VTcmMiLCJyZW1vdGVTb3VyY2UiLCJzb3VyY2UiLCJjb21wYXJlSXRlbSIsImEiLCJwcm9qZWN0IiwiY3VycmVudEJhdGNoIiwiY3VycmVudFJlZmVyZW5jZSIsImIiLCJjIiwibW9kYWxBY3RpdmUiLCJtb2RhbFZpc2libGUiLCJjb3B5IiwiYWN0aXZlT3B0aW9uIiwib3BhY2l0eVJhbmdlIiwiY3VycmVudEluZGV4IiwiYWN0aXZlSXRlbSIsInZpZXdlciIsIml0ZW1zIiwiYW1vdW50IiwiaW52ZXJzZSIsInBlcmNlbnQiLCIkd2F0Y2giLCJudiIsIm92IiwidG9GaXhlZCIsIk1hdGgiLCJyb3VuZCIsIm9wdGlvbk1vZGUiLCJhcmdzIiwiY2xvc2UiLCJpdGVtIiwibGVuZ3RoIiwibW9kYWxBY3Rpb25OYXYiLCJuZXh0SWR4IiwidG90YWwiLCJnb1RvSW5kZXgiLCJpZHgiLCJuZXdCb2R5IiwibXNnIiwibmV3SWNuIiwiZGVmYXVsdEljb24iLCJtc2dUZW1wbGF0ZSIsIm5ld01lc3NhZ2UiLCJtc2dFbCIsImZpbmQiLCJjaGFuZ2VUeXBlIiwiYm9keSIsImFjdGlvbkVsIiwiUCIsInJlcXVpcmUiLCJjYWxjdWxhdGVJbmNyZW1lbnRzIiwiZGVsYXkiLCJ2aWV3cG9ydHMiLCJzZWxlY3RvcnMiLCJpbmNyZW1lbnQiLCJpIiwibWV0YSIsInRvdGFsSW5jcmVtZW50IiwidXBkYXRlUHJlbG9hZGVyIiwiaXNBbmltYXRpbmciLCJwcmV2aW91c1RpdGxlIiwiQiIsImFuaW1hdGUiLCJyZXNldFByZWxvYWRlciIsInJlc2V0QnJvd3NlciIsIkJyb3dzZXIiLCJpbml0IiwicXVlcnlTZWxlY3RvciIsImFwcGVuZENoaWxkIiwiaW5zdGFuY2UiLCJkcmF3QnJvd3NlciIsInRpbWVBZ28iLCJub3dUaW1lIiwiZnJvbVRpbWUiLCIkb2JzZXJ2ZSIsInZhbHVlIiwicGFyc2UiLCJnZXRUaW1lIiwidGV4dCIsImluV29yZHMiLCJmcyIsImFzeW5jIiwiZmFjdG9yeSIsIiRxIiwiQ29uZmlnIiwicmVhZEFzeW5jIiwiZmlsZSIsInJlYWRGaWxlIiwiZmlsZURpclByZWZpeCIsImNvbXBhcmVTaW5nbGUiLCJkZmQiLCJkZWZlciIsIm91dHB1dCIsInJlc2VtYmxlIiwib3V0cHV0U2V0dGluZ3MiLCJDb21wYXJlIiwibWFwIiwiZXJyIiwicmVzdWx0cyIsImFEYXRhIiwiaW1hZ2VQcmVmaXgiLCJiRGF0YSIsInJlamVjdCIsImNvbXBhcmVUbyIsImlnbm9yZUNvbG9ycyIsIm9uQ29tcGxldGUiLCJkaWZmRGF0YSIsInJlcG9ydCIsInNyYyIsImdldEltYWdlRGF0YVVybCIsInJlc29sdmUiLCJwcm9taXNlIiwiX19kaXJuYW1lIiwic3RhdHVzVHlwZXMiLCJydW5TaW5nbGUiLCJnZXRTdGF0dXMiLCJtaXNNYXRjaFZhbHVlIiwicGFyc2VGbG9hdCIsIm1pc01hdGNoUGVyY2VudGFnZSIsImlzU2FtZURpbWVuc2lvbnMiLCJub3ciLCJ1cGRhdGVUaW1lIiwicGF0aCIsIkFXUyIsImNyZWF0ZVVVSUQiLCJzIiwiQXJyYXkiLCJqb2luIiwibiIsInJhbmRvbSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNyZWF0ZUR1bW15UHJvamVjdCIsInByb2plY3RJZCIsInRpbWVzdGFtcCIsInRvdGFscyIsInN1Y2Nlc3MiLCJ3YXJuaW5nIiwiZXJyb3IiLCJ2aWV3cyIsImNyZWF0ZUR1bW15UHJvamVjdEZpbGUiLCJvcHRpb25zIiwiYmF0Y2hIaXN0b3J5IiwiY29va2llcyIsInVybCIsInJlYWR5RXZlbnQiLCJtaXNNYXRjaFRocmVzaG9sZCIsImdldEpzb25GaWxlIiwicmVhZEZpbGVTeW5jIiwiY29kZSIsIkpTT04iLCJyZW1vdmVBbGxJbkRpcmVjdG9yeSIsImRpclBhdGgiLCJmaWxlcyIsInJlYWRkaXJTeW5jIiwiZmlsZVBhdGgiLCJzdGF0U3luYyIsImlzRmlsZSIsInVubGlua1N5bmMiLCJybURpciIsInByb21pc2VXcml0ZSIsIl9xIiwid3JpdGVGaWxlIiwic3RyaW5naWZ5IiwicHJvbWlzZVJlbW92ZSIsIl96IiwidW5saW5rIiwicHJvamVjdHNQYXRoIiwicHJvamVjdEZpbGVzUGF0aCIsImdldEFsbCIsImdldEJ5SWQiLCJnZXRUeXBlQnlJZCIsImFkZGl0aW9uIiwidmFsaWRhdGUiLCJib29sIiwib2JqIiwid2lkdGgiLCJoZWlnaHQiLCJuYW1lIiwicXVlcnkiLCJjcmVhdGVOZXciLCJkZmRkIiwicXVldWVQcm9taXNlcyIsImFsbFByb2plY3RzIiwibmV3UHJvamVjdERhdGEiLCJuZXdQcm9qZWN0RmlsZSIsInVuc2hpZnQiLCJwcm9qZWN0QWxsRGF0YSIsInByb2plY3REYXRhIiwicHJvamVjdEhpc3RvcnlEYXRhIiwicHVzaCIsImFsbCIsInRoZW4iLCJzYXZlIiwicHJvamVjdFRlbXBEYXRhIiwic3BsaWNlIiwiY2xlYW5JbWFnZUZpbGVzIiwiY2xlYXJIaXN0b3J5IiwibWFpblByb2plY3RzIiwic3luYyIsIl90aGlzIiwiZCIsInByb2plY3RGaWxlcyIsInJlYWR5RmlsZXMiLCJ0bXBGaWxlIiwic2VhcmNoIiwia2V5IiwidXBsb2FkIiwicmVzIiwiY2xlYW5BZnRlclN5bmMiLCJuZXdSZWZzIiwiaGlzdG9yeURhdGEiLCJ1cGRhdGVkUmVtb3RlRmlsZXMiLCJ1cGRhdGVkQXQiLCJ0bXBTcmMiLCJ0bXBSZWYiLCJzcGxpdCIsInRtcFR5cGUiLCJ0bXBBbGlhcyIsInJlbVJlZlBhdGgiLCJyZW1SZWYiLCJyZW1SZWZEaWZmIiwicHJvamVjdEZpbGUiLCJwcm9qZWN0SGlzdG9yeUZpbGUiLCJwcm9qZWN0V3JpdGUiLCJwcm9qZWN0SGlzdG9yeVdyaXRlIiwiYXdzVXBsb2FkIiwiYmFzZSIsImNvbXBzIiwicmVmcyIsInRyaW1EaWdpdHMiLCJudW0iLCJtIiwidG9TdHJpbmciLCJzbGljZSIsInNlcnZpY2UiLCJzZXR0aW5ncyIsInJlZnJlc2hNaWxsaXMiLCJhbGxvd0Z1dHVyZSIsInN0cmluZ3MiLCJwcmVmaXhBZ28iLCJwcmVmaXhGcm9tTm93Iiwic3VmZml4QWdvIiwic3VmZml4RnJvbU5vdyIsInNlY29uZHMiLCJtaW51dGUiLCJtaW51dGVzIiwiaG91ciIsImhvdXJzIiwiZGF5IiwiZGF5cyIsIm1vbnRoIiwibW9udGhzIiwieWVhciIsInllYXJzIiwibnVtYmVycyIsImRpc3RhbmNlTWlsbGlzIiwic3Vic3RpdHV0ZSIsInN0cmluZ09yRnVuY3Rpb24iLCJudW1iZXIiLCJzdHJpbmciLCJpc0Z1bmN0aW9uIiwiJGwiLCJwcmVmaXgiLCJzdWZmaXgiLCJhYnMiLCJ3b3JkcyIsInNlcGFyYXRvciIsInVuZGVmaW5lZCIsIndvcmRTZXBhcmF0b3IiLCJ0cmltIiwiaXNvODYwMSIsImlzTnVtYmVyIiwib3JpZ2luYWxUaW1lc3RhbXAiLCJmaWx0ZXIiLCJkaWZmIiwiaXBjIiwiY29udHJvbGxlciIsIiRzdGF0ZSIsIlByb2plY3RzIiwiY3VycmVudFByb2plY3RJZCIsImNyZWF0ZU5ld1Byb2plY3QiLCIkYnJvYWRjYXN0IiwiZ28iLCJjb25zb2xlIiwibG9nIiwib24iLCJsb2NhdGlvbiIsIlNhZmVBcHBseSIsImZuIiwiJCRwaGFzZSIsIiRyb290IiwiJGFwcGx5IiwiYXdzQ29uZmlnIiwiYnVja2V0IiwiYWNjZXNzS2V5SWQiLCJzZWNyZXRBY2Nlc3NLZXkiLCJnZXRDb25maWciLCJzZXRDb25maWciLCIkc3RhdGVQYXJhbXMiLCJhY3RpdmVGaWx0ZXIiLCJhY3RpdmVGaWx0ZXJRdWVyeSIsImhpc3RvcnlJdGVtcyIsImNoYW5nZUZpbHRlciIsInByZXZpZXdJdGVtIiwiJGVtaXQiLCJwcm9jZXNzQmF0Y2giLCJhbGxEYXRhIiwicGxhY2VJdGVtIiwic3RhdHVzIiwidGFyZ2V0IiwiZm9ybWF0dGVkIiwiYWN0aXZlRGF0YSIsImhhc1JlZmVyZW5jZSIsImJhdGNoIiwic2V0dXBDdXJyZW50QmF0Y2giLCJiYXRjaEl0ZW1zIiwicnVubmluZ1R5cGUiLCJ2YWxpZGF0ZVByb2plY3QiLCJpc1ZhbGlkIiwiY2hlY2tTdGF0ZSIsImhhc1NldHRpbmdzIiwiaGFzQ29tcGFyZSIsImdyYWJMYXRlc3REYXRhIiwic3luY1Byb2plY3QiLCJhdXRvU3luY0F3cyIsInN5bmNpbmciLCJydW5uZXJFdmVudHMiLCJwcm9ncmVzcyIsInByZUFyZ3MiLCJydW5uZXJDb21wbGV0ZSIsInByb2Nlc3NpbmciLCJydW5uZXJGYWlsZWQiLCJyZWFzb24iLCJkZWZhdWx0Rm9ybWF0IiwicHJldmlld0JhdGNoIiwibmV3Q29tcGFyZSIsInZhbGlkIiwic2VuZCIsIm5ld1JlZmVyZW5jZSIsImFkZE5ld1R5cGUiLCJjaGVja0F3c1NldHRpbmdzIiwic2F2ZVRpbWVyIiwic2VsZWN0b3JUeXBlcyIsImhhc0NoYW5nZXMiLCJoYXNBd3NTZXR0aW5ncyIsIm1hc3RlciIsIm5WIiwib1YiLCJzeW5jTm93IiwiY2FuY2VsU2F2ZSIsInN1cmUiLCJjb25maXJtIiwiZGVsZXRlUHJvamVjdCIsInByb2plY3RJRCIsImFkZFZpZXdwb3J0IiwibmV3Vmlld3BvcnQiLCJhY3RpdmUiLCJhZGRTZWxlY3RvciIsIm5ld1NlbGVjdG9yIiwiYWRkQ29va2llIiwibmV3Q29va2llIiwiYWN0aXZhdGVUeXBlIiwiZGVsZXRlVHlwZUl0ZW0iLCJwcm9qZWN0cyIsImdvVG9Qcm9qZWN0IiwiY29uc3RhbnQiLCJFTlYiLCJTVEFHRSIsIlBST0QiLCJlcnJvckNvbG9yIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiZXJyb3JUeXBlIiwidHJhbnNwYXJlbmN5IiwibGFyZ2VJbWFnZVRocmVzaG9sZCIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwic3RhdGUiLCJvdGhlcndpc2UiLCJydW4iLCIkaHR0cCIsIiRjb21tb24iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiXSwibWFwcGluZ3Mi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LE1BQUEsb0JBQ0E1TyxJQUFBLFdBQ0F0SixZQUFBLHdCQUNBMlIsV0FBQSx1QkFzQkFzRyxFQUFBRSxVQUFBLFFDckVBN2IsSUFBQThiLEtBQUEsYUFBQSxRQUNBLFNBQUExYixFQUFBMmIsR0FHQSxHQUFBQyxHQUFBRCxFQUFBRSxTQUFBQyxRQUFBQyxNQUNBSCxHQUFBLGdCQUFBLG1CQUVBNWIsRUFBQTRDLElBQUEsb0JBQUEsU0FBQW9aLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE5UCxHQUNBa0osUUFBQUMsSUFBQSxvQkFBQW5KIiwiZmlsZSI6Im11Zy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNVUcgPSBhbmd1bGFyLm1vZHVsZSgnbXVnc2hvdCcsIFsndWkucm91dGVyJywgJ211Z3RlbXBsYXRlcyddKTtcbiIsIi8qKlxuICogYWxlcnRcbiAqIGEgZGlyZWN0aXZlIGZvciBoYW5kbGluZyBhbGwgYWxlcnRzIGFuZCBub3RpY2VzIGZvciBhIHVzZXJcbiAqXG4gKiBVU0U6XG4gKiA8YWxlcnQ+PC9hbGVydD5cbiAqXG4gKiAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiBcIkhleSB0aGVyZSwgSW0gYSBtZXNzYWdlISFcIiwgZHVyOiA1LCB0eXBlOiBcImluZm9cIiwgaWNvbjogXCJpbmZvXCIsIGNhbGxiYWNrOiBmdW5jdGlvbigpe30gfSk7XG4gKlxuICogVFlQRVM6XG4gKiAtIGluZm8sIHN1Y2Nlc3MsIHdhcm5pbmcsIGVycm9yXG4gKlxuICogT1BUSU9OUzpcbiAqIC0gdGl0bGU6IHRoZSBjb250ZW50cyBvZiB0aGUgbWVzc2FnZSwgKFRPRE86IGNhbiBiZSBodG1sIG9yIHNpbXBsZSB0ZXh0KVxuICogLSBjYWxsYmFjazogYSBmdW5jdGlvbiB0byBmaXJlIG9uIGFjdGlvbiB0YWtlbiBvbiBtZXNzYWdlXG4gKiAtIGR1cjogdGhlIHRpbWVvdXQgb2YgdGhlIG1lc3NhZ2UsIGluIHNlY29uZHNcbiAqIC0gdHlwZTogc2VlIGFib3ZlIHR5cGVzXG4gKiAtIGljb246IG5vIGRlZmF1bHQsIHNlZSBodHRwczovL29jdGljb25zLmdpdGh1Yi5jb20vIGZvciBvcHRpb25zXG4gKi9cbk1VRy5kaXJlY3RpdmUoJ2FsZXJ0JyxcblsnJHJvb3RTY29wZScsICckdGltZW91dCcsICckY29tcGlsZScsICckdGVtcGxhdGVDYWNoZScsXG5mdW5jdGlvbigkcm9vdFNjb3BlLCAkdGltZW91dCwgJGNvbXBpbGUsICR0ZW1wbGF0ZUNhY2hlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cImFsZXJ0LXBhcmVudFwiPjwvZGl2PicsXG4gICAgc2NvcGU6IHt9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgIHZhciBhbGVydFRlbXBsYXRlID0gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdhbGVydC5odG1sJyk7XG4gICAgICB2YXIgX2VsID0gYW5ndWxhci5lbGVtZW50KGVsKTtcbiAgICAgIHZhciB0aW1lcjtcbiAgICAgIHZhciBkdXJhdGlvbiA9IDUwMDA7XG4gICAgICB2YXIgcHJldmlvdXNJZCA9ICcnO1xuICAgICAgdmFyIGFsZXJ0QWN0aXZlID0gJ2FsZXJ0LWFjdGl2ZSc7XG4gICAgICB2YXIgYWxlcnRWaXNpYmxlID0gJ2FsZXJ0LXZpc2libGUnO1xuXG4gICAgICBmdW5jdGlvbiBzaG93TWVzc2FnZShkYXRhKSB7XG4gICAgICAgIHZhciBfaWQgPSAoK25ldyBEYXRlKCkpO1xuICAgICAgICB2YXIgbmV3Qm9keSA9IGRhdGEudGl0bGU7XG4gICAgICAgIHZhciBuZXdJY24gPSAoZGF0YS5pY29uKSA/IGRhdGEuaWNvbiA6IG51bGw7XG4gICAgICAgIHZhciAkdG1wU2NvcGUgPSAkcm9vdFNjb3BlLiRuZXcodHJ1ZSk7XG5cbiAgICAgICAgLy8gc2V0dXAgc2ltcGxlIHNjb3BlIGZvciBvbmx5IHRoaXMgYWxlcnQgaXRlbVxuICAgICAgICAkdG1wU2NvcGUuYWxlcnQgPSB7fTtcbiAgICAgICAgJHRtcFNjb3BlLmFsZXJ0LmlkID0gX2lkO1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQuaWNvbiA9IChkYXRhLmljb24pID8gZGF0YS5pY29uIDogbnVsbDtcbiAgICAgICAgJHRtcFNjb3BlLmFsZXJ0LnR5cGUgPSAoZGF0YS50eXBlKSA/IGRhdGEudHlwZSA6ICdpbmZvJztcbiAgICAgICAgJHRtcFNjb3BlLmFsZXJ0LnRpdGxlID0gZGF0YS50aXRsZTtcbiAgICAgICAgJHRtcFNjb3BlLmFsZXJ0LmFjdGlvbiA9ICghZGF0YS5jYWxsYmFjaykgPyBudWxsIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFjdGlvbkVsID0gdGhpcy5pZDtcbiAgICAgICAgICBkYXRhLmNhbGxiYWNrKCk7XG4gICAgICAgICAgY2xlYXJFbCh0aGlzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYWxlcnRFbCA9ICRjb21waWxlKGFsZXJ0VGVtcGxhdGUpKCR0bXBTY29wZSk7XG5cbiAgICAgICAgLy8gc2V0IGEgdW5pcXVlIGlkXG4gICAgICAgIGFsZXJ0RWxbMF0uaWQgPSBfaWQ7XG4gICAgICAgIHByZXZpb3VzSWQgPSBfaWQ7XG5cbiAgICAgICAgLy8gdGhyb3cgaW50byBkb20sIHRoZW4gc2hvdyBpbiB2aWV3LCBzdGFydCB0aW1lclxuICAgICAgICBfZWwuYXBwZW5kKGFsZXJ0RWwpO1xuICAgICAgICBhbGVydEVsLmFkZENsYXNzKGFsZXJ0QWN0aXZlKTtcblxuICAgICAgICAvLyBzaG93XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGFsZXJ0RWwuYWRkQ2xhc3MoYWxlcnRWaXNpYmxlKTtcbiAgICAgICAgfSwgMjApO1xuXG4gICAgICAgIHRpbWVyID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xlYXJFbChhbGVydEVsKTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhckVsKGVsZW0pIHtcbiAgICAgICAgaWYgKCFlbGVtICYmIHByZXZpb3VzSWQpIHtcbiAgICAgICAgICBlbGVtID0gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZXZpb3VzSWQpKTtcbiAgICAgICAgfSBlbHNlIGlmICghZWxlbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtKSB7XG4gICAgICAgICAgZWxlbSA9IGFuZ3VsYXIuZWxlbWVudChlbGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoYWxlcnRWaXNpYmxlKTtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbS5yZW1vdmUoKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kb24oJ0FMRVJUOkZJUkUnLCBmdW5jdGlvbihlLCBkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YS50aXRsZSkgeyByZXR1cm47IH1cblxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgY2xlYXJFbCgpO1xuXG4gICAgICAgIGlmIChkYXRhLmR1cikge1xuICAgICAgICAgIGR1cmF0aW9uID0gZGF0YS5kdXIgKiAxMDAwO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hvd01lc3NhZ2UoZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCIvKipcbiAqIGZhZGVJblxuICogQSBkaXJlY3RpdmUgZm9yIGFuaW1hdGluZyBpbiBlbGVtZW50c1xuICovXG5NVUcuZGlyZWN0aXZlKCdmYWRlSW4nLCBbZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cnMpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChhdHRycy5mYWRlSW4pIHx8IDEwO1xuICAgICAgZWxlbS5hZGRDbGFzcygnZmFkZS1pbicpO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtLmNzcygnb3BhY2l0eScsICcxJyk7XG4gICAgICB9LCBvZmZzZXQpO1xuICAgIH1cbiAgfTtcblxufV0pO1xuIiwiLyoqXG4gKiBNb2RhbFxuICogQnVpbGRzIGEgbW9kYWwgZm9yIGltYWdlIHZpZXdpbmcgYW5kIGNvbXBhcmluZ1xuICpcbiAqIEB1c2FnZVxuICogPG1vZGFsPjwvbW9kYWw+XG4gKi9cbk1VRy5kaXJlY3RpdmUoJ21vZGFsJyxcblsnJHRpbWVvdXQnLCAnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsXG5mdW5jdGlvbigkdGltZW91dCwgJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6ICdtb2RhbC5odG1sJyxcbiAgICBzY29wZToge30sXG4gICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgIHZhciBtb2RhbEFjdGl2ZSA9ICdtb2RhbC1vcGVuJztcbiAgICAgIHZhciBtb2RhbFZpc2libGUgPSAnbW9kYWwtdmlzaWJsZSc7XG5cbiAgICAgICRzY29wZS5wcm9qZWN0ID0gYW5ndWxhci5jb3B5KCRyb290U2NvcGUucHJvamVjdCk7XG4gICAgICAkc2NvcGUuYWN0aXZlT3B0aW9uID0gJ3NpZGVzJztcbiAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UgPSB7fTtcbiAgICAgICRzY29wZS5jdXJyZW50SW5kZXggPSAwO1xuICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSB7fTtcbiAgICAgICRzY29wZS5jb21wYXJlSXRlbSA9IHtcbiAgICAgICAgYTogJycsXG4gICAgICAgIGI6ICcnLFxuICAgICAgICBjOiAnJ1xuICAgICAgfTtcbiAgICAgICRzY29wZS52aWV3ZXIgPSB7XG4gICAgICAgIGl0ZW1zOiBbXVxuICAgICAgfTtcbiAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UgPSB7XG4gICAgICAgIGFtb3VudDogMC44LFxuICAgICAgICBpbnZlcnNlOiAwLjIsXG4gICAgICAgIHBlcmNlbnQ6ICc4MCUnXG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJHdhdGNoKCdvcGFjaXR5UmFuZ2UuYW1vdW50JywgZnVuY3Rpb24obnYsIG92KSB7XG4gICAgICAgIGlmIChudiA9PT0gb3YpIHtyZXR1cm47fVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgb3RoZXIgdmFsdWVzXG4gICAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UuaW52ZXJzZSA9ICgxIC0gbnYpLnRvRml4ZWQoMik7XG4gICAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UucGVyY2VudCA9IE1hdGgucm91bmQobnYgKiAxMDApICsgJyUnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHNldCB0aGUgYWN0aXZlIGl0ZW0gd2l0aCBjb3JyZWN0IHBhdGhzXG4gICAgICBmdW5jdGlvbiBzZXRBY3RpdmVJdGVtKGRhdGEpIHtcbiAgICAgICAgdmFyIGltYWdlU3JjID0gKCFkYXRhLnJlbW90ZVNvdXJjZSkgPyBkYXRhLnNvdXJjZSA6IGRhdGEucmVtb3RlU291cmNlO1xuICAgICAgICAkc2NvcGUuY29tcGFyZUl0ZW0uYSA9ICghZGF0YS5yZW1vdGVTb3VyY2UpID8gJ3NjcmVlbnMvcmVmZXJlbmNlLycgKyAkcm9vdFNjb3BlLnByb2plY3QuaWQgKyAnLycgKyBpbWFnZVNyYy5yZXBsYWNlKCRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2ggKyAnLnBuZycsICRyb290U2NvcGUucHJvamVjdC5jdXJyZW50UmVmZXJlbmNlICsgJy5wbmcnKSA6IGltYWdlU3JjO1xuICAgICAgICAkc2NvcGUuY29tcGFyZUl0ZW0uYiA9ICghZGF0YS5yZW1vdGVTb3VyY2UpID8gJ3NjcmVlbnMvY29tcGFyZS8nICsgJHJvb3RTY29wZS5wcm9qZWN0LmlkICsgJy8nICsgaW1hZ2VTcmMgOiBpbWFnZVNyYztcbiAgICAgICAgJHNjb3BlLmNvbXBhcmVJdGVtLmMgPSAoIWRhdGEucmVtb3RlU291cmNlKSA/ICdzY3JlZW5zL2NvbXBhcmUvJyArICRyb290U2NvcGUucHJvamVjdC5pZCArICcvJyArIGltYWdlU3JjLnJlcGxhY2UoJy5wbmcnLCAnX2RpZmYucG5nJykgOiBpbWFnZVNyYztcbiAgICAgIH1cblxuICAgICAgLy8gQ2hvb3NlIHRoZSB2aWV3ZXIgbGF5b3V0XG4gICAgICAkc2NvcGUub3B0aW9uTW9kZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZU9wdGlvbiA9IHR5cGU7XG4gICAgICB9O1xuXG4gICAgICAkcm9vdFNjb3BlLiRvbignTU9EQUw6Q0xPU0UnLCBmdW5jdGlvbihlLCBhcmdzKSB7XG4gICAgICAgICRzY29wZS5jbG9zZSgpO1xuICAgICAgfSk7XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCdNT0RBTDpPUEVOJywgZnVuY3Rpb24oZSwgYXJncykge1xuICAgICAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MudHlwZSkgeyByZXR1cm47IH1cblxuICAgICAgICAvLyBNYWtlIHN1cmUgdG8gcmVzZXQgY3VycmVudCBJbmRleFxuICAgICAgICAkc2NvcGUuY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgJHNjb3BlLnByb2plY3QgPSBhbmd1bGFyLmNvcHkoJHJvb3RTY29wZS5wcm9qZWN0KTtcblxuICAgICAgICAvLyBTaG93IGEgc2luZ2xlIGl0ZW1cbiAgICAgICAgaWYgKGFyZ3MudHlwZSA9PT0gJ3ByZXZpZXcnKSB7XG4gICAgICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSBhcmdzLml0ZW07XG4gICAgICAgICAgJHNjb3BlLnZpZXdlciA9IGFyZ3MucHJvamVjdCB8fCB7fTtcbiAgICAgICAgICAkc2NvcGUudmlld2VyLml0ZW1zID0gbnVsbDtcblxuICAgICAgICAgIGlmICgkc2NvcGUuYWN0aXZlSXRlbS5yZW1vdGVTb3VyY2UpIHtcbiAgICAgICAgICAgICRzY29wZS5jb21wYXJlSXRlbS5hID0gJHNjb3BlLmFjdGl2ZUl0ZW0ucmVtb3RlU291cmNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuY29tcGFyZUl0ZW0uYSA9ICdzY3JlZW5zLycgKyAkc2NvcGUuYWN0aXZlSXRlbS50eXBlICsgJy8nICsgJHJvb3RTY29wZS5wcm9qZWN0LmlkICsgJy8nICsgJHNjb3BlLmFjdGl2ZUl0ZW0uc291cmNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgbXVsdGlwbGUgaXRlbXNcbiAgICAgICAgaWYgKGFyZ3MudHlwZSA9PT0gJ2JhdGNoJyAmJiBhcmdzLml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkc2NvcGUuYWN0aXZlSXRlbSA9IGFyZ3MuaXRlbXNbJHNjb3BlLmN1cnJlbnRJbmRleF07XG4gICAgICAgICAgJHNjb3BlLnZpZXdlciA9IGFyZ3MucHJvamVjdCB8fCB7fTtcbiAgICAgICAgICAkc2NvcGUudmlld2VyLml0ZW1zID0gYXJncy5pdGVtcztcbiAgICAgICAgICBzZXRBY3RpdmVJdGVtKCRzY29wZS5hY3RpdmVJdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1ha2UgdGhlIG1vZGFsIGFjdGl2ZSB3aXRoIGRhdGFcbiAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MobW9kYWxBY3RpdmUpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MobW9kYWxWaXNpYmxlKTtcbiAgICAgICAgfSwgMzApO1xuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhtb2RhbFZpc2libGUpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MobW9kYWxBY3RpdmUpO1xuICAgICAgICB9LCAyMzApO1xuICAgICAgfTtcblxuICAgICAgLy8gU2V0dXAgb2YgbGVmdC9yaWdodCBuYXZpZ2F0aW9uXG4gICAgICAkc2NvcGUubW9kYWxBY3Rpb25OYXYgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIGlmICgkc2NvcGUudmlld2VyLml0ZW1zLmxlbmd0aCA8IDEpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdmFyIHRvdGFsID0gJHNjb3BlLnZpZXdlci5pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgbmV4dElkeDtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIG5leHRJZHggPSAoJHNjb3BlLmN1cnJlbnRJbmRleCA9PT0gdG90YWwpID8gMCA6ICRzY29wZS5jdXJyZW50SW5kZXggKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHRJZHggPSAoJHNjb3BlLmN1cnJlbnRJbmRleCA9PT0gMCkgPyB0b3RhbCA6ICRzY29wZS5jdXJyZW50SW5kZXggLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSAkc2NvcGUudmlld2VyLml0ZW1zW25leHRJZHhdO1xuICAgICAgICAkc2NvcGUuY3VycmVudEluZGV4ID0gbmV4dElkeDtcbiAgICAgICAgc2V0QWN0aXZlSXRlbSgkc2NvcGUuYWN0aXZlSXRlbSk7XG4gICAgICB9O1xuXG4gICAgICAvLyBHbyBkaXJlY3RseSB0byBhbiBpdGVtXG4gICAgICAkc2NvcGUuZ29Ub0luZGV4ID0gZnVuY3Rpb24oaWR4KSB7XG4gICAgICAgIGlmICgkc2NvcGUuY3VycmVudEluZGV4ID09PSBpZHgpIHtyZXR1cm47fVxuXG4gICAgICAgICRzY29wZS5hY3RpdmVJdGVtID0gJHNjb3BlLnZpZXdlci5pdGVtc1tpZHhdO1xuICAgICAgICAkc2NvcGUuY3VycmVudEluZGV4ID0gaWR4O1xuICAgICAgICBzZXRBY3RpdmVJdGVtKCRzY29wZS5hY3RpdmVJdGVtKTtcbiAgICAgIH07XG5cbiAgICB9XG4gIH07XG59XSk7XG4iLCIvKipcbiAqIG1zZ0NlbnRlclxuICogYSBkaXJlY3RpdmUgZm9yIGhhbmRsaW5nIGFsbCBtZXNzYWdlIHJlbGF5IGZvciBhIHVzZXJcbiAqXG4gKiBVU0U6XG4gKiAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ01TR0NFTlRFUjpGSVJFJywgeyBtc2c6IFwiSGV5IHRoZXJlLCBJbSBhIG1lc3NhZ2UhIVwiLCBkdXI6IDUsIHR5cGU6IFwiaW5mb1wiLCBpY29uOiBcImluZm9cIiwgY2FsbGJhY2s6IGZ1bmN0aW9uKCl7fSB9KTtcbiAqXG4gKiBUWVBFUzpcbiAqIC0gREVGQVVMVCwgc2hvd3MgZ3JlZW4gbWVzc2FnZSwgdXNlZCBmb3Igc3VjY2Vzc1xuICogLSBXYXJuaW5nOiBcIndhcm5cIiAtIHNob3dzIG9yYW5nZSBtZXNzYWdlLCB1c2VkIGZvciBlcnJvcnMgb3Igd2FybmluZ3NcbiAqIC0gSW5mbzogXCJpbmZvXCIgLSBzaG93cyBkYXJrIGJsdWUgbWVzc2FnZSwgdXNlZCBmb3IgZ2VuZXJhbCB0aGluZ3NcbiAqXG4gKiBPUFRJT05TOlxuICogLSBtc2c6IHRoZSBjb250ZW50cyBvZiB0aGUgbWVzc2FnZSwgKFRPRE86IGNhbiBiZSBodG1sIG9yIHNpbXBsZSB0ZXh0KVxuICogLSBjYWxsYmFjazogYSBmdW5jdGlvbiB0byBmaXJlIG9uIGFjdGlvbiB0YWtlbiBvbiBtZXNzYWdlXG4gKiAtIGR1cjogdGhlIHRpbWVvdXQgb2YgdGhlIG1lc3NhZ2VcbiAqIC0gdHlwZTogc2VlIGFib3ZlIHR5cGVzXG4gKiAtIGljb246IGRlZmF1bHQgaXMgZ2xvYmUsIGNhbiBiZSBzZXQgdG8gQU5ZIGktc3ByaXRlcyAoc3ByaXRlcy5sZXNzKVxuICovXG5NVUcuZGlyZWN0aXZlKCdtc2dDZW50ZXInLFxuWyBcIiRyb290U2NvcGVcIiwgXCIkdGltZW91dFwiLCBcIiRjb21waWxlXCIsXG5mdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQsICRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgc2NvcGU6IHt9LFxuICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWwsIGF0dHJzLCBjdHJsKSB7XG4gICAgICB2YXIgbXNnVGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cIm1zZ1wiIG5nLWNsaWNrPVwiYWN0aW9uKClcIj4nK1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwibXNnLWljblwiPjxpIGNsYXNzPVwiaXcgaS1JQ09OXCI+PC9pPjwvZGl2PicrXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJtc2ctY29udFwiPkJPRFk8L2Rpdj4nK1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwibXNnLWFjdGlvblwiPjxpIGNsYXNzPVwiaWIgaS1yLWFycm93XCI+PC9pPjwvZGl2PicrXG4gICAgICAgICc8L2Rpdj4nO1xuXG4gICAgICB2YXIgX2VsID0gYW5ndWxhci5lbGVtZW50KGVsKTtcbiAgICAgIHZhciB0aW1lcjtcbiAgICAgIHZhciBkdXJhdGlvbiA9IDUwMDA7XG4gICAgICB2YXIgcHJldmlvdXNJZCA9IFwiXCI7XG4gICAgICB2YXIgZGVmYXVsdEljb24gPSBcImluZm9cIjtcblxuICAgICAgc2NvcGUuYm9keSA9IFwiXCI7XG4gICAgICBzY29wZS5jYWxsYmFjayA9IG51bGw7XG4gICAgICBzY29wZS5pY29uID0gZGVmYXVsdEljb247XG4gICAgICBzY29wZS5hY3Rpb24gPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgYWN0aW9uRWwgPSBfZWwuZmluZChcIiNcIiArIHRoaXMuaWQpO1xuICAgICAgICBzY29wZS5jYWxsYmFjaygpO1xuICAgICAgICBjbGVhckVsKCBhY3Rpb25FbCApO1xuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gc2hvd01lc3NhZ2UgKCBkYXRhICl7XG4gICAgICAgIHZhciBfaWQgPSAoK25ldyBEYXRlKCkpO1xuICAgICAgICB2YXIgbmV3Qm9keSA9IGRhdGEubXNnO1xuICAgICAgICB2YXIgbmV3SWNuID0gKGRhdGEuaWNvbik/IGRhdGEuaWNvbiA6IGRlZmF1bHRJY29uO1xuXG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IG1zZ1RlbXBsYXRlLnJlcGxhY2UoXCJCT0RZXCIsIG5ld0JvZHkpLnJlcGxhY2UoXCJJQ09OXCIsIG5ld0ljbik7XG4gICAgICAgIHZhciBuZXdNZXNzYWdlID0gJGNvbXBpbGUodGVtcGxhdGUpKHNjb3BlKTtcblxuICAgICAgICAvLyBzZXQgYSB1bmlxdWUgaWRcbiAgICAgICAgbmV3TWVzc2FnZVswXS5pZCA9IF9pZDtcbiAgICAgICAgcHJldmlvdXNJZCA9IF9pZDtcblxuICAgICAgICAvLyB0aHJvdyBpbnRvIGRvbSwgdGhlbiBzaG93IGluIHZpZXcsIHN0YXJ0IHRpbWVyXG4gICAgICAgIF9lbC5hcHBlbmQoIG5ld01lc3NhZ2UgKTtcblxuICAgICAgICAvLyByZW1lbWJlciB0aGUgbmV3IGVsIGZvciBsYXRlclxuICAgICAgICB2YXIgbXNnRWwgPSBfZWwuZmluZChcIiNcIiArIF9pZCk7XG4gICAgICAgIGNoYW5nZVR5cGUoIG1zZ0VsLCBkYXRhLnR5cGUgKTtcblxuICAgICAgICBpZihkYXRhLmNhbGxiYWNrKXtcbiAgICAgICAgICBtc2dFbC5maW5kKFwiLm1zZy1hY3Rpb25cIikuYWRkQ2xhc3MoXCJzaG93XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvd1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBtc2dFbC5hZGRDbGFzcygnYWRkJyk7XG4gICAgICAgIH0sIDIwKTtcblxuICAgICAgICB0aW1lciA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2xlYXJFbCggbXNnRWwgKTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhckVsICggZWxlbSApIHtcbiAgICAgICAgaWYoIWVsZW0gJiYgcHJldmlvdXNJZCl7XG4gICAgICAgICAgZWxlbSA9IF9lbC5maW5kKFwiI1wiICsgcHJldmlvdXNJZCk7XG4gICAgICAgIH0gZWxzZSBpZighZWxlbSkgeyByZXR1cm47IH1cblxuICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKCdhZGQnKTtcbiAgICAgICAgZWxlbS5hZGRDbGFzcygncmVtb3ZlJyk7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgYW5ndWxhci5lbGVtZW50KGVsZW0pLnJlbW92ZSgpO1xuICAgICAgICB9LCAzMDApO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgdGhlIHR5cGUgYnkgYSBjbGFzc1xuICAgICAgZnVuY3Rpb24gY2hhbmdlVHlwZSAoIGVsZW0sIHR5cGUgKSB7XG4gICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoJ21zZy1pbmZvJyk7XG4gICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoJ21zZy13YXJuJyk7XG5cbiAgICAgICAgaWYodHlwZSl7XG4gICAgICAgICAgZWxlbS5hZGRDbGFzcygnbXNnLScgKyB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiRvbignTVNHQ0VOVEVSOkZJUkUnLCBmdW5jdGlvbihlLCBkYXRhKXtcbiAgICAgICAgaWYoIWRhdGEubXNnKXsgcmV0dXJuOyB9XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICBjbGVhckVsKCk7XG5cbiAgICAgICAgaWYoZGF0YS5kdXIpe1xuICAgICAgICAgIGR1cmF0aW9uID0gZGF0YS5kdXIgKiAxMDAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoZGF0YS5jYWxsYmFjayl7XG4gICAgICAgICAgc2NvcGUuY2FsbGJhY2sgPSBkYXRhLmNhbGxiYWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hvd01lc3NhZ2UoIGRhdGEgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dKTtcbiIsIi8qKlxuICogcHJlbG9hZGVyXG4gKiBhIGRpcmVjdGl2ZSBmb3Igc2hvd2luZyBhIHByZWxvYWRlciBhbmltYXRpb24gZHVyaW5nIGEgcHJvY2Vzc2luZyBwZXJpb2RcbiAqXG4gKiBVU0U6XG4gKiA8cHJlbG9hZGVyPjwvcHJlbG9hZGVyPlxuICpcbiAqICRyb290U2NvcGUuJGJyb2FkY2FzdCgnUFJFTE9BREVSOlVQREFURScsIHsgbXNnOiAnT3BlbmluZyBCcm93c2VyIFNlc3Npb24nLCBwZXJjZW50OiAzNyB9KTtcbiAqICRyb290U2NvcGUuJGJyb2FkY2FzdCgnUFJFTE9BREVSOk9GRicpO1xuICpcbiAqL1xudmFyIFAgPSByZXF1aXJlKCcuL3ZlbmRvci9jb3JlL3ByZWxvYWRlcicpO1xuXG5NVUcuZGlyZWN0aXZlKCdwcmVsb2FkZXInLFxuWyckcm9vdFNjb3BlJywgJyR0aW1lb3V0JyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICR0aW1lb3V0KSB7XG4gIHZhciB0b3RhbEluY3JlbWVudCA9IDMwO1xuXG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZUluY3JlbWVudHMocHJvamVjdCkge1xuICAgIHZhciBkZWxheSA9IDA7XG4gICAgdmFyIHZpZXdwb3J0cyA9IDA7XG4gICAgdmFyIHNlbGVjdG9ycyA9IDA7XG4gICAgdmFyIGluY3JlbWVudCA9IDEyO1xuXG4gICAgLy8gZ2V0IGFsbCBjb250YWluZXIgc2VsZWN0b3JzIHRvdGFsXG4gICAgaWYgKHByb2plY3Quc2VsZWN0b3JzICYmIHByb2plY3Quc2VsZWN0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvamVjdC5zZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2plY3Quc2VsZWN0b3JzW2ldICYmIHByb2plY3Quc2VsZWN0b3JzW2ldLnR5cGUgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgc2VsZWN0b3JzID0gc2VsZWN0b3JzICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGdldCB0aGUgdmlld3BvcnRzXG4gICAgaWYgKHByb2plY3Qudmlld3BvcnRzICYmIHByb2plY3Qudmlld3BvcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZpZXdwb3J0cyA9IHByb2plY3Qudmlld3BvcnRzLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBzZWUgaWYgdGhlcmUgaXMgYSBkZWxheVxuICAgIGlmIChwcm9qZWN0Lm1ldGEgJiYgcHJvamVjdC5tZXRhLmRlbGF5KSB7XG4gICAgICBkZWxheSA9IHBhcnNlSW50KHByb2plY3QubWV0YS5kZWxheSwgMTApO1xuICAgIH1cblxuICAgIC8vIGNhbGN1bGF0ZSBhIHJlYXNvbmFibGUgaW5jcmVtZW50IGZvciB0aGUgYW5pbWF0aW9uXG4gICAgdG90YWxJbmNyZW1lbnQgPSAoaW5jcmVtZW50ICogKHZpZXdwb3J0cyAqIHNlbGVjdG9ycykpICsgMzA7IC8vICsgZGVsYXlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHNjb3BlOiB7fSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwcmVsb2FkZXJcIj48L2Rpdj4nLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycywgY3RybCkge1xuICAgICAgdmFyIEI7XG4gICAgICB2YXIgZWw7XG4gICAgICB2YXIgdGltZXI7XG4gICAgICB2YXIgdGl0bGU7XG4gICAgICB2YXIgcHJldmlvdXNUaXRsZTtcbiAgICAgIHZhciBkdXJhdGlvbiA9IDUwMDA7XG4gICAgICB2YXIgbG9hZGluZyA9ICdsb2FkaW5nJztcbiAgICAgIHZhciBpc0FuaW1hdGluZyA9IGZhbHNlO1xuXG4gICAgICAvLyBJTklUIVxuICAgICAgLy8gYXZvaWQgdGhlIG5nLWNsb2FrIHRpbWVsaW5lXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgQiA9IG5ldyBQLkJyb3dzZXIoKTtcbiAgICAgICAgQi5pbml0KCk7XG5cbiAgICAgICAgLy8gc2V0dXAgb25lIGluc3RhbmNlIG9mIHRoZSBjYW52YXNcbiAgICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJlbG9hZGVyJyk7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKEIuaW5zdGFuY2UpO1xuXG4gICAgICAgIC8vIGRyYXcgYnJvd3NlclxuICAgICAgICBCLmRyYXdCcm93c2VyKCk7XG4gICAgICB9LCAzMCk7XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVByZWxvYWRlcihlLCBhcmdzKSB7XG4gICAgICAgIGlmICghYXJncyB8fCAhYXJncy5tc2cpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgaWYgKGFyZ3MucHJvamVjdCkge1xuICAgICAgICAgIGNhbGN1bGF0ZUluY3JlbWVudHMoYXJncy5wcm9qZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBkb250IGFuaW1hdGUgb3ZlciBhIHByZXZpb3VzIGFuaW1hdGlvblxuICAgICAgICBpZiAoIWlzQW5pbWF0aW5nKSB7XG4gICAgICAgICAgaXNBbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgfSwgdG90YWxJbmNyZW1lbnQgKiAxMCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aXRsZSA9IGFyZ3MubXNnO1xuXG4gICAgICAgIHZhciB0eXBlO1xuXG4gICAgICAgIHN3aXRjaCAodGl0bGUpIHtcbiAgICAgICAgICAvLyBjYXNlICdTdGFydGluZyBjb21wYXJlIGNhcHR1cmUnOlxuICAgICAgICAgIC8vICAgdHlwZSA9IDA7XG4gICAgICAgICAgLy8gICBicmVhaztcbiAgICAgICAgICBjYXNlICdPcGVuaW5nIEJyb3dzZXIgU2Vzc2lvbic6XG4gICAgICAgICAgICB0eXBlID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0NhcHR1cmluZyBTY3JlZW5zJzpcbiAgICAgICAgICAgIHR5cGUgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyBjYXNlICdVcGRhdGVkIFByb2plY3QgSGlzdG9yeSc6XG4gICAgICAgICAgLy8gICB0eXBlID0gMjtcbiAgICAgICAgICAvLyAgIGJyZWFrO1xuICAgICAgICAgIC8vIGNhc2UgJ0NvbXBhcmluZyBDYXB0dXJlIERhdGEnOlxuICAgICAgICAgIC8vICAgdHlwZSA9IDI7XG4gICAgICAgICAgLy8gICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIHRoYXQgdGhlIHRpdGxlIGhhcyBjaGFuZ2VkXG4gICAgICAgIGlmICh0aXRsZSAhPT0gcHJldmlvdXNUaXRsZSAmJiBCICYmIEIuYW5pbWF0ZSkge1xuXG4gICAgICAgICAgLy8gU3RhcnQgYW5pbWF0aW9uXG4gICAgICAgICAgQi5hbmltYXRlKHR5cGUsIHRvdGFsSW5jcmVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHByZXZpb3VzVGl0bGUgPSB0aXRsZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXNldFByZWxvYWRlcigpIHtcbiAgICAgICAgQi5yZXNldEJyb3dzZXIoKTtcbiAgICAgIH1cblxuICAgICAgLy8gJHJvb3RTY29wZS4kb24oJ1BSRUxPQURFUjpPTicsIHNob3dQcmVsb2FkZXIpO1xuICAgICAgJHJvb3RTY29wZS4kb24oJ1BSRUxPQURFUjpVUERBVEUnLCB1cGRhdGVQcmVsb2FkZXIpO1xuICAgICAgJHJvb3RTY29wZS4kb24oJ1BSRUxPQURFUjpPRkYnLCByZXNldFByZWxvYWRlcik7XG4gICAgfVxuICB9O1xufV0pO1xuIiwiTVVHLmZhY3RvcnkoJ3RpbWVBZ28nLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZXJ2aWNlID0ge307XG5cbiAgc2VydmljZS5zZXR0aW5ncyA9IHtcbiAgICByZWZyZXNoTWlsbGlzOiA2MDAwMCxcbiAgICBhbGxvd0Z1dHVyZTogZmFsc2UsXG4gICAgc3RyaW5nczoge1xuICAgICAgcHJlZml4QWdvOiBudWxsLFxuICAgICAgcHJlZml4RnJvbU5vdzogbnVsbCxcbiAgICAgIHN1ZmZpeEFnbzogJ2FnbycsXG4gICAgICBzdWZmaXhGcm9tTm93OiAnZnJvbSBub3cnLFxuICAgICAgc2Vjb25kczogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgICBtaW51dGU6ICdhYm91dCBhIG1pbnV0ZScsXG4gICAgICBtaW51dGVzOiAnJWQgbWludXRlcycsXG4gICAgICBob3VyOiAnYWJvdXQgYW4gaG91cicsXG4gICAgICBob3VyczogJyVkIGhvdXJzJyxcbiAgICAgIGRheTogJ2EgZGF5JyxcbiAgICAgIGRheXM6ICclZCBkYXlzJyxcbiAgICAgIG1vbnRoOiAnYWJvdXQgYSBtb250aCcsXG4gICAgICBtb250aHM6ICclZCBtb250aHMnLFxuICAgICAgeWVhcjogJ2Fib3V0IGEgeWVhcicsXG4gICAgICB5ZWFyczogJyVkIHllYXJzJyxcbiAgICAgIG51bWJlcnM6IFtdXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHRyaW1EaWdpdHMgKCBudW0gKSB7XG4gICAgICB2YXIgbSA9IG51bS50b1N0cmluZygpLnNsaWNlKDAsMTMpO1xuICAgICAgcmV0dXJuIChtLmxlbmd0aCA9PSAxMyk/IHBhcnNlSW50KG0pIDogbnVtO1xuICB9XG5cbiAgc2VydmljZS5pbldvcmRzID0gZnVuY3Rpb24gKGRpc3RhbmNlTWlsbGlzKSB7XG4gICAgdmFyICRsID0gc2VydmljZS5zZXR0aW5ncy5zdHJpbmdzO1xuICAgIHZhciBwcmVmaXggPSAkbC5wcmVmaXhBZ287XG4gICAgdmFyIHN1ZmZpeCA9ICRsLnN1ZmZpeEFnbztcbiAgICBpZiAoc2VydmljZS5zZXR0aW5ncy5hbGxvd0Z1dHVyZSkge1xuICAgICAgaWYgKGRpc3RhbmNlTWlsbGlzIDwgMCkge1xuICAgICAgICBwcmVmaXggPSAkbC5wcmVmaXhGcm9tTm93O1xuICAgICAgICBzdWZmaXggPSAkbC5zdWZmaXhGcm9tTm93O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzZWNvbmRzID0gTWF0aC5hYnMoZGlzdGFuY2VNaWxsaXMpIC8gMTAwMDtcbiAgICB2YXIgbWludXRlcyA9IHNlY29uZHMgLyA2MDtcbiAgICB2YXIgaG91cnMgPSBtaW51dGVzIC8gNjA7XG4gICAgdmFyIGRheXMgPSBob3VycyAvIDI0O1xuICAgIHZhciB5ZWFycyA9IGRheXMgLyAzNjU7XG5cbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlKHN0cmluZ09yRnVuY3Rpb24sIG51bWJlcikge1xuICAgICAgdmFyIHN0cmluZyA9IGFuZ3VsYXIuaXNGdW5jdGlvbihzdHJpbmdPckZ1bmN0aW9uKSA/XG4gICAgICBzdHJpbmdPckZ1bmN0aW9uKG51bWJlciwgZGlzdGFuY2VNaWxsaXMpIDogc3RyaW5nT3JGdW5jdGlvbjtcbiAgICAgIHZhciB2YWx1ZSA9ICgkbC5udW1iZXJzICYmICRsLm51bWJlcnNbbnVtYmVyXSkgfHwgbnVtYmVyO1xuICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8lZC9pLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgdmFyIHdvcmRzID0gc2Vjb25kcyA8IDQ1ICYmIHN1YnN0aXR1dGUoJGwuc2Vjb25kcywgTWF0aC5yb3VuZChzZWNvbmRzKSkgfHxcbiAgICAgICAgc2Vjb25kcyA8IDkwICYmIHN1YnN0aXR1dGUoJGwubWludXRlLCAxKSB8fFxuICAgICAgICBtaW51dGVzIDwgNDUgJiYgc3Vic3RpdHV0ZSgkbC5taW51dGVzLCBNYXRoLnJvdW5kKG1pbnV0ZXMpKSB8fFxuICAgICAgICBtaW51dGVzIDwgOTAgJiYgc3Vic3RpdHV0ZSgkbC5ob3VyLCAxKSB8fFxuICAgICAgICBob3VycyA8IDI0ICYmIHN1YnN0aXR1dGUoJGwuaG91cnMsIE1hdGgucm91bmQoaG91cnMpKSB8fFxuICAgICAgICBob3VycyA8IDQyICYmIHN1YnN0aXR1dGUoJGwuZGF5LCAxKSB8fFxuICAgICAgICBkYXlzIDwgMzAgJiYgc3Vic3RpdHV0ZSgkbC5kYXlzLCBNYXRoLnJvdW5kKGRheXMpKSB8fFxuICAgICAgICBkYXlzIDwgNDUgJiYgc3Vic3RpdHV0ZSgkbC5tb250aCwgMSkgfHxcbiAgICAgICAgZGF5cyA8IDM2NSAmJiBzdWJzdGl0dXRlKCRsLm1vbnRocywgTWF0aC5yb3VuZChkYXlzIC8gMzApKSB8fFxuICAgICAgICB5ZWFycyA8IDEuNSAmJiBzdWJzdGl0dXRlKCRsLnllYXIsIDEpIHx8XG4gICAgICAgIHN1YnN0aXR1dGUoJGwueWVhcnMsIE1hdGgucm91bmQoeWVhcnMpKTtcblxuICAgIHZhciBzZXBhcmF0b3IgPSAkbC53b3JkU2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnICcgOiAkbC53b3JkU2VwYXJhdG9yO1xuICAgIHJldHVybiBbcHJlZml4LCB3b3Jkcywgc3VmZml4XS5qb2luKHNlcGFyYXRvcikudHJpbSgpO1xuICB9O1xuXG4gIHNlcnZpY2UucGFyc2UgPSBmdW5jdGlvbiAoaXNvODYwMSkge1xuICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKGlzbzg2MDEpKSB7XG4gICAgICBpc284NjAxID0gaXNvODYwMSArIFwiXCI7XG4gICAgICAvLyBmb3JtYXQgZm9yIGNvcnJlY3QgbGVuZ3RoXG4gICAgICB2YXIgb3JpZ2luYWxUaW1lc3RhbXAgPSB0cmltRGlnaXRzKCBpc284NjAxICk7XG4gICAgICByZXR1cm4gcGFyc2VJbnQob3JpZ2luYWxUaW1lc3RhbXAsIDEwKTtcbiAgICB9XG4gICAgdmFyIHMgPSAoaXNvODYwMSB8fCAnJykudHJpbSgpO1xuICAgIHMgPSBzLnJlcGxhY2UoL1xcLlxcZCsvLCAnJyk7IC8vIHJlbW92ZSBtaWxsaXNlY29uZHNcbiAgICBzID0gcy5yZXBsYWNlKC8tLywgJy8nKS5yZXBsYWNlKC8tLywgJy8nKTtcbiAgICBzID0gcy5yZXBsYWNlKC9ULywgJyAnKS5yZXBsYWNlKC9aLywgJyBVVEMnKTtcbiAgICBzID0gcy5yZXBsYWNlKC8oW1xcK1xcLV1cXGRcXGQpXFw6PyhcXGRcXGQpLywgJyAkMSQyJyk7IC8vIC0wNDowMCAtPiAtMDQwMFxuICAgIHJldHVybiBuZXcgRGF0ZShzKTtcbiAgfTtcblxuICByZXR1cm4gc2VydmljZTtcbn0pO1xuIiwidmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG5cbk1VRy5mYWN0b3J5KCdDb21wYXJlJyxcblsnJHEnLCAnQ29uZmlnJyxcbmZ1bmN0aW9uKCRxLCBDb25maWcpIHtcbiAgLy8gQ29uZmlnIHZhcnNcbiAgdmFyIGZpbGVEaXJQcmVmaXggPSBfX2Rpcm5hbWUgKyAnLyc7XG4gIHZhciBpbWFnZVByZWZpeCA9ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJztcbiAgdmFyIHN0YXR1c1R5cGVzID0gWydwYXNzZWQnLCAnd2FybmluZycsICdmYWlsZWQnXTtcblxuICAvLyBhc3luYyBoZWxwZXJcbiAgZnVuY3Rpb24gcmVhZEFzeW5jKGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgZnMucmVhZEZpbGUoZmlsZURpclByZWZpeCArIGZpbGUsICdiYXNlNjQnLCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBUT0RPOiBsZXQgdGhlIGJhY2tlbmQgcHJvY2VzcyBoYW5kbGUgdGhpcyFcbiAgZnVuY3Rpb24gY29tcGFyZVNpbmdsZShhLCBiKSB7XG4gICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgdmFyIG91dHB1dCA9IHt9O1xuXG4gICAgLy8gQXBwbHkgTWFpbiBDb21wYXJlIENvbmZpZ1xuICAgIHJlc2VtYmxlLm91dHB1dFNldHRpbmdzKENvbmZpZy5Db21wYXJlKTtcblxuICAgIC8vIE9wZW4gYm90aCBmaWxlcywgYmVmb3JlIHdlIGFyZSByZWFkeSB0byBwcm9jZXNzXG4gICAgYXN5bmMubWFwKFthLCBiXSwgcmVhZEFzeW5jLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICAgIHZhciBhRGF0YSA9IGltYWdlUHJlZml4ICsgcmVzdWx0c1swXTtcbiAgICAgIHZhciBiRGF0YSA9IGltYWdlUHJlZml4ICsgcmVzdWx0c1sxXTtcblxuICAgICAgLy8gSGFuZGxlcyBlcnJvcnNcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgfVxuXG4gICAgICAvLyBSdW4gdGhlIGNvbXBhcmUgZnVuY3Rpb24sIHJldHVybiB0aGUgZGlmZiBkYXRhXG4gICAgICByZXNlbWJsZShhRGF0YSlcbiAgICAgICAgLmNvbXBhcmVUbyhiRGF0YSlcbiAgICAgICAgLmlnbm9yZUNvbG9ycygpXG4gICAgICAgIC5vbkNvbXBsZXRlKGZ1bmN0aW9uKGRpZmZEYXRhKSB7XG4gICAgICAgICAgb3V0cHV0LnJlcG9ydCA9IGRpZmZEYXRhO1xuICAgICAgICAgIG91dHB1dC5zcmMgPSBkaWZmRGF0YS5nZXRJbWFnZURhdGFVcmwoKTtcblxuICAgICAgICAgIGRmZC5yZXNvbHZlKG91dHB1dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICB9O1xuXG4gIHJldHVybiB7XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gaW1hZ2VzIGFuZCByZXR1cm5zIGFsbCBkYXRhIHdpdGggYW4gaW1hZ2Ugb2YgY2hhbmdlc1xuICAgICAqL1xuICAgIHJ1blNpbmdsZTogY29tcGFyZVNpbmdsZSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgdGhlIHR5cGUgb2YgcGFzcy93YXJuL2ZhaWwgc3RhdHVzXG4gICAgICovXG4gICAgZ2V0U3RhdHVzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbWlzTWF0Y2hWYWx1ZSA9IHBhcnNlRmxvYXQoZGF0YS5taXNNYXRjaFBlcmNlbnRhZ2UpO1xuXG4gICAgICAvLyBsb3dlc3QgdG9sZXJhbmNlXG4gICAgICBpZiAobWlzTWF0Y2hWYWx1ZSA8IDAuMSkge1xuXG4gICAgICAgIC8vIFdhcm4gdGhhdCBkaW1lbnNpb25zIGFyZSBkaWZmZXJlbmNlXG4gICAgICAgIGlmIChkYXRhLmlzU2FtZURpbWVuc2lvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXR1c1R5cGVzWzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzdGF0dXNUeXBlc1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB3YXJuaW5nIHRvbGVyYW5jZVxuICAgICAgaWYgKG1pc01hdGNoVmFsdWUgPiAwLjEgJiYgbWlzTWF0Y2hWYWx1ZSA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHN0YXR1c1R5cGVzWzFdO1xuICAgICAgfVxuXG4gICAgICAvLyBlcnJvciB0b2xlcmFuY2UgcmVhY2hlZFxuICAgICAgcmV0dXJuIHN0YXR1c1R5cGVzWzJdO1xuICAgIH1cblxuICB9O1xufV0pO1xuIiwiTVVHLmZhY3RvcnkoJ25vd1RpbWUnLFxuWyckdGltZW91dCcsXG5mdW5jdGlvbigkdGltZW91dCkge1xuICB2YXIgbm93VGltZSA9IERhdGUubm93KCk7XG4gIHZhciB1cGRhdGVUaW1lID0gZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBub3dUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICB9LCAxMDAwKTtcbiAgfTtcblxuICB1cGRhdGVUaW1lKCk7XG4gIHJldHVybiB7XG4gICAgZ2V0VGltZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbm93VGltZTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCJ2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgQVdTID0gcmVxdWlyZSgnLi92ZW5kb3IvY29yZS9hd3MnKTtcblxuTVVHLmZhY3RvcnkoJ1Byb2plY3RzJyxcblsnJHEnLFxuZnVuY3Rpb24oJHEpIHtcbiAgLy8gQ29uZmlnIHRoZSBtYWluIHBhdGhzXG4gIHZhciBwcm9qZWN0c1BhdGggPSBfX2Rpcm5hbWUgKyAnL3Byb2plY3RzLmpzb24nO1xuICB2YXIgcHJvamVjdEZpbGVzUGF0aCA9IF9fZGlybmFtZSArICcvcHJvamVjdHMvJztcblxuICAvLyBDcmVhdGVzIGEgVVVJRCBvZiB0aGUgc3BlY2lmaWVkIGxlbmd0aFxuICBmdW5jdGlvbiBjcmVhdGVVVUlEKHMpIHtcbiAgICB2YXIgbjtcbiAgICBpZiAodHlwZW9mIHMgPT0gJ251bWJlcicgJiYgcyA9PT0gcGFyc2VJbnQocywgMTApKSB7XG4gICAgICBzID0gQXJyYXkocyArIDEpLmpvaW4oJ3gnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcy5yZXBsYWNlKC94L2csIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG4gPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA2MSkgKyA0ODtcbiAgICAgIG4gPSBuID4gNTcgPyAobiArIDcgPiA5MCA/IG4gKyAxMyA6IG4gKyA3KSA6IG47XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIENyZWF0ZXMgYSBKU09OIG9iamVjdCBmb3IgYSBiYXNlbGluZSBuZXcgcHJvamVjdFxuICBmdW5jdGlvbiBjcmVhdGVEdW1teVByb2plY3QodG90YWwpIHtcbiAgICB0b3RhbCA9IHRvdGFsIHx8IDA7XG4gICAgdmFyIHByb2plY3RJZCA9IGNyZWF0ZVVVSUQoMTIpO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogcHJvamVjdElkLFxuICAgICAgdGl0bGU6ICdQcm9qZWN0ICcgKyAocGFyc2VJbnQodG90YWwsIDEwKSArIDEpLFxuICAgICAgdGltZXN0YW1wOiAoK25ldyBEYXRlKSxcbiAgICAgIHRvdGFsczoge1xuICAgICAgICBzdWNjZXNzOiBudWxsLFxuICAgICAgICB3YXJuaW5nOiBudWxsLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgdmlld3M6IDBcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gU2V0cyB1cCB0aGUgbmVlZGVkIGJhc2UgZGF0YSBmb3Igc3RvcmluZyBhbiBpbmRpdmlkdWFsIHByb2plY3RcbiAgZnVuY3Rpb24gY3JlYXRlRHVtbXlQcm9qZWN0RmlsZShvcHRpb25zKSB7XG4gICAgdmFyIHByb2plY3RJZCA9IGNyZWF0ZVVVSUQoMTIpO1xuICAgIHJldHVybiB7XG4gICAgICBiYXRjaEhpc3Rvcnk6IHt9LFxuICAgICAgY3VycmVudEJhdGNoOiBudWxsLFxuICAgICAgY3VycmVudFJlZmVyZW5jZTogbnVsbCxcbiAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgdGl0bGU6IG9wdGlvbnMudGl0bGUsXG4gICAgICB0aW1lc3RhbXA6IG9wdGlvbnMudGltZXN0YW1wLFxuICAgICAgdmlld3BvcnRzOiBbXSxcbiAgICAgIHNlbGVjdG9yczogW10sXG4gICAgICBjb29raWVzOiBbXSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICByZWFkeUV2ZW50OiBudWxsLFxuICAgICAgICBkZWxheTogbnVsbCxcbiAgICAgICAgbWlzTWF0Y2hUaHJlc2hvbGQ6IG51bGxcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gR3JhYnMgSlNPTiBmaWxlIGFuZCBhcHByb3ByaWF0ZWx5IGhhbmRsZXMgZXJyb3JzXG4gIGZ1bmN0aW9uIGdldEpzb25GaWxlKHBhdGgsIHR5cGUpIHtcbiAgICB2YXIgZmlsZTtcblxuICAgIHRyeSB7XG4gICAgICBmaWxlID0gZnMucmVhZEZpbGVTeW5jKHBhdGgsICd1dGY4Jyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gY291bGRuJ3QgZmluZCBmaWxlXG4gICAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICByZXR1cm4gdHlwZSB8fCB7fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZmlsZSk7XG4gIH1cblxuICAvLyByZW1vdmUgYWxsIGZpbGVzIGluIGRpcmVjdG9yeVxuICBmdW5jdGlvbiByZW1vdmVBbGxJbkRpcmVjdG9yeShkaXJQYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKGRpclBhdGgpO1xuICAgIH0gY2F0Y2ggKGUpIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAoZmlsZXMubGVuZ3RoID4gMClcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZpbGVQYXRoID0gcGF0aC5qb2luKGRpclBhdGgsIGZpbGVzW2ldKTtcblxuICAgICAgICBpZiAoZnMuc3RhdFN5bmMoZmlsZVBhdGgpLmlzRmlsZSgpKSB7XG4gICAgICAgICAgZnMudW5saW5rU3luYyhmaWxlUGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm1EaXIoZmlsZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gIH07XG5cbiAgLy8gc2V0cyB1cCBhIHByb21pc2UgZHJpdmVuIGZpbGUgd3JpdGVcbiAgZnVuY3Rpb24gcHJvbWlzZVdyaXRlKGZpbGVQYXRoLCBkYXRhKSB7XG4gICAgdmFyIF9xID0gJHEuZGVmZXIoKTtcblxuICAgIGZzLndyaXRlRmlsZShmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkoZGF0YSksIGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBfcS5yZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfcS5yZXNvbHZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3EucHJvbWlzZTtcbiAgfVxuXG4gIC8vIHNldHMgdXAgYSBwcm9taXNlIGRyaXZlbiBmaWxlIGRlbGV0ZVxuICBmdW5jdGlvbiBwcm9taXNlUmVtb3ZlKHBhdGgpIHtcbiAgICB2YXIgX3ogPSAkcS5kZWZlcigpO1xuXG4gICAgLy8gZnMudW5saW5rXG4gICAgZnMudW5saW5rKHBhdGgsIGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBfei5yZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfei5yZXNvbHZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3oucHJvbWlzZTtcbiAgfVxuXG4gIHJldHVybiB7XG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHBhdGgsIHR5cGUpIHtcbiAgICAgIHJldHVybiBnZXRKc29uRmlsZShfX2Rpcm5hbWUgKyBwYXRoLCB0eXBlKTtcbiAgICB9LFxuXG4gICAgZ2V0QWxsOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRKc29uRmlsZShwcm9qZWN0c1BhdGgsIFtdKTtcbiAgICB9LFxuXG4gICAgZ2V0QnlJZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBnZXRKc29uRmlsZShwcm9qZWN0RmlsZXNQYXRoICsgaWQgKyAnLmpzb24nKTtcbiAgICB9LFxuXG4gICAgZ2V0VHlwZUJ5SWQ6IGZ1bmN0aW9uKGlkLCB0eXBlKSB7XG4gICAgICB2YXIgYWRkaXRpb24gPSAodHlwZSkgPyAnXycgKyB0eXBlIDogJyc7XG4gICAgICByZXR1cm4gZ2V0SnNvbkZpbGUocHJvamVjdEZpbGVzUGF0aCArIGlkICsgYWRkaXRpb24gKyAnLmpzb24nLCBbXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHZhbGlkYXRlcyB0aGUgcHJvamVjdCwgbWFrZXMgc3VyZSBhbGwgc2V0dGluZ3MgYXJlIHNldHVwIGFuZCB2YWxpZFxuICAgICAqL1xuICAgIHZhbGlkYXRlOiBmdW5jdGlvbihwcm9qZWN0KSB7XG4gICAgICB2YXIgY29va2llcyA9IHByb2plY3QuY29va2llcztcbiAgICAgIHZhciB2aWV3cG9ydHMgPSBwcm9qZWN0LnZpZXdwb3J0cztcbiAgICAgIHZhciBzZWxlY3RvcnMgPSBwcm9qZWN0LnNlbGVjdG9ycztcbiAgICAgIHZhciB0aXRsZSA9IHByb2plY3QudGl0bGU7XG4gICAgICB2YXIgdXJsID0gcHJvamVjdC5tZXRhLnVybDtcbiAgICAgIHZhciBib29sID0gdHJ1ZTtcblxuICAgICAgLy8gdmVyaWZ5IGFsbCBkZWZhdWx0cyBhcmUgc2V0dXBcbiAgICAgIGlmICghdmlld3BvcnRzIHx8ICFzZWxlY3RvcnMgfHwgIXRpdGxlIHx8ICF1cmwgfHwgdmlld3BvcnRzLmxlbmd0aCA8IDEgfHwgc2VsZWN0b3JzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSBoYXZlIHZpZXdwb3J0cywgdmVyaWZ5IHRoZXkncmUgc2V0dXAgcmlnaHRcbiAgICAgIGlmICh2aWV3cG9ydHMpIHtcbiAgICAgICAgdmlld3BvcnRzLm1hcChmdW5jdGlvbihvYmosIGlkeCkge1xuICAgICAgICAgIGlmICghb2JqLndpZHRoIHx8ICFvYmouaGVpZ2h0IHx8ICFvYmoubmFtZSkge1xuICAgICAgICAgICAgYm9vbCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGhhdmUgc2VsZWN0b3JzLCB2ZXJpZnkgdGhleSdyZSBzZXR1cCByaWdodFxuICAgICAgaWYgKHNlbGVjdG9ycykge1xuICAgICAgICBzZWxlY3RvcnMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICAgICAgaWYgKCFvYmoucXVlcnkgfHwgIW9iai50eXBlKSB7XG4gICAgICAgICAgICBib29sID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UgaGF2ZSBjb29raWVzLCB2ZXJpZnkgdGhleSdyZSBzZXR1cCByaWdodFxuICAgICAgaWYgKGNvb2tpZXMpIHtcbiAgICAgICAgY29va2llcy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgICAgICBpZiAoIW9iai5uYW1lIHx8ICFvYmoucGF0aCB8fCAhb2JqLnZhbHVlKSB7XG4gICAgICAgICAgICBib29sID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVmYXVsdCB0byB0cnVlXG4gICAgICByZXR1cm4gYm9vbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlcyBhIG5ldyBwcm9qZWN0LCBhbmQgcmV0dXJucyB0aGUgZGF0YSBpbiBhIHByb21pc2VcbiAgICAgKi9cbiAgICBjcmVhdGVOZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRmZGQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIHF1ZXVlUHJvbWlzZXMgPSBbXTtcbiAgICAgIHZhciBhbGxQcm9qZWN0cyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHByb2plY3RzUGF0aCwgJ3V0ZjgnKSk7XG4gICAgICB2YXIgbmV3UHJvamVjdERhdGEgPSBjcmVhdGVEdW1teVByb2plY3QoYWxsUHJvamVjdHMubGVuZ3RoKTtcbiAgICAgIHZhciBuZXdQcm9qZWN0RmlsZSA9IGNyZWF0ZUR1bW15UHJvamVjdEZpbGUobmV3UHJvamVjdERhdGEpO1xuXG4gICAgICBhbGxQcm9qZWN0cy51bnNoaWZ0KG5ld1Byb2plY3REYXRhKTtcblxuICAgICAgLy8gc2F2ZSB0aGUgZGF0YSB0byB0aGUgcHJvamVjdHMgbGlzdFxuICAgICAgdmFyIHByb2plY3RBbGxEYXRhID0gcHJvbWlzZVdyaXRlKHByb2plY3RzUGF0aCwgYWxsUHJvamVjdHMpO1xuICAgICAgdmFyIHByb2plY3REYXRhID0gcHJvbWlzZVdyaXRlKHByb2plY3RGaWxlc1BhdGggKyBuZXdQcm9qZWN0RGF0YS5pZCArICcuanNvbicsIG5ld1Byb2plY3RGaWxlKTtcbiAgICAgIHZhciBwcm9qZWN0SGlzdG9yeURhdGEgPSBwcm9taXNlV3JpdGUocHJvamVjdEZpbGVzUGF0aCArIG5ld1Byb2plY3REYXRhLmlkICsgJ19oaXN0b3J5Lmpzb24nLCBbXSk7XG4gICAgICBxdWV1ZVByb21pc2VzLnB1c2gocHJvamVjdEFsbERhdGEpO1xuICAgICAgcXVldWVQcm9taXNlcy5wdXNoKHByb2plY3REYXRhKTtcbiAgICAgIHF1ZXVlUHJvbWlzZXMucHVzaChwcm9qZWN0SGlzdG9yeURhdGEpO1xuXG4gICAgICAvLyBkbyBhbGwgcHJvbWlzZSBvcGVyYXRpb25zXG4gICAgICAkcS5hbGwocXVldWVQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgZGZkZC5yZXNvbHZlKG5ld1Byb2plY3REYXRhKTtcbiAgICAgIH0sIGRmZGQucmVqZWN0KTtcblxuICAgICAgcmV0dXJuIGRmZGQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLy8gc2F2ZSB0byBmaWxlIGFuZCBsaXN0cywgcmV0dXJuIGxpc3QgZGF0YVxuICAgIHNhdmU6IGZ1bmN0aW9uKHByb2plY3REYXRhKSB7XG4gICAgICB2YXIgZGZkZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgcXVldWVQcm9taXNlcyA9IFtdO1xuICAgICAgdmFyIGFsbFByb2plY3RzID0gZ2V0SnNvbkZpbGUocHJvamVjdHNQYXRoLCBbXSk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgbGlzdGluZyBkYXRhXG4gICAgICBhbGxQcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgICAgaWYgKG9iai5pZCA9PT0gcHJvamVjdERhdGEuaWQpIHtcbiAgICAgICAgICBhbGxQcm9qZWN0c1tpZHhdLnRpdGxlID0gcHJvamVjdERhdGEudGl0bGU7XG4gICAgICAgICAgYWxsUHJvamVjdHNbaWR4XS50aW1lc3RhbXAgPSAoK25ldyBEYXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIHNhdmUgdGhlIGRhdGEgdG8gdGhlIHByb2plY3RzIGxpc3RcbiAgICAgIHZhciBwcm9qZWN0VGVtcERhdGEgPSBwcm9taXNlV3JpdGUocHJvamVjdEZpbGVzUGF0aCArIHByb2plY3REYXRhLmlkICsgJy5qc29uJywgcHJvamVjdERhdGEpO1xuICAgICAgdmFyIHByb2plY3RBbGxEYXRhID0gcHJvbWlzZVdyaXRlKHByb2plY3RzUGF0aCwgYWxsUHJvamVjdHMpO1xuICAgICAgcXVldWVQcm9taXNlcy5wdXNoKHByb2plY3RUZW1wRGF0YSk7XG4gICAgICBxdWV1ZVByb21pc2VzLnB1c2gocHJvamVjdEFsbERhdGEpO1xuXG4gICAgICAvLyBkbyBhbGwgcHJvbWlzZSBvcGVyYXRpb25zXG4gICAgICAkcS5hbGwocXVldWVQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgZGZkZC5yZXNvbHZlKHByb2plY3REYXRhKTtcbiAgICAgIH0sIGRmZGQucmVqZWN0KTtcblxuICAgICAgcmV0dXJuIGRmZGQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlcyBhIHNpbmdsZSBwcm9qZWN0IGJ5IElEXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGRmZGQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIHF1ZXVlUHJvbWlzZXMgPSBbXTtcbiAgICAgIHZhciBhbGxQcm9qZWN0cyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHByb2plY3RzUGF0aCwgJ3V0ZjgnKSk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgbGlzdGluZyBkYXRhXG4gICAgICBhbGxQcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgICAgaWYgKG9iai5pZCA9PT0gaWQpIHtcbiAgICAgICAgICBhbGxQcm9qZWN0cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIHJlbW92ZSBhbGwgbG9jYWwgaW1hZ2VzXG4gICAgICB0aGlzLmNsZWFuSW1hZ2VGaWxlcyhpZCk7XG5cbiAgICAgIC8vIHNhdmUgdGhlIGRhdGEgdG8gdGhlIHByb2plY3RzIGxpc3RcbiAgICAgIHZhciBwcm9qZWN0RGF0YSA9IHByb21pc2VSZW1vdmUocHJvamVjdEZpbGVzUGF0aCArIGlkICsgJy5qc29uJyk7XG4gICAgICB2YXIgcHJvamVjdEhpc3RvcnlEYXRhID0gcHJvbWlzZVJlbW92ZShwcm9qZWN0RmlsZXNQYXRoICsgaWQgKyAnX2hpc3RvcnkuanNvbicpO1xuICAgICAgdmFyIHByb2plY3RBbGxEYXRhID0gcHJvbWlzZVdyaXRlKHByb2plY3RzUGF0aCwgYWxsUHJvamVjdHMpO1xuICAgICAgcXVldWVQcm9taXNlcy5wdXNoKHByb2plY3REYXRhKTtcbiAgICAgIHF1ZXVlUHJvbWlzZXMucHVzaChwcm9qZWN0SGlzdG9yeURhdGEpO1xuICAgICAgcXVldWVQcm9taXNlcy5wdXNoKHByb2plY3RBbGxEYXRhKTtcblxuICAgICAgLy8gZG8gYWxsIHByb21pc2Ugb3BlcmF0aW9uc1xuICAgICAgJHEuYWxsKHF1ZXVlUHJvbWlzZXMpLnRoZW4oZGZkZC5yZXNvbHZlLCBkZmRkLnJlamVjdCk7XG5cbiAgICAgIHJldHVybiBkZmRkLnByb21pc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZXMgYWxsIHN0b3JlZCBoaXN0b3J5IGZvciBhIHByb2plY3RcbiAgICAgKi9cbiAgICBjbGVhckhpc3Rvcnk6IGZ1bmN0aW9uKHByb2plY3QpIHtcbiAgICAgIHZhciBkZmRkID0gJHEuZGVmZXIoKTtcbiAgICAgIHZhciBxdWV1ZVByb21pc2VzID0gW107XG4gICAgICB2YXIgbWFpblByb2plY3RzID0gZ2V0SnNvbkZpbGUocHJvamVjdHNQYXRoLCBbXSk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgcHJvamVjdCBkYXRhIHRvIHJlZmxlY3Qgbm8gaGlzdG9yeVxuICAgICAgcHJvamVjdC5jdXJyZW50QmF0Y2ggPSBudWxsO1xuICAgICAgcHJvamVjdC5jdXJyZW50UmVmZXJlbmNlID0gbnVsbDtcbiAgICAgIHByb2plY3QuYmF0Y2hIaXN0b3J5ID0ge307XG5cbiAgICAgIC8vIHVwZGF0ZSB0aGUgY3VycmVudCBwcm9qZWN0IHRvIGhhdmUgbm8gYmF0Y2hIaXN0b3J5XG4gICAgICBtYWluUHJvamVjdHMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICAgIGlmIChvYmouaWQgPT09IHByb2plY3QuaWQpIHtcbiAgICAgICAgICBtYWluUHJvamVjdHNbaWR4XS50b3RhbHMuc3VjY2VzcyA9IDA7XG4gICAgICAgICAgbWFpblByb2plY3RzW2lkeF0udG90YWxzLndhcm5pbmcgPSAwO1xuICAgICAgICAgIG1haW5Qcm9qZWN0c1tpZHhdLnRvdGFscy5lcnJvciA9IDA7XG4gICAgICAgICAgbWFpblByb2plY3RzW2lkeF0udG90YWxzLnZpZXdzID0gMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIHJlbW92ZSBhbGwgbG9jYWwgaW1hZ2VzXG4gICAgICB0aGlzLmNsZWFuSW1hZ2VGaWxlcyhwcm9qZWN0LmlkKTtcblxuICAgICAgLy8gc2F2ZSB0aGUgZGF0YSB0byB0aGUgcHJvamVjdHMgbGlzdFxuICAgICAgdmFyIHByb2plY3RIaXN0b3J5RGF0YSA9IHByb21pc2VXcml0ZShwcm9qZWN0RmlsZXNQYXRoICsgcHJvamVjdC5pZCArICdfaGlzdG9yeS5qc29uJywgW10pO1xuICAgICAgdmFyIHByb2plY3REYXRhID0gcHJvbWlzZVdyaXRlKHByb2plY3RGaWxlc1BhdGggKyBwcm9qZWN0LmlkICsgJy5qc29uJywgcHJvamVjdCk7XG4gICAgICB2YXIgcHJvamVjdEFsbERhdGEgPSBwcm9taXNlV3JpdGUocHJvamVjdHNQYXRoLCBtYWluUHJvamVjdHMpO1xuICAgICAgcXVldWVQcm9taXNlcy5wdXNoKHByb2plY3RIaXN0b3J5RGF0YSk7XG4gICAgICBxdWV1ZVByb21pc2VzLnB1c2gocHJvamVjdERhdGEpO1xuICAgICAgcXVldWVQcm9taXNlcy5wdXNoKHByb2plY3RBbGxEYXRhKTtcblxuICAgICAgLy8gZG8gYWxsIHByb21pc2Ugb3BlcmF0aW9uc1xuICAgICAgJHEuYWxsKHF1ZXVlUHJvbWlzZXMpLnRoZW4oZGZkZC5yZXNvbHZlLCBkZmRkLnJlamVjdCk7XG5cbiAgICAgIHJldHVybiBkZmRkLnByb21pc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHBhc3MgaW4gYSBwcm9qZWN0SWQsIHRoZW4gaXQgd2lsbCByZWFkIHRoZSBwcm9qZWN0IGFuZCBpdHMgY3VycmVudCBiYXRjaCBvZiBmaWxlcyB0byB1cGxvYWRcbiAgICAgKiBvbmNlIGNvbXBsZXRlLCBpdCB3aWxsIGNsZWFuIG91dCBhbnkgbG9jYWwgc2NyZWVucyBhbmQgcmVwbGFjZSB3aXRoIGF3cyByZXNvdXJjZXNcbiAgICAgKi9cbiAgICBzeW5jOiBmdW5jdGlvbihpZCkge1xuICAgICAgaWYgKCFpZCkge3JldHVybjt9XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgcHJvamVjdCA9IHRoaXMuZ2V0QnlJZChpZCk7XG4gICAgICB2YXIgcHJvamVjdEZpbGVzID0gdGhpcy5nZXRUeXBlQnlJZChpZCwgJ2hpc3RvcnknKTtcbiAgICAgIHZhciByZWFkeUZpbGVzID0gW107XG5cbiAgICAgIC8vIHB1bGwgb3V0IGZpbGVzIHRoYXQgYXJlIGFscmVhZHkgaW5zaWRlIGF3cywgcHJlcCBmb3IgdXBsb2FkXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb2plY3RGaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdG1wRmlsZSA9IHByb2plY3RGaWxlc1tpXTtcbiAgICAgICAgaWYgKHRtcEZpbGUuc291cmNlICYmIHRtcEZpbGUuc291cmNlLnNlYXJjaCgnYW1hem9uJykgPT09IC0xKSB7XG4gICAgICAgICAgdmFyIHNyYyA9IHRtcEZpbGUuc291cmNlO1xuICAgICAgICAgIHZhciB0eXBlID0gdG1wRmlsZS50eXBlO1xuICAgICAgICAgIHZhciBwYXRoID0gX19kaXJuYW1lICsgJy9zY3JlZW5zLycgKyB0eXBlICsgJy8nICsgcHJvamVjdC5pZCArICcvJyArIHNyYztcbiAgICAgICAgICByZWFkeUZpbGVzLnB1c2goeyBrZXk6IHR5cGUgKyAnLycgKyBzcmMsIHBhdGg6IHBhdGggfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdXBsb2FkIGZpbGVzXG4gICAgICBBV1MuaW5pdCgpXG4gICAgICAgIC51cGxvYWQocmVhZHlGaWxlcywgcHJvamVjdC5pZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG5cbiAgICAgICAgICAvLyBkbyBwb3N0LXByb2Nlc3MgYWN0aW9uXG4gICAgICAgICAgX3RoaXMuY2xlYW5BZnRlclN5bmMocHJvamVjdCwgcmVzKS50aGVuKGQucmVzb2x2ZSwgZC5yZWplY3QpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGQucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjbGVhbiBsb2NhbCBpbWFnZXMsIHVwZGF0ZSBoaXN0b3J5IHdpdGggYXdzIHJlc291cmNlcywgcmV0dXJucyB0aGUgdXBkYXRlc1xuICAgICAqL1xuICAgIGNsZWFuQWZ0ZXJTeW5jOiBmdW5jdGlvbihwcm9qZWN0LCBuZXdSZWZzKSB7XG4gICAgICB2YXIgZGZkZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgaGlzdG9yeURhdGEgPSBnZXRKc29uRmlsZShwcm9qZWN0RmlsZXNQYXRoICsgcHJvamVjdC5pZCArICdfaGlzdG9yeS5qc29uJywgW10pO1xuICAgICAgdmFyIHVwZGF0ZWRSZW1vdGVGaWxlcyA9IFtdO1xuICAgICAgdmFyIHF1ZXVlUHJvbWlzZXMgPSBbXTtcbiAgICAgIHByb2plY3QudXBkYXRlZEF0ID0gKCtuZXcgRGF0ZSgpKTtcblxuICAgICAgLy8gbG9vcCB0aHJvdWdoIG5ldyBmaWxlc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdSZWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0bXBTcmMgPSBuZXdSZWZzW2ldO1xuICAgICAgICB2YXIgdG1wUmVmID0gdG1wU3JjLnNwbGl0KCcvJyk7XG4gICAgICAgIHZhciB0bXBUeXBlID0gdG1wUmVmW3RtcFJlZi5sZW5ndGggLSAyXTtcbiAgICAgICAgdmFyIHRtcEFsaWFzID0gdG1wUmVmW3RtcFJlZi5sZW5ndGggLSAxXTtcblxuICAgICAgICBoaXN0b3J5RGF0YS5tYXAoZnVuY3Rpb24oaXRlbSwgaWR4KSB7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgaGlzdG9yeSByZWZcbiAgICAgICAgICBpZiAoaXRlbS5zb3VyY2UgPT09IHRtcEFsaWFzICYmIHRtcFR5cGUgPT09ICdjb21wYXJlJykge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIHJlbW92ZSB0aGUgZGlmZiBhbHNvXG4gICAgICAgICAgICB2YXIgcmVtUmVmUGF0aCA9IF9fZGlybmFtZSArICcvc2NyZWVucy8nICsgdG1wVHlwZSArICcvJyArIHByb2plY3QuaWQgKyAnLycgKyB0bXBBbGlhcztcbiAgICAgICAgICAgIHZhciByZW1SZWYgPSBwcm9taXNlUmVtb3ZlKHJlbVJlZlBhdGgpO1xuICAgICAgICAgICAgdmFyIHJlbVJlZkRpZmYgPSBwcm9taXNlUmVtb3ZlKHJlbVJlZlBhdGgucmVwbGFjZSgnLicsICdfZGlmZi4nKSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBoaXN0b3J5XG4gICAgICAgICAgICBkZWxldGUgaGlzdG9yeURhdGFbaWR4XS5zb3VyY2U7XG4gICAgICAgICAgICBoaXN0b3J5RGF0YVtpZHhdLnJlbW90ZVNvdXJjZSA9IG5ld1JlZnNbaV07XG5cbiAgICAgICAgICAgIC8vIGFkZCB0byBwcm9taXNlIGxpc3RcbiAgICAgICAgICAgIHF1ZXVlUHJvbWlzZXMucHVzaChyZW1SZWYpO1xuICAgICAgICAgICAgcXVldWVQcm9taXNlcy5wdXNoKHJlbVJlZkRpZmYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNhdmUgaGlzdG9yeSAmIHByb2plY3RcbiAgICAgIHZhciBwcm9qZWN0RmlsZSA9IF9fZGlybmFtZSArICcvcHJvamVjdHMvJyArIHByb2plY3QuaWQgKyAnLmpzb24nO1xuICAgICAgdmFyIHByb2plY3RIaXN0b3J5RmlsZSA9IHByb2plY3RGaWxlLnJlcGxhY2UoJy5qc29uJywgJ19oaXN0b3J5Lmpzb24nKTtcbiAgICAgIHZhciBwcm9qZWN0V3JpdGUgPSBwcm9taXNlV3JpdGUocHJvamVjdEZpbGUsIHByb2plY3QpO1xuICAgICAgdmFyIHByb2plY3RIaXN0b3J5V3JpdGUgPSBwcm9taXNlV3JpdGUocHJvamVjdEhpc3RvcnlGaWxlLCBoaXN0b3J5RGF0YSk7XG4gICAgICBxdWV1ZVByb21pc2VzLnVuc2hpZnQocHJvamVjdFdyaXRlKTtcbiAgICAgIHF1ZXVlUHJvbWlzZXMudW5zaGlmdChwcm9qZWN0SGlzdG9yeVdyaXRlKTtcblxuICAgICAgLy8gYWRkIHByb2plY3QgZmlsZXMgdG8gdGhlIHVwbG9hZCByZWFkaW5lc3NcbiAgICAgIHVwZGF0ZWRSZW1vdGVGaWxlcy5wdXNoKHsga2V5OiBwcm9qZWN0LmlkLCBwYXRoOiBwcm9qZWN0RmlsZSB9KTtcbiAgICAgIHVwZGF0ZWRSZW1vdGVGaWxlcy5wdXNoKHsga2V5OiBwcm9qZWN0LmlkICsgJ19oaXN0b3J5JywgcGF0aDogcHJvamVjdEhpc3RvcnlGaWxlIH0pO1xuXG4gICAgICAvLyB1cGxvYWQgdXBkYXRlZCBoaXN0b3J5ICYgcHJvamVjdFxuICAgICAgdmFyIGF3c1VwbG9hZCA9IEFXUy5pbml0KCkudXBsb2FkKHVwZGF0ZWRSZW1vdGVGaWxlcywgcHJvamVjdC5pZCk7XG4gICAgICBxdWV1ZVByb21pc2VzLnVuc2hpZnQoYXdzVXBsb2FkKTtcblxuICAgICAgLy8gZG8gYWxsIHByb21pc2Ugb3BlcmF0aW9uc1xuICAgICAgJHEuYWxsKHF1ZXVlUHJvbWlzZXMpLnRoZW4oZGZkZC5yZXNvbHZlLCBkZmRkLnJlamVjdCk7XG5cbiAgICAgIHJldHVybiBkZmRkLnByb21pc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNsZWFuIGxvY2FsIGltYWdlcywgdXBkYXRlIGhpc3Rvcnkgd2l0aCBhd3MgcmVzb3VyY2VzLCByZXR1cm5zIHRoZSB1cGRhdGVzXG4gICAgICovXG4gICAgY2xlYW5JbWFnZUZpbGVzOiBmdW5jdGlvbihwcm9qZWN0SWQpIHtcbiAgICAgIHZhciBiYXNlID0gX19kaXJuYW1lICsgJy9zY3JlZW5zL0JBU0UvJyArIHByb2plY3RJZDtcbiAgICAgIHZhciBjb21wcyA9IGJhc2UucmVwbGFjZSgnQkFTRScsICdjb21wYXJlJyk7XG4gICAgICB2YXIgcmVmcyA9IGJhc2UucmVwbGFjZSgnQkFTRScsICdyZWZlcmVuY2UnKTtcblxuICAgICAgcmVtb3ZlQWxsSW5EaXJlY3RvcnkoY29tcHMpO1xuICAgICAgcmVtb3ZlQWxsSW5EaXJlY3RvcnkocmVmcyk7XG4gICAgfVxuXG4gIH07XG59XSk7XG4iLCJNVUcuZmlsdGVyKCd0aW1lQWdvJyxcblsnbm93VGltZScsICd0aW1lQWdvJyxcbmZ1bmN0aW9uIChub3dUaW1lLCB0aW1lQWdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgZnJvbVRpbWUgPSB0aW1lQWdvLnBhcnNlKHZhbHVlKTtcbiAgICB2YXIgZGlmZiA9IG5vd1RpbWUuZ2V0VGltZSgpIC0gZnJvbVRpbWU7XG4gICAgcmV0dXJuIHRpbWVBZ28uaW5Xb3JkcyhkaWZmKTtcbiAgfTtcbn1dKTtcbiIsInZhciBpcGMgPSByZXF1aXJlKCdpcGMnKTtcblxuTVVHLmNvbnRyb2xsZXIoJ01haW5DdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJywgJ0NvbmZpZycsICdQcm9qZWN0cycsXG5mdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRzdGF0ZSwgQ29uZmlnLCBQcm9qZWN0cykge1xuICAkcm9vdFNjb3BlLmN1cnJlbnRQcm9qZWN0SWQgPSAnJztcblxuICAkc2NvcGUuY3JlYXRlTmV3UHJvamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIFByb2plY3RzLmNyZWF0ZU5ldygpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ1NJREVQQU5FTDpORVdQUk9KRUNUJywgcmVzKTtcbiAgICAgICRzdGF0ZS5nbygncHJvamVjdHMuc2V0dGluZ3MnLCB7IGlkOiByZXMuaWQgfSk7XG4gICAgfSxcblxuICAgIGZ1bmN0aW9uKGVycikge1xuICAgICAgY29uc29sZS5sb2coJ2VycicsIGVycik7XG4gICAgfSk7XG4gIH07XG5cbiAgaXBjLm9uKCdOQVZJR0FURTpUTycsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MubG9jYXRpb24pIHtyZXR1cm47fVxuXG4gICAgY29uc29sZS5sb2coJ05BVklHQVRFOlRPJywgYXJncyk7XG4gICAgJHN0YXRlLmdvKGFyZ3MubG9jYXRpb24pO1xuICB9KTtcblxuICAvLyBVU0UgVEhJUyBpbnN0ZWFkIG9mICRzY29wZS4kYXBwbHkoKTsgSXQgd2lsbCBtYWtlIHRoZSAkZGlnZXN0IGVycm9ycyBub3QgaGFwcGVuLlxuICAkcm9vdFNjb3BlLlNhZmVBcHBseSA9IGZ1bmN0aW9uKHNjb3BlLCBmbikge1xuICAgIGlmIChzY29wZS4kJHBoYXNlIHx8IHNjb3BlLiRyb290LiQkcGhhc2UpIHtcbiAgICAgIGlmICh0eXBlb2YgZm4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjb3BlLiRhcHBseShmbik7XG4gICAgfVxuICB9O1xuXG59XSk7XG4iLCJ2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIEFXUyA9IHJlcXVpcmUoJy4vdmVuZG9yL2NvcmUvYXdzJyk7XG5cbk1VRy5jb250cm9sbGVyKCdQcmVmZXJlbmNlc0N0cmwnLFxuWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckc3RhdGUnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkc3RhdGUpIHtcbiAgJHNjb3BlLmF3c0NvbmZpZyA9IHtcbiAgICBidWNrZXQ6ICcnLFxuICAgIGFjY2Vzc0tleUlkOiAnJyxcbiAgICBzZWNyZXRBY2Nlc3NLZXk6ICcnXG4gIH07XG5cbiAgLy8gZ3JhYiBzZXR0aW5ncyByZWFsIHF1aWNrXG4gICRzY29wZS5hd3NDb25maWcgPSBBV1MuZ2V0Q29uZmlnKCk7XG5cbiAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBzYXZlIHRoZSBBV1MgY29uZmlnXG4gICAgQVdTLnNldENvbmZpZygkc2NvcGUuYXdzQ29uZmlnKTtcbiAgfTtcblxufV0pO1xuIiwiTVVHLmNvbnRyb2xsZXIoJ1Byb2plY3RDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlUGFyYW1zLCBQcm9qZWN0cykge1xuXG4gIC8vIEFsbG93IHRoZSBjaGlsZCB2aWV3cyB0byBiaW5kIHRvIHNhbWUgc2NvcGVcbiAgJHJvb3RTY29wZS5wcm9qZWN0ID0gUHJvamVjdHMuZ2V0QnlJZCgkc3RhdGVQYXJhbXMuaWQpO1xuXG59XSk7XG4iLCJNVUcuY29udHJvbGxlcignUHJvamVjdEhpc3RvcnlDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlUGFyYW1zLCBQcm9qZWN0cykge1xuICAkc2NvcGUuYWN0aXZlRmlsdGVyID0gJ0FsbCc7XG4gICRzY29wZS5hY3RpdmVGaWx0ZXJRdWVyeSA9ICcnO1xuXG4gIC8vIGdyYWIgYWxsIHRoZSBoaXN0b3J5IGRhdGFcbiAgJHNjb3BlLmhpc3RvcnlJdGVtcyA9IFByb2plY3RzLmdldFR5cGVCeUlkKCRzdGF0ZVBhcmFtcy5pZCwgJ2hpc3RvcnknKTtcblxuICAkc2NvcGUuY2hhbmdlRmlsdGVyID0gZnVuY3Rpb24odHlwZSkge1xuICAgICRzY29wZS5hY3RpdmVGaWx0ZXIgPSB0eXBlO1xuICAgICRzY29wZS5hY3RpdmVGaWx0ZXJRdWVyeSA9ICh0eXBlID09ICdBbGwnKSA/ICcnIDogdHlwZTtcbiAgfTtcblxuICAkc2NvcGUucHJldmlld0l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgJHJvb3RTY29wZS4kZW1pdCgnTU9EQUw6T1BFTicsIHsgdHlwZTogJ3ByZXZpZXcnLCBpdGVtOiBpdGVtLCBwcm9qZWN0OiAkcm9vdFNjb3BlLnByb2plY3QgfSk7XG4gIH07XG5cbn1dKTtcbiIsInZhciBpcGMgPSByZXF1aXJlKCdpcGMnKTtcblxuTVVHLmNvbnRyb2xsZXIoJ1Byb2plY3RSdW5uZXJDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHRpbWVvdXQnLCAnJHN0YXRlUGFyYW1zJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHRpbWVvdXQsICRzdGF0ZVBhcmFtcywgUHJvamVjdHMpIHtcbiAgdmFyIGRlZmF1bHRGb3JtYXQgPSBbeyB0eXBlOiAnc3VjY2VzcycsIGl0ZW1zOiBbXX0sIHsgdHlwZTogJ3dhcm5pbmcnLCBpdGVtczogW119LCB7IHR5cGU6ICdlcnJvcicsIGl0ZW1zOiBbXX1dO1xuXG4gICRzY29wZS5wcm9jZXNzaW5nID0gZmFsc2U7XG4gICRzY29wZS5oYXNTZXR0aW5ncyA9IGZhbHNlO1xuICAkc2NvcGUuaGFzUmVmZXJlbmNlID0gZmFsc2U7XG4gICRzY29wZS5oYXNDb21wYXJlID0gZmFsc2U7XG4gICRzY29wZS5ydW5uaW5nVHlwZSA9ICdyZWZlcmVuY2UnO1xuICAkc2NvcGUuYmF0Y2hJdGVtcyA9IGRlZmF1bHRGb3JtYXQ7XG4gICRzY29wZS5hY3RpdmVEYXRhID0ge307XG4gICRzY29wZS5jdXJyZW50QmF0Y2ggPSAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoIHx8IDA7XG4gICRzY29wZS5wcm9ncmVzcyA9IHtcbiAgICBwZXJjZW50OiAwLFxuICAgIHRpdGxlOiAnU3RhcnRpbmcnXG4gIH07XG5cbiAgLy8gUHV0cyBkYXRhIGludG8gc29ydGVkIHNlY3Rpb25zXG4gIGZ1bmN0aW9uIHByb2Nlc3NCYXRjaChhbGxEYXRhKSB7XG4gICAgaWYgKCFhbGxEYXRhIHx8IGFsbERhdGEubGVuZ3RoIDwgMSkge1xuICAgICAgJHNjb3BlLmhhc1JlZmVyZW5jZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIHJlc2V0IGp1c3QgdGhlIHN0YXRzXG4gICAgJHNjb3BlLmFjdGl2ZURhdGEgPSB7fTtcbiAgICAkc2NvcGUuYWN0aXZlRGF0YS5zdWNjZXNzID0gMDtcbiAgICAkc2NvcGUuYWN0aXZlRGF0YS53YXJuaW5nID0gMDtcbiAgICAkc2NvcGUuYWN0aXZlRGF0YS5lcnJvciA9IDA7XG4gICAgdmFyIGZvcm1hdHRlZCA9IFt7IHR5cGU6ICdzdWNjZXNzJywgaXRlbXM6IFtdfSwgeyB0eXBlOiAnd2FybmluZycsIGl0ZW1zOiBbXX0sIHsgdHlwZTogJ2Vycm9yJywgaXRlbXM6IFtdfV07XG5cbiAgICBmdW5jdGlvbiBwbGFjZUl0ZW0oaXRlbSkge1xuXG4gICAgICAvLyBLZWVwIHRoaW5ncyBvcmdhbml6ZXMgd2l0aCBwcmVzZXQgcHJpb3JpdHlcbiAgICAgIGlmIChpdGVtLnN0YXR1cykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gMDtcblxuICAgICAgICBzd2l0Y2ggKGl0ZW0uc3RhdHVzKSB7XG4gICAgICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgICAgICB0YXJnZXQgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgICAgIHRhcmdldCA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdHRlZFt0YXJnZXRdLml0ZW1zLnVuc2hpZnQoaXRlbSk7XG4gICAgICAgICRzY29wZS5hY3RpdmVEYXRhW2Zvcm1hdHRlZFt0YXJnZXRdLnR5cGVdID0gJHNjb3BlLmFjdGl2ZURhdGFbZm9ybWF0dGVkW3RhcmdldF0udHlwZV0gKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFsbERhdGEubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICBpZiAob2JqLmJhdGNoID09PSAkc2NvcGUuY3VycmVudEJhdGNoKSB7XG4gICAgICAgIHBsYWNlSXRlbShvYmopO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLmhhc1JlZmVyZW5jZSA9IHRydWU7XG4gICAgcmV0dXJuIGZvcm1hdHRlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldHVwQ3VycmVudEJhdGNoKCkge1xuICAgIGlmICgkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoID09PSBudWxsKSB7cmV0dXJuO31cblxuICAgIC8vIGdyYWIgYWxsIHRoZSBydW5uZXIgdGVzdCBkYXRhXG4gICAgdmFyIGhpc3RvcnlEYXRhID0gUHJvamVjdHMuZ2V0VHlwZUJ5SWQoJHJvb3RTY29wZS5wcm9qZWN0LmlkLCAnaGlzdG9yeScpO1xuXG4gICAgLy8gU3RvcmUgdGhlIHByb2Nlc3NlZCBkYXRhIGludG8gdGhlIGJhdGNoIGRhdGFcbiAgICAkc2NvcGUuYmF0Y2hJdGVtcyA9IHByb2Nlc3NCYXRjaChoaXN0b3J5RGF0YSk7XG5cbiAgICAvLyBzZXR1cCB3aGljaCB2aWV3IHRvIHNob3cgYmFzZWQgb24gaGlzdG9yeVxuICAgICRzY29wZS5ydW5uaW5nVHlwZSA9ICgkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudFJlZmVyZW5jZSA+PSAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoKSA/ICdyZWZlcmVuY2UnIDogJ2NvbXBhcmUnO1xuICB9XG5cbiAgLy8gdmFsaWRhdGlvbiBvZiBwcm9qZWN0XG4gIGZ1bmN0aW9uIHZhbGlkYXRlUHJvamVjdCgpIHtcbiAgICAvLyB2ZXJpZnkgaWYgaXRzIHZhbGlkXG4gICAgdmFyIGlzVmFsaWQgPSBQcm9qZWN0cy52YWxpZGF0ZSgkcm9vdFNjb3BlLnByb2plY3QpO1xuXG4gICAgLy8gYWxlcnQgb2YgaW52YWxpZGl0eVxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdBTEVSVDpGSVJFJywgeyB0aXRsZTogJ1BsZWFzZSBmaW5pc2ggY29uZmlndXJpbmcgc2V0dGluZ3MhJywgZHVyOiA1LCB0eXBlOiAnZXJyb3InLCBpY29uOiAnc3RvcCcgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzVmFsaWQ7XG4gIH1cblxuICAvLyBjaGVja3MgZm9yIGNoYW5nZXMgYW5kIHVwZGF0ZXMgVUkgYWNjb3VyZGluZ2x5XG4gIGZ1bmN0aW9uIGNoZWNrU3RhdGUoKSB7XG4gICAgJHNjb3BlLmhhc1NldHRpbmdzID0gdmFsaWRhdGVQcm9qZWN0KCk7XG4gICAgJHNjb3BlLmhhc1JlZmVyZW5jZSA9ICgkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudFJlZmVyZW5jZSAhPT0gbnVsbCk7XG5cbiAgICBpZiAoJHNjb3BlLnJ1bm5pbmdUeXBlID09PSAncmVmZXJlbmNlJykge1xuICAgICAgJHNjb3BlLmhhc0NvbXBhcmUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLmhhc0NvbXBhcmUgPSAoJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCAhPT0gbnVsbCAmJiAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoICE9PSAwKTtcbiAgICAgICRzY29wZS5oYXNDb21wYXJlID0gKCRyb290U2NvcGUucHJvamVjdC5jdXJyZW50UmVmZXJlbmNlIDw9ICRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGdyYWIgdGhlIGxhdGVzdCBkYXRhIGZvciB0aGUgcHJvamVjdFxuICBmdW5jdGlvbiBncmFiTGF0ZXN0RGF0YSgpIHtcbiAgICAkcm9vdFNjb3BlLnByb2plY3QgPSBQcm9qZWN0cy5nZXRCeUlkKCRyb290U2NvcGUucHJvamVjdC5pZCk7XG4gICAgJHNjb3BlLmN1cnJlbnRCYXRjaCA9ICRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2g7XG5cbiAgICAvLyBTZXQgdGhlIGFjdGl2ZSBkYXRhIGJhc2VkIG9uIGN1cnJlbnRCYXRjaFxuICAgICRzY29wZS5hY3RpdmVEYXRhID0gKCRyb290U2NvcGUucHJvamVjdCAmJiAkcm9vdFNjb3BlLnByb2plY3QuYmF0Y2hIaXN0b3J5KSA/ICRyb290U2NvcGUucHJvamVjdC5iYXRjaEhpc3RvcnlbJHNjb3BlLmN1cnJlbnRCYXRjaF0gOiBudWxsO1xuXG4gICAgJHJvb3RTY29wZS4kZW1pdCgnU0lERVBBTkVMOlVQREFURScsICRyb290U2NvcGUucHJvamVjdCk7XG4gIH1cblxuICAvLyBzeW5jIGFsbCBwcm9qZWN0IGZpbGVzIGFuZCBzZXR0aW5ncyB0byBBV1NcbiAgdmFyIHN5bmNpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBzeW5jUHJvamVjdCgpIHtcbiAgICBpZiAodHlwZW9mICRyb290U2NvcGUucHJvamVjdC5tZXRhLmF1dG9TeW5jQXdzICE9PSB1bmRlZmluZWQgJiYgJHJvb3RTY29wZS5wcm9qZWN0Lm1ldGEuYXV0b1N5bmNBd3MgPT09IHRydWUgJiYgIXN5bmNpbmcpIHtcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6ICdTeW5jIFN0YXJ0aW5nJywgZHVyOiAzLCB0eXBlOiAnaW5mbycgfSk7XG4gICAgICBzeW5jaW5nID0gdHJ1ZTtcblxuICAgICAgUHJvamVjdHMuc3luYygkcm9vdFNjb3BlLnByb2plY3QuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgIHN5bmNpbmcgPSBmYWxzZTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnU3luYyBDb21wbGV0ZScsIGR1cjogMywgdHlwZTogJ3N1Y2Nlc3MnLCBpY29uOiAnY2hlY2snIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnc3luY05vdyBlcnInLCBlcnIpO1xuICAgICAgICAgIHN5bmNpbmcgPSBmYWxzZTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnU3luYyBGYWlsZWQnLCBkdXI6IDUsIHR5cGU6ICdlcnJvcicsIGljb246ICdzdG9wZScgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGdyYWJMYXRlc3REYXRhKCk7XG4gIHNldHVwQ3VycmVudEJhdGNoKCk7XG4gIGNoZWNrU3RhdGUoKTtcblxuICAvLyBGaXJlIG9mZiB0aGUgdmlld2VyXG4gICRzY29wZS5wcmV2aWV3QmF0Y2ggPSBmdW5jdGlvbihpdGVtcykge1xuICAgICRyb290U2NvcGUuJGVtaXQoJ01PREFMOk9QRU4nLCB7IHR5cGU6ICdiYXRjaCcsIGl0ZW1zOiBpdGVtcywgcHJvamVjdDogJHJvb3RTY29wZS5wcm9qZWN0IH0pO1xuICB9O1xuXG4gIC8vIEZpcmUgb2ZmIGEgbmV3IHRlc3QhIVxuICAkc2NvcGUubmV3Q29tcGFyZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWxpZCA9IHZhbGlkYXRlUHJvamVjdCgpO1xuXG4gICAgLy8gdmFsaWRhdGlvbiBwYXVzZVxuICAgIGlmICghdmFsaWQpIHtyZXR1cm47fVxuXG4gICAgJHNjb3BlLnJ1bm5pbmdUeXBlID0gJ2NvbXBhcmUnO1xuICAgICRzY29wZS5wcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkcm9vdFNjb3BlLiRlbWl0KCdQUkVMT0FERVI6T04nKTtcbiAgICB9LCAxMCk7XG5cbiAgICBpcGMuc2VuZCgnUlVOTkVSOkZJUkUnLCB7IHR5cGU6ICdjb21wYXJlJywgcHJvamVjdElkOiAkcm9vdFNjb3BlLnByb2plY3QuaWQgfSk7XG4gIH07XG5cbiAgLy8gc2V0dXAgbmV3IHJlZmVyZW5jZVxuICAkc2NvcGUubmV3UmVmZXJlbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbGlkID0gdmFsaWRhdGVQcm9qZWN0KCk7XG5cbiAgICAvLyB2YWxpZGF0aW9uIHBhdXNlXG4gICAgaWYgKCF2YWxpZCkge3JldHVybjt9XG5cbiAgICAkc2NvcGUucHJvY2Vzc2luZyA9IHRydWU7XG4gICAgJHNjb3BlLnJ1bm5pbmdUeXBlID0gJ3JlZmVyZW5jZSc7XG4gICAgJHNjb3BlLmhhc0NvbXBhcmUgPSBmYWxzZTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkcm9vdFNjb3BlLiRlbWl0KCdQUkVMT0FERVI6T04nKTtcbiAgICB9LCAxMCk7XG5cbiAgICBpcGMuc2VuZCgnUlVOTkVSOkZJUkUnLCB7IHR5cGU6ICdyZWZlcmVuY2UnLCBwcm9qZWN0SWQ6ICRyb290U2NvcGUucHJvamVjdC5pZCB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBydW5uZXJFdmVudHMoYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5tc2cgfHwgIWFyZ3MucGVyY2VudCkge3JldHVybjt9XG5cbiAgICAvLyBXcml0ZSB0aGUgcHJvZ3Jlc3MgdG8gVUlcbiAgICAkc2NvcGUucHJvZ3Jlc3MucGVyY2VudCA9IHBhcnNlSW50KGFyZ3MucGVyY2VudCwgMTApO1xuICAgICRzY29wZS5wcm9ncmVzcy50aXRsZSA9IChhcmdzLm1zZykgPyBhcmdzLm1zZyA6ICRzY29wZS5wcm9ncmVzcy50aXRsZTtcblxuICAgIHZhciBwcmVBcmdzID0gYXJncztcbiAgICBwcmVBcmdzLnByb2plY3QgPSAkcm9vdFNjb3BlLnByb2plY3Q7XG4gICAgJHJvb3RTY29wZS4kZW1pdCgnUFJFTE9BREVSOlVQREFURScsIHByZUFyZ3MpO1xuICB9XG5cbiAgLy8gc2lnbmFsIFVJIG9mIGNoYW5nZXNcbiAgZnVuY3Rpb24gcnVubmVyQ29tcGxldGUoKSB7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBncmFiTGF0ZXN0RGF0YSgpO1xuICAgICAgc2V0dXBDdXJyZW50QmF0Y2goKTtcbiAgICAgIGNoZWNrU3RhdGUoKTtcbiAgICAgIHN5bmNQcm9qZWN0KCk7XG4gICAgICAkc2NvcGUucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIH0sIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVubmVyRmFpbGVkKHJlYXNvbikge1xuICAgIGNvbnNvbGUubG9nKCdSVU5ORVI6RkFJTEVEIHJlYXNvbicsIHJlYXNvbik7XG4gICAgJHNjb3BlLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGlwYy5vbignUlVOTkVSOlBST0dSRVNTJywgcnVubmVyRXZlbnRzKTtcbiAgaXBjLm9uKCdSVU5ORVI6Q09NUExFVEUnLCBydW5uZXJDb21wbGV0ZSk7XG4gIGlwYy5vbignUlVOTkVSOkZBSUxFRCcsIHJ1bm5lckZhaWxlZCk7XG5cbn1dKTtcbiIsInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbk1VRy5jb250cm9sbGVyKCdQcm9qZWN0U2V0dGluZ3NDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBQcm9qZWN0cykge1xuICB2YXIgc2F2ZVRpbWVyO1xuXG4gICRzY29wZS5zeW5jaW5nID0gZmFsc2U7XG4gICRzY29wZS5zZWxlY3RvclR5cGVzID0gWydjb250YWluZXInLCAnaGlkZScsICdyZW1vdmUnXTtcbiAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgJHNjb3BlLmhhc0F3c1NldHRpbmdzID0gZmFsc2U7XG4gICRzY29wZS5tYXN0ZXIgPSB7fTtcbiAgYW5ndWxhci5jb3B5KCRyb290U2NvcGUucHJvamVjdCwgJHNjb3BlLm1hc3Rlcik7XG5cbiAgZnVuY3Rpb24gYWRkTmV3VHlwZSh0eXBlLCBkYXRhKSB7XG4gICAgJHJvb3RTY29wZS5wcm9qZWN0W3R5cGVdLnB1c2goZGF0YSk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0F3c1NldHRpbmdzKCkge1xuICAgIC8vIHJlYWQgaWYgYXdzIHNldHRpbmdzIGFuZCBpZiB0aGV5IGFyZSBjb3JyZWN0XG4gICAgdmFyIGZpbGUgPSBQcm9qZWN0cy5nZXQoJy9jb25maWcvYXdzLmpzb24nLCB7fSk7XG5cbiAgICBpZiAoIWZpbGUgfHwgIWZpbGUuYnVja2V0IHx8ICFmaWxlLmFjY2Vzc0tleUlkIHx8ICFmaWxlLnNlY3JldEFjY2Vzc0tleSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gaW5pdGlhbCBhd3MgY3JlZCBjaGVja1xuICAkc2NvcGUuaGFzQXdzU2V0dGluZ3MgPSBjaGVja0F3c1NldHRpbmdzKCk7XG5cbiAgLy8gV2F0Y2ggZm9yIGNoYW5nZXMsIHNvIHdlIGNhbiBzYXZlXG4gICRzY29wZS4kd2F0Y2goJ3Byb2plY3QnLCBmdW5jdGlvbihuViwgb1YpIHtcbiAgICBpZiAoblYgIT0gb1YpIHtcbiAgICAgICRzY29wZS5oYXNDaGFuZ2VzID0gdHJ1ZTtcblxuICAgICAgLy8gc2F2ZSB0aGUgZmlsZSBmb3IgY29udmVuaWVuY2VcbiAgICAgICRzY29wZS5zYXZlKCk7XG4gICAgfVxuICB9LCB0cnVlKTtcblxuICAvLyBUT0RPOiBzZXR1cCB2YWxpZGF0aW9uc1xuICAvLyBzYXZlIHRoZSBjdXJyZW50IHByb2plY3RcbiAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2F2ZVRpbWVyKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNhdmVUaW1lcik7XG4gICAgfVxuXG4gICAgLy8gdGhyb3R0bGUgdGhlIHNhdmVzLCBzaW5jZSB3ZSBzYXZlIG9uIGFueSBjaGFuZ2VzXG4gICAgc2F2ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgLy8gU2F2ZSB0ZWggcHJvamVjdG9pZFxuICAgICAgUHJvamVjdHMuc2F2ZSgkcm9vdFNjb3BlLnByb2plY3QpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgc2lkZWJhciB3aXRoIGNoYW5nZXNcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdTSURFUEFORUw6VVBEQVRFJywgcmVzKTtcblxuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmV2ZXJ0IG1vZGVsXG4gICAgICAgICAgYW5ndWxhci5jb3B5KCRyb290U2NvcGUucHJvamVjdCwgJHNjb3BlLm1hc3Rlcik7XG4gICAgICAgICAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXJyJywgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSwgMjAwKTtcbiAgfTtcblxuICAvLyBzeW5jIHRoaXMgcHJvamVjdCB0byBBV1NcbiAgJHNjb3BlLnN5bmNOb3cgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUuc3luY2luZyA9IHRydWU7XG4gICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdBTEVSVDpGSVJFJywgeyB0aXRsZTogJ1N5bmMgU3RhcnRpbmcnLCBkdXI6IDUsIHR5cGU6ICdpbmZvJyB9KTtcblxuICAgIFByb2plY3RzLnN5bmMoJHJvb3RTY29wZS5wcm9qZWN0LmlkKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICRzY29wZS5zeW5jaW5nID0gZmFsc2U7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6ICdTeW5jIENvbXBsZXRlJywgZHVyOiA1LCB0eXBlOiAnc3VjY2VzcycsIGljb246ICdjaGVjaycgfSk7XG4gICAgICB9XG5cbiAgICAgICwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICRzY29wZS5zeW5jaW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzeW5jTm93IGVycicsIGVycik7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6ICdTeW5jIEZhaWxlZCcsIGR1cjogNSwgdHlwZTogJ2Vycm9yJywgaWNvbjogJ3N0b3BlJyB9KTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIC8vIHJldmVydCB0aGUgY3VycmVudCBwcm9qZWN0XG4gICRzY29wZS5jYW5jZWxTYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN1cmUgPSBjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xlYXIgYWxsIHlvdXIgY2hhbmdlcz8nKTtcbiAgICBpZiAoc3VyZSkge1xuICAgICAgLy8gcHV0IHJldmVydCBtb2RlbCBpbnRvIHRoZSBwcm9qZWN0IG1vZGVsXG4gICAgICBhbmd1bGFyLmNvcHkoJHNjb3BlLm1hc3RlciwgJHJvb3RTY29wZS5wcm9qZWN0KTtcbiAgICAgICRzY29wZS5oYXNDaGFuZ2VzID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIC8vIGRlbGV0ZSB0aGUgcHJvamVjdCwgYW5kIHJlbW92ZSBmcm9tIHByb2plY3QgbGlzdHMsIHRoZW4gcmVkaXJlY3QgdG8gbWFpblxuICAkc2NvcGUuZGVsZXRlUHJvamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdXJlID0gY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIHByb2plY3Q/Jyk7XG4gICAgaWYgKHN1cmUpIHtcbiAgICAgIHZhciBwcm9qZWN0SUQgPSAkcm9vdFNjb3BlLnByb2plY3QuaWQ7XG5cbiAgICAgIFByb2plY3RzLnJlbW92ZShwcm9qZWN0SUQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ1NJREVQQU5FTDpSRU1PVkUnLCB7IGlkOiBwcm9qZWN0SUQgfSk7XG4gICAgICAgICAgJHN0YXRlLmdvKCdtYWluJyk7XG4gICAgICAgICAgJHJvb3RTY29wZS5wcm9qZWN0ID0ge307XG4gICAgICAgICAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnUHJvamVjdCBSZW1vdmVkIFN1Y2Nlc3NmdWxseScsIGR1cjogNSwgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnInLCBlcnIpO1xuICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ1NJREVQQU5FTDpSRU1PVkUnLCB7IGlkOiBwcm9qZWN0SUQgfSk7XG4gICAgICAgICAgJHN0YXRlLmdvKCdtYWluJyk7XG4gICAgICAgICAgJHJvb3RTY29wZS5wcm9qZWN0ID0ge307XG4gICAgICAgICAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkcyBhIG5ldyB2aWV3cG9ydCBpdGVtXG4gICRzY29wZS5hZGRWaWV3cG9ydCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdWaWV3cG9ydCA9IHtcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgIG5hbWU6IG51bGwsXG4gICAgICB3aWR0aDogbnVsbCxcbiAgICAgIGhlaWdodDogbnVsbFxuICAgIH07XG5cbiAgICBhZGROZXdUeXBlKCd2aWV3cG9ydHMnLCBuZXdWaWV3cG9ydCk7XG4gIH07XG5cbiAgLy8gQWRkcyBhIG5ldyBzZWxlY3RvciBpdGVtXG4gICRzY29wZS5hZGRTZWxlY3RvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdTZWxlY3RvciA9IHtcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgIHR5cGU6ICdjb250YWluZXInLFxuICAgICAgcXVlcnk6IG51bGxcbiAgICB9O1xuXG4gICAgYWRkTmV3VHlwZSgnc2VsZWN0b3JzJywgbmV3U2VsZWN0b3IpO1xuICB9O1xuXG4gIC8vIEFkZHMgYSBuZXcgY29va2llIGl0ZW1cbiAgJHNjb3BlLmFkZENvb2tpZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdDb29raWUgPSB7XG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICBuYW1lOiBudWxsLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBwYXRoOiBudWxsXG4gICAgfTtcblxuICAgIGFkZE5ld1R5cGUoJ2Nvb2tpZXMnLCBuZXdDb29raWUpO1xuICB9O1xuXG4gIC8vIGFjdGl2YXRlIGEgY29va2llL3ZpZXcvc2VsZWN0XG4gICRzY29wZS5hY3RpdmF0ZVR5cGUgPSBmdW5jdGlvbih0eXBlLCBpZCkge1xuICAgICRyb290U2NvcGUucHJvamVjdFt0eXBlXVtpZF0uYWN0aXZlID0gKCRyb290U2NvcGUucHJvamVjdFt0eXBlXVtpZF0uYWN0aXZlID09PSB0cnVlIHx8ICRyb290U2NvcGUucHJvamVjdFt0eXBlXVtpZF0uYWN0aXZlID09PSAndHJ1ZScpID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgLy8gc2F2ZSB0aGUgZmlsZSBmb3IgY29udmVuaWVuY2VcbiAgICAkc2NvcGUuc2F2ZSgpO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBhIGNvb2tpZS92aWV3L3NlbGVjdFxuICAkc2NvcGUuZGVsZXRlVHlwZUl0ZW0gPSBmdW5jdGlvbih0eXBlLCBpZCkge1xuICAgICRyb290U2NvcGUucHJvamVjdFt0eXBlXS5zcGxpY2UoaWQsIDEpO1xuXG4gICAgLy8gc2F2ZSB0aGUgZmlsZSBmb3IgY29udmVuaWVuY2VcbiAgICAkc2NvcGUuc2F2ZSgpO1xuICB9O1xuXG4gIC8vIFJlbW92ZXMgYWxsIGhpc3RvcnkgZGF0YVxuICAkc2NvcGUuY2xlYXJIaXN0b3J5ID0gZnVuY3Rpb24oKSB7XG4gICAgUHJvamVjdHMuY2xlYXJIaXN0b3J5KCRyb290U2NvcGUucHJvamVjdClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnQ2xlYXJlZCBBbGwgSGlzdG9yeSEnLCBkdXI6IDUsIHR5cGU6ICdzdWNjZXNzJywgaWNvbjogJ2hpc3RvcnknIH0pO1xuICAgICAgfVxuXG4gICAgICAsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnRXJyb3IgT2NjdXJyZWQhIFBsZWFzZSB0cnkgYWdhaW4uJywgZHVyOiA1LCB0eXBlOiAnZXJyb3InLCBpY29uOiAnc3RvcCcgfSk7XG4gICAgICB9KTtcbiAgfTtcblxufV0pO1xuIiwidmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuTVVHLmNvbnRyb2xsZXIoJ1NpZGVQYW5lbEN0cmwnLFxuWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckc3RhdGUnLCAnUHJvamVjdHMnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkc3RhdGUsIFByb2plY3RzKSB7XG4gICRzY29wZS5wcm9qZWN0cyA9IFtdO1xuXG4gIC8vIGdyYWIgYWxsIHByb2plY3RzIGxpc3RcbiAgJHNjb3BlLnByb2plY3RzID0gUHJvamVjdHMuZ2V0QWxsKCk7XG5cbiAgLy8gYWRkIG5ldyBwcm9qZWN0IHRvIHRoZSBwcm9qZWN0cyBsaXN0XG4gICRyb290U2NvcGUuJG9uKCdTSURFUEFORUw6TkVXUFJPSkVDVCcsIGZ1bmN0aW9uKGUsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MuaWQpIHsgcmV0dXJuOyB9XG5cbiAgICAkc2NvcGUucHJvamVjdHMudW5zaGlmdChhcmdzKTtcbiAgfSk7XG5cbiAgLy8gdXBkYXRlIHRoZSBwcm9qZWN0cyBsaXN0XG4gICRyb290U2NvcGUuJG9uKCdTSURFUEFORUw6VVBEQVRFJywgZnVuY3Rpb24oZSwgYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5pZCkgeyByZXR1cm47IH1cblxuICAgICRzY29wZS5wcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgIGlmIChvYmouaWQgPT09IGFyZ3MuaWQpIHtcbiAgICAgICAgJHNjb3BlLnByb2plY3RzW2lkeF0udGl0bGUgPSBhcmdzLnRpdGxlO1xuICAgICAgICAkc2NvcGUucHJvamVjdHNbaWR4XS50aW1lc3RhbXAgPSBhcmdzLnRpbWVzdGFtcDtcblxuICAgICAgICBpZiAoYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdKSB7XG4gICAgICAgICAgLy8gb25seSB1cGRhdGUgdG90YWxzIGlmIHdlIGhhdmUgdGhlbVxuICAgICAgICAgIGlmIChhcmdzLmJhdGNoSGlzdG9yeVthcmdzLmN1cnJlbnRCYXRjaF0uc3VjY2Vzcykge1xuICAgICAgICAgICAgJHNjb3BlLnByb2plY3RzW2lkeF0udG90YWxzLnN1Y2Nlc3MgPSBhcmdzLmJhdGNoSGlzdG9yeVthcmdzLmN1cnJlbnRCYXRjaF0uc3VjY2VzcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLndhcm5pbmcpIHtcbiAgICAgICAgICAgICRzY29wZS5wcm9qZWN0c1tpZHhdLnRvdGFscy53YXJuaW5nID0gYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLndhcm5pbmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFyZ3MuYmF0Y2hIaXN0b3J5W2FyZ3MuY3VycmVudEJhdGNoXS5lcnJvcikge1xuICAgICAgICAgICAgJHNjb3BlLnByb2plY3RzW2lkeF0udG90YWxzLmVycm9yID0gYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLmVycm9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhcmdzLmJhdGNoSGlzdG9yeVthcmdzLmN1cnJlbnRCYXRjaF0udmlld3MpIHtcbiAgICAgICAgICAgICRzY29wZS5wcm9qZWN0c1tpZHhdLnRvdGFscy52aWV3cyA9IGFyZ3MuYmF0Y2hIaXN0b3J5W2FyZ3MuY3VycmVudEJhdGNoXS52aWV3cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdXBkYXRlIHRoZSBwcm9qZWN0cyBsaXN0XG4gICRyb290U2NvcGUuJG9uKCdTSURFUEFORUw6UkVNT1ZFJywgZnVuY3Rpb24oZSwgYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5pZCkgeyByZXR1cm47IH1cblxuICAgICRzY29wZS5wcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgIGlmIChvYmouaWQgPT09IGFyZ3MuaWQpIHtcbiAgICAgICAgJHNjb3BlLnByb2plY3RzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICAkc2NvcGUuZ29Ub1Byb2plY3QgPSBmdW5jdGlvbihpZCkge1xuICAgIC8vIFRPRE86IGZpeCB0aGlzXG4gICAgLy8gdmFyIHR5cGUgPSAnc2V0dGluZ3MnO1xuICAgIHZhciB0eXBlID0gJ3J1bm5lcic7XG5cbiAgICAvLyBUT0RPOiBzZXR1cCB0byBmaWd1cmUgb3V0IGlmIHdlIG5lZWQgdG8gZ28gdG8gc2V0dGluZ3MsIG90aGVyd2lzZSBnbyB0byBydW5uZXJcbiAgICAkc3RhdGUuZ28oJ3Byb2plY3RzLicgKyB0eXBlLCB7IGlkOiBpZCB9KTtcbiAgICAkcm9vdFNjb3BlLmN1cnJlbnRQcm9qZWN0SWQgPSBpZDtcbiAgfVxuXG59XSk7XG4iLCIvKipcbiAqIENvbmZpZ1xuICovXG5NVUcuY29uc3RhbnQoJ0NvbmZpZycsIHtcbiAgRU5WOiAnU1RBR0UnLFxuICBTVEFHRToge1xuICB9LFxuICBQUk9EOiB7XG4gIH0sXG4gIENvbXBhcmU6IHtcbiAgICBlcnJvckNvbG9yOiB7XG4gICAgICByZWQ6IDI1NSxcbiAgICAgIGdyZWVuOiAwLFxuICAgICAgYmx1ZTogMjU1XG4gICAgfSxcbiAgICBlcnJvclR5cGU6ICdmbGF0JyxcbiAgICB0cmFuc3BhcmVuY3k6IDEsXG4gICAgbGFyZ2VJbWFnZVRocmVzaG9sZDogMFxuICB9XG59KTtcbiIsIk1VRy5jb25maWcoXG5bJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsXG5mdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cbiAgLy8gUm91dGVzXG4gIC8vIC9cbiAgLy8gL3Byb2plY3RzXG4gIC8vIC9wcm9qZWN0cy86aWQvcnVubmVyXG4gIC8vIC9wcm9qZWN0cy86aWQvaGlzdG9yeVxuICAvLyAvcHJvamVjdHMvOmlkL3NldHRpbmdzXG5cbiAgJHN0YXRlUHJvdmlkZXJcblxuICAvKipcbiAgICogQmFzZSBSb3V0ZVxuICAgKi9cbiAgLnN0YXRlKCdtYWluJywge1xuICAgIHVybDogJy8nLFxuICAgIHRlbXBsYXRlVXJsOiAnbWFpbi5odG1sJ1xuICB9KVxuICAuc3RhdGUoJ3ByZWZlcmVuY2VzJywge1xuICAgIHVybDogJy9wcmVmZXJlbmNlcycsXG4gICAgdGVtcGxhdGVVcmw6ICdwcmVmZXJlbmNlcy5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUHJlZmVyZW5jZXNDdHJsJ1xuICB9KVxuXG4gIC8qKlxuICAgKiBQcm9qZWN0IFJvdXRlc1xuICAgKi9cbiAgLnN0YXRlKCdwcm9qZWN0cycsIHtcbiAgICB1cmw6ICcvcHJvamVjdHMvOmlkJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2plY3RzLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0Q3RybCdcbiAgfSlcbiAgLnN0YXRlKCdwcm9qZWN0cy5zZXR0aW5ncycsIHtcbiAgICB1cmw6ICcvc2V0dGluZ3MnLFxuICAgIHRlbXBsYXRlVXJsOiAncHJvamVjdHMuc2V0dGluZ3MuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1Byb2plY3RTZXR0aW5nc0N0cmwnXG4gIH0pXG4gIC5zdGF0ZSgncHJvamVjdHMucnVubmVyJywge1xuICAgIHVybDogJy9ydW5uZXInLFxuICAgIHRlbXBsYXRlVXJsOiAncHJvamVjdHMucnVubmVyLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0UnVubmVyQ3RybCdcbiAgfSlcbiAgLnN0YXRlKCdwcm9qZWN0cy5oaXN0b3J5Jywge1xuICAgIHVybDogJy9oaXN0b3J5JyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2plY3RzLmhpc3RvcnkuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1Byb2plY3RIaXN0b3J5Q3RybCdcbiAgfSlcblxuICAvKipcbiAgICogU3RhdGljIFJvdXRlc1xuICAgKi9cblxuICAvLyAuc3RhdGUoJ21haW4uNDA0Jywge1xuICAvLyAgICAgdXJsOiBcIi80MDRcIixcbiAgLy8gICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy80MDQuaHRtbFwiLFxuICAvLyAgICAgaXNFeHRlcm5hbDogdHJ1ZVxuICAvLyB9KVxuXG4gIC8vIEVuZCBvZiB0aGUgd29ybGRcbiAgO1xuXG4gIC8vIHVybCByZS1yb3V0aW5nXG4gIC8vICR1cmxSb3V0ZXJQcm92aWRlclxuICAvLyAgIC53aGVuKCcvcHJvamVjdHMnLCAnLycpXG4gIC8vICAgLndoZW4oJy9wcm9qZWN0cy8nLCAnLycpO1xuXG4gIC8vIGlmIG5vbmUgb2YgdGhlIGFib3ZlIHN0YXRlcyBhcmUgbWF0Y2hlZCwgdXNlIHRoaXMgYXMgdGhlIGZhbGxiYWNrXG4gICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcblxufV0pO1xuIiwiTVVHLnJ1bihbJyRyb290U2NvcGUnLCAnJGh0dHAnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJGh0dHApIHtcblxuICAvLyBoZWFkZXJzXG4gIHZhciAkY29tbW9uID0gJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb247XG4gICRjb21tb25bJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKCckc3RhdGVDaGFuZ2VFcnJvcicsIGVycm9yKTtcbiAgfSk7XG5cbn1dKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==