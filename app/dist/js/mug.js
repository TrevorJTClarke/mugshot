var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{}}),MUG.run(["$rootScope","$http",function(n,e){var t=e.defaults.headers.common;t["Content-Type"]="application/json"}]),MUG.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(n,e,t){t.html5Mode({enabled:!0,requireBase:!1}),n.state("main",{url:"/",templateUrl:"project-settings.html"}),e.otherwise("/")}]),MUG.controller("MainCtrl",["$rootScope","$scope","Config","$http",function(n,e,t,r){}]),MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","Config","$http",function(n,e,t,r){}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(n,e,t){var r=parseInt(t.fadeIn)||10;e.addClass("fade-in"),setTimeout(function(){e.css("opacity","1")},r)}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(n,e,t){return{scope:{},link:function(r,o,i,a){function s(n){var o=+new Date,i=n.msg,a=n.icon?n.icon:p,s=d.replace("BODY",i).replace("ICON",a),v=t(s)(r);v[0].id=o,g=o,m.append(v);var h=m.find("#"+o);c(h,n.type),n.callback&&h.find(".msg-action").addClass("show"),e(function(){h.addClass("add")},20),l=e(function(){u(h)},f)}function u(n){if(!n&&g)n=m.find("#"+g);else if(!n)return;n.removeClass("add"),n.addClass("remove"),e(function(){angular.element(n).remove()},300)}function c(n,e){n.removeClass("msg-info"),n.removeClass("msg-warn"),e&&n.addClass("msg-"+e)}var l,d='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',m=angular.element(o),f=5e3,g="",p="info";r.body="",r.callback=null,r.icon=p,r.action=function(){var n=m.find("#"+this.id);r.callback(),u(n)},n.$on("MSGCENTER:FIRE",function(n,e){e.msg&&(window.clearTimeout(l),u(),e.dur&&(f=1e3*e.dur),e.callback&&(r.callback=e.callback),s(e))})}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(n,e){return{restrict:"EA",link:function(t,r,o){var i;o.$observe("fromTime",function(e){i=n.parse(e)}),t.$watch(function(){return e.getTime()-i},function(e){angular.element(r).text(n.inWords(e))})}}}]),MUG.factory("nowTime",["$timeout",function(n){var e=Date.now(),t=function(){n(function(){e=Date.now(),t()},1e3)};return t(),{getTime:function(){return e}}}]),MUG.factory("timeAgo",function(){function n(n){var e=n.toString().slice(0,13);return 13==e.length?parseInt(e):n}var e={};return e.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},e.inWords=function(n){function t(e,t){var o=angular.isFunction(e)?e(t,n):e,i=r.numbers&&r.numbers[t]||t;return o.replace(/%d/i,i)}var r=e.settings.strings,o=r.prefixAgo,i=r.suffixAgo;e.settings.allowFuture&&0>n&&(o=r.prefixFromNow,i=r.suffixFromNow);var a=Math.abs(n)/1e3,s=a/60,u=s/60,c=u/24,l=c/365,d=45>a&&t(r.seconds,Math.round(a))||90>a&&t(r.minute,1)||45>s&&t(r.minutes,Math.round(s))||90>s&&t(r.hour,1)||24>u&&t(r.hours,Math.round(u))||42>u&&t(r.day,1)||30>c&&t(r.days,Math.round(c))||45>c&&t(r.month,1)||365>c&&t(r.months,Math.round(c/30))||1.5>l&&t(r.year,1)||t(r.years,Math.round(l)),m=void 0===r.wordSeparator?" ":r.wordSeparator;return[o,d,i].join(m).trim()},e.parse=function(e){if(angular.isNumber(e)){e+="";var t=n(e);return parseInt(t,10)}var r=(e||"").trim();return r=r.replace(/\.\d+/,""),r=r.replace(/-/,"/").replace(/-/,"/"),r=r.replace(/T/," ").replace(/Z/," UTC"),r=r.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(r)},e}),MUG.filter("timeAgo",["nowTime","timeAgo",function(n,e){return function(t){var r=e.parse(t),o=n.getTime()-r;return e.inWords(o)}}]);
//# sourceMappingURL=data:application/json;base64,