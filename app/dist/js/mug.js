var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.directive("alert",["$rootScope","$timeout","$compile","$templateCache",function(e,t,r,n){return{restrict:"E",replace:!0,template:'<div class="alert-parent"></div>',scope:{},link:function(o,i,c,a){function s(n){var o=+new Date,i=(n.title,n.icon?n.icon:null,e.$new(!0));i.alert={},i.alert.id=o,i.alert.icon=n.icon?n.icon:null,i.alert.type=n.type?n.type:"info",i.alert.title=n.title,i.alert.action=n.callback?function(){this.id;n.callback(),u(this)}:null;var c=r(p)(i);c[0].id=o,m=o,f.append(c),c.addClass(v),t(function(){c.addClass(h)},20),l=t(function(){u(c)},d)}function u(e){if(!e&&m)e=angular.element(document.getElementById(m));else{if(!e)return;e&&(e=angular.element(e))}e.removeClass(h),t(function(){e.remove()},300)}var l,p=n.get("alert.html"),f=angular.element(i),d=5e3,m="",v="alert-active",h="alert-visible";e.$on("ALERT:FIRE",function(e,t){t.title&&(window.clearTimeout(l),u(),t.dur&&(d=1e3*t.dur),s(t))})}}}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(e,t,r){var n=parseInt(r.fadeIn)||10;t.addClass("fade-in"),setTimeout(function(){t.css("opacity","1")},n)}}}]),MUG.directive("modal",["$timeout","$compile","$rootScope",function(e,t,r){return{restrict:"E",replace:!0,templateUrl:"modal.html",scope:{},link:function(e,t,n){function o(t){var n=t.remoteSource?t.remoteSource:t.source;e.compareItem.a=t.remoteSource?n:"screens/reference/"+r.project.id+"/"+n.replace(r.project.currentBatch+".png",r.project.currentReference+".png"),e.compareItem.b=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n,e.compareItem.c=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n.replace(".png","_diff.png")}var i="modal-open",c="modal-visible";e.project=angular.copy(r.project),e.activeOption="sides",e.opacityRange={},e.currentIndex=0,e.activeItem={},e.compareItem={a:"",b:"",c:""},e.viewer={items:[]},e.opacityRange={amount:.8,inverse:.2,percent:"80%"},e.$watch("opacityRange.amount",function(t,r){t!==r&&(e.opacityRange.inverse=(1-t).toFixed(2),e.opacityRange.percent=Math.round(100*t)+"%")}),e.optionMode=function(t){e.activeOption=t},r.$on("MODAL:CLOSE",function(t,r){e.close()}),r.$on("MODAL:OPEN",function(n,a){a&&a.type&&(e.currentIndex=0,e.project=angular.copy(r.project),"preview"===a.type&&(e.activeItem=a.item,e.viewer=a.project||{},e.viewer.items=null,e.compareItem.a="screens/"+e.activeItem.type+"/"+r.project.id+"/"+e.activeItem.source),"batch"===a.type&&a.items.length>0&&(e.activeItem=a.items[e.currentIndex],e.viewer=a.project||{},e.viewer.items=a.items,o(e.activeItem)),t.addClass(i),setTimeout(function(){t.addClass(c)},30))}),e.close=function(){t.removeClass(c),setTimeout(function(){t.removeClass(i)},230)},e.modalActionNav=function(t){if(!(e.viewer.items.length<1)){var r,n=e.viewer.items.length-1;r="right"===t?e.currentIndex===n?0:e.currentIndex+1:0===e.currentIndex?n:e.currentIndex-1,e.activeItem=e.viewer.items[r],e.currentIndex=r,o(e.activeItem)}},e.goToIndex=function(t){e.currentIndex!==t&&(e.activeItem=e.viewer.items[t],e.currentIndex=t,o(e.activeItem))}}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(e,t,r){return{scope:{},link:function(n,o,i,c){function a(e){var o=+new Date,i=e.msg,c=e.icon?e.icon:v,a=p.replace("BODY",i).replace("ICON",c),h=r(a)(n);h[0].id=o,m=o,f.append(h);var g=f.find("#"+o);u(g,e.type),e.callback&&g.find(".msg-action").addClass("show"),t(function(){g.addClass("add")},20),l=t(function(){s(g)},d)}function s(e){if(!e&&m)e=f.find("#"+m);else if(!e)return;e.removeClass("add"),e.addClass("remove"),t(function(){angular.element(e).remove()},300)}function u(e,t){e.removeClass("msg-info"),e.removeClass("msg-warn"),t&&e.addClass("msg-"+t)}var l,p='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',f=angular.element(o),d=5e3,m="",v="info";n.body="",n.callback=null,n.icon=v,n.action=function(){var e=f.find("#"+this.id);n.callback(),s(e)},e.$on("MSGCENTER:FIRE",function(e,t){t.msg&&(window.clearTimeout(l),s(),t.dur&&(d=1e3*t.dur),t.callback&&(n.callback=t.callback),a(t))})}}}]);var P=require("./vendor/core/preloader");MUG.directive("preloader",["$rootScope","$timeout",function(e,t){return{replace:!0,restrict:"E",scope:{},template:'<div class="preloader"></div>',link:function(r,n,o,i){function c(e,t){if(t&&t.msg){l=t.msg;var r;switch(l){case"Opening Browser Session":r=0;break;case"Capturing Screens":r=1}l!==p&&s&&s.animate&&s.animate(r,30,function(){p=l})}}function a(){u.addClass(f)}var s,u,l,p,f="loading";t(function(){s=new P.Browser,s.init(),u=document.querySelector(".preloader"),u.appendChild(s.instance),s.drawBrowser()},30),e.$on("PRELOADER:UPDATE",c),e.$on("PRELOADER:OFF",a)}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(e,t){return{restrict:"EA",link:function(r,n,o){var i;o.$observe("fromTime",function(t){i=e.parse(t)}),r.$watch(function(){return t.getTime()-i},function(t){angular.element(n).text(e.inWords(t))})}}}]);var fs=require("fs"),async=require("async");MUG.factory("Compare",["$q","Config",function(e,t){function r(e,t){fs.readFile(o+e,"base64",t)}function n(n,o){var c=e.defer(),a={};return resemble.outputSettings(t.Compare),async.map([n,o],r,function(e,t){var r=i+t[0],n=i+t[1];e&&c.reject(e),resemble(r).compareTo(n).ignoreColors().onComplete(function(e){a.report=e,a.src=e.getImageDataUrl(),c.resolve(a)})}),c.promise}var o=__dirname+"/",i="data:image/png;base64,",c=["passed","warning","failed"];return{runSingle:n,getStatus:function(e){var t=parseFloat(e.misMatchPercentage);return.1>t?e.isSameDimensions===!1?c[1]:c[0]:t>.1&&2>t?c[1]:c[2]}}}]),MUG.factory("nowTime",["$timeout",function(e){var t=Date.now(),r=function(){e(function(){t=Date.now(),r()},1e3)};return r(),{getTime:function(){return t}}}]);var fs=require("fs"),path=require("path"),AWS=require("./vendor/core/aws");MUG.factory("Projects",["$q",function(e){function t(e){return"number"==typeof e&&e===parseInt(e,10)&&(e=Array(e+1).join("x")),e.replace(/x/g,function(){var e=Math.round(61*Math.random())+48;return e=e>57?e+7>90?e+13:e+7:e,String.fromCharCode(e)})}function r(e){e=e||0;var r=t(12);return{id:r,title:"Project "+(parseInt(e,10)+1),timestamp:+new Date,totals:{success:null,warning:null,error:null,views:0}}}function n(e){t(12);return{batchHistory:{},currentBatch:null,currentReference:null,id:e.id,title:e.title,timestamp:e.timestamp,viewports:[],selectors:[],cookies:[],meta:{url:null,readyEvent:null,delay:null,misMatchThreshold:null}}}function o(e,t){var r;try{r=fs.readFileSync(e,"utf8")}catch(n){if("ENOENT"===n.code)return t||{};throw n}return JSON.parse(r)}function i(e){try{var t=fs.readdirSync(e)}catch(r){return}if(t.length>0)for(var n=0;n<t.length;n++){var o=path.join(e,t[n]);fs.statSync(o).isFile()?fs.unlinkSync(o):rmDir(o)}}function c(t,r){var n=e.defer();return fs.writeFile(t,JSON.stringify(r),function(e){return e?void n.reject(e):void n.resolve()}),n.promise}function a(t){var r=e.defer();return fs.unlink(t,function(e){return e?void r.reject(e):void r.resolve()}),r.promise}var s=__dirname+"/projects.json",u=__dirname+"/projects/";return{get:function(e,t){return o(__dirname+e,t)},getAll:function(){return o(s,[])},getById:function(e){return o(u+e+".json")},getTypeById:function(e,t){return o(u+e+"_"+t+".json",[])},validate:function(e){var t=e.cookies,r=e.viewports,n=e.selectors,o=e.title,i=e.meta.url,c=!0;return!r||!n||!o||!i||r.length<1||n.length<1?!1:(r&&r.map(function(e,t){e.width&&e.height&&e.name||(c=!1)}),n&&n.map(function(e,t){e.query&&e.type||(c=!1)}),t&&t.map(function(e,t){e.name&&e.path&&e.value||(c=!1)}),c)},createNew:function(){var t=e.defer(),o=JSON.parse(fs.readFileSync(s,"utf8")),i=r(o.length),c=n(i);return o.unshift(i),fs.writeFile(s,JSON.stringify(o),function(e){return e?void t.reject(e):void fs.writeFile(u+i.id+".json",JSON.stringify(c),function(e){return e?void t.reject(e):void fs.writeFile(u+i.id+"_history.json",JSON.stringify([]),function(e){return e?void t.reject(e):void t.resolve(i)})})}),t.promise},save:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(s,"utf8"));return n.map(function(e,r){e.id===t.id&&(n[r].title=t.title,n[r].timestamp=+new Date)}),fs.writeFile(u+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve(t)})}),r.promise},remove:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(s,"utf8"));return n.map(function(e,r){e.id===t&&n.splice(r,1)}),fs.unlink(u+t+".json",function(e){return e?void r.reject(e):void fs.unlink(u+t+"_history.json",function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve()})})}),r.promise},clearHistory:function(t){var r=e.defer(),n=o(s,[]);return t.currentBatch=null,t.currentReference=null,t.batchHistory={},n.map(function(e,r){e.id===t.id&&(n[r].totals.success=0,n[r].totals.warning=0,n[r].totals.error=0,n[r].totals.views=0)}),this.cleanImageFiles(t),fs.writeFile(u+t.id+"_history.json",JSON.stringify([]),function(e){return e?void r.reject(e):void fs.writeFile(u+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve()})})}),r.promise},sync:function(t){if(t){for(var r=this,n=e.defer(),o=this.getById(t),i=this.getTypeById(t,"history"),c=[],a=0;a<i.length;a++){var s=i[a];if(-1===s.source.search("amazon")){var u=s.source,l=s.type,p=__dirname+"/screens/"+l+"/"+o.id+"/"+u;c.push({key:l+"/"+u,path:p})}}return AWS.init().upload(c,o.id).then(function(e){r.cleanAfterSync(o,e).then(n.resolve,n.reject)},function(e){n.reject(e)}),n.promise}},cleanAfterSync:function(t,r){var n=e.defer(),i=o(u+t.id+"_history.json",[]),s=[],l=[];t.updatedAt=+new Date;for(var p=0;p<r.length;p++){var f=r[p],d=f.split("/"),m=d[d.length-2],v=d[d.length-1];i.map(function(e,n){if(e.source===v&&"compare"===m){var o=__dirname+"/screens/"+m+"/"+t.id+"/"+v,c=a(o),s=a(o.replace(".","_diff."));delete i[n].source,i[n].remoteSource=r[p],l.push(c),l.push(s)}})}var h=__dirname+"/projects/"+t.id+".json",g=h.replace(".json","_history.json"),y=c(h,t),j=c(g,i);l.unshift(y),l.unshift(j),s.push({key:t.id,path:h}),s.push({key:t.id+"_history",path:g});var w=AWS.init().upload(s,t.id);return l.unshift(w),e.all(l).then(n.resolve,n.reject),n.promise},cleanImageFiles:function(e){var t=__dirname+"/screens/BASE/"+e.id,r=t.replace("BASE","compare"),n=t.replace("BASE","reference");i(r),i(n)}}}]),MUG.factory("timeAgo",function(){function e(e){var t=e.toString().slice(0,13);return 13==t.length?parseInt(t):e}var t={};return t.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},t.inWords=function(e){function r(t,r){var o=angular.isFunction(t)?t(r,e):t,i=n.numbers&&n.numbers[r]||r;return o.replace(/%d/i,i)}var n=t.settings.strings,o=n.prefixAgo,i=n.suffixAgo;t.settings.allowFuture&&0>e&&(o=n.prefixFromNow,i=n.suffixFromNow);var c=Math.abs(e)/1e3,a=c/60,s=a/60,u=s/24,l=u/365,p=45>c&&r(n.seconds,Math.round(c))||90>c&&r(n.minute,1)||45>a&&r(n.minutes,Math.round(a))||90>a&&r(n.hour,1)||24>s&&r(n.hours,Math.round(s))||42>s&&r(n.day,1)||30>u&&r(n.days,Math.round(u))||45>u&&r(n.month,1)||365>u&&r(n.months,Math.round(u/30))||1.5>l&&r(n.year,1)||r(n.years,Math.round(l)),f=void 0===n.wordSeparator?" ":n.wordSeparator;return[o,p,i].join(f).trim()},t.parse=function(t){if(angular.isNumber(t)){t+="";var r=e(t);return parseInt(r,10)}var n=(t||"").trim();return n=n.replace(/\.\d+/,""),n=n.replace(/-/,"/").replace(/-/,"/"),n=n.replace(/T/," ").replace(/Z/," UTC"),n=n.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(n)},t}),MUG.filter("timeAgo",["nowTime","timeAgo",function(e,t){return function(r){var n=t.parse(r),o=e.getTime()-n;return t.inWords(o)}}]);var ipc=require("ipc");MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","Projects",function(e,t,r,n,o){e.currentProjectId="",t.createNewProject=function(){o.createNew().then(function(t){e.$broadcast("SIDEPANEL:NEWPROJECT",t),r.go("projects.settings",{id:t.id})},function(e){console.log("err",e)})},ipc.on("NAVIGATE:TO",function(e){e&&e.location&&(console.log("NAVIGATE:TO",e),r.go(e.location))})}]);var fs=require("fs"),AWS=require("./vendor/core/aws");MUG.controller("PreferencesCtrl",["$rootScope","$scope","$state",function(e,t,r){t.awsConfig={bucket:"",accessKeyId:"",secretAccessKey:""},t.awsConfig=AWS.getConfig(),t.save=function(){AWS.setConfig(t.awsConfig)}}]),MUG.controller("ProjectCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){e.project=n.getById(r.id)}]),MUG.controller("ProjectHistoryCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){t.activeFilter="All",t.activeFilterQuery="",t.historyItems=n.getTypeById(r.id,"history"),t.changeFilter=function(e){t.activeFilter=e,t.activeFilterQuery="All"==e?"":e},t.previewItem=function(t){e.$emit("MODAL:OPEN",{type:"preview",item:t,project:e.project})}}]);var ipc=require("ipc");MUG.controller("ProjectRunnerCtrl",["$rootScope","$scope","$timeout","$stateParams","Projects",function(e,t,r,n,o){function i(e){function r(e){if(e.status){var r=0;switch(e.status){case"warning":r=1;break;case"failed":r=2}n[r].items.unshift(e),t.activeData[n[r].type]=t.activeData[n[r].type]+1}}if(!e||e.length<1)return t.hasReference=!1,[];t.activeData={},t.activeData.success=0,t.activeData.warning=0,t.activeData.error=0;var n=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];return e.map(function(e,n){e.batch===t.currentBatch&&r(e)}),t.hasReference=!0,n}function c(){if(null!==e.project.currentBatch){var r=(void 0!==typeof e.project.currentBatch?e.project.currentBatch:0,o.getTypeById(n.id,"history"));t.batchItems=i(r),t.runningType=e.project.currentReference>=e.project.currentBatch?"reference":"compare"}}function a(){var t=o.validate(e.project);return t||e.$broadcast("ALERT:FIRE",{title:"Please finish configuring settings!",dur:5,type:"error",icon:"stop"}),t}function s(){t.hasSettings=a(),t.hasReference=null!==e.project.currentReference,t.currentBatch=e.project.currentBatch,"reference"===t.runningType?t.hasCompare=!1:(t.hasCompare=null!==e.project.currentBatch&&0!==e.project.currentBatch,t.hasCompare=e.project.currentReference<=e.project.currentBatch)}function u(){e.project=o.getById(e.project.id,"history"),t.activeData=e.project&&e.project.batchHistory?e.project.batchHistory[t.currentBatch]:null,e.$emit("SIDEPANEL:UPDATE",e.project)}function l(){void 0!==typeof e.project.meta.autoSyncAws&&e.project.meta.autoSyncAws===!0&&(e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:3,type:"info"}),o.sync(e.project.id).then(function(t){e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:3,type:"success",icon:"check"})},function(t){console.log("syncNow err",t),e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})}))}function p(r){r&&r.msg&&r.percent&&(t.progress.percent=parseInt(r.percent,10),t.progress.title=r.msg?r.msg:t.progress.title,e.$emit("PRELOADER:UPDATE",r))}function f(){u(),c(),s(),l(),t.processing=!1}function d(e){console.log("RUNNER:FAILED reason",e),t.processing=!1}t.processing=!1,t.hasSettings=!1,t.hasReference=!1,t.hasCompare=!1,t.runningType="reference",t.batchItems=[],t.activeData={},t.currentBatch=e.project.currentBatch||0,t.progress={percent:0,title:"Starting"},u(),c(),s(),t.previewBatch=function(t){e.$emit("MODAL:OPEN",{type:"batch",items:t,project:e.project})},t.newCompare=function(){var r=a();r&&(t.runningType="compare",t.processing=!0,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"compare",projectId:e.project.id}))},t.newReference=function(){var r=a();r&&(t.processing=!0,t.runningType="reference",t.hasCompare=!1,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"reference",projectId:e.project.id}))},ipc.on("RUNNER:PROGRESS",p),ipc.on("RUNNER:COMPLETE",f),ipc.on("RUNNER:FAILED",d)}]);var fs=require("fs");MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){function o(t,r){e.project[t].push(r)}function i(){var e=n.get("/config/aws.json",{});return e&&e.bucket&&e.accessKeyId&&e.secretAccessKey?!0:!1}var c;t.syncing=!1,t.selectorTypes=["container","hide","remove"],t.hasChanges=!1,t.hasAwsSettings=!1,t.master={},angular.copy(e.project,t.master),t.hasAwsSettings=i(),t.$watch("project",function(e,r){e!=r&&(t.hasChanges=!0,t.save())},!0),t.save=function(){c&&window.clearTimeout(c),c=setTimeout(function(){n.save(e.project).then(function(r){e.$emit("SIDEPANEL:UPDATE",r),angular.copy(e.project,t.master),t.hasChanges=!1},function(e){console.log("err",e)})},200)},t.syncNow=function(){t.syncing=!0,e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:5,type:"info"}),n.sync(e.project.id).then(function(r){t.syncing=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:5,type:"success",icon:"check"})},function(r){t.syncing=!1,console.log("syncNow err",r),e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})})},t.cancelSave=function(){var r=confirm("Are you sure you want to clear all your changes?");r&&(angular.copy(t.master,e.project),t.hasChanges=!1)},t.deleteProject=function(){var o=confirm("Are you sure you want to delete this project?");if(o){var i=e.project.id;n.remove(i).then(function(n){e.$emit("SIDEPANEL:REMOVE",{id:i}),r.go("main"),e.project={},t.hasChanges=!1,e.$broadcast("ALERT:FIRE",{title:"Project Removed Successfully",dur:5,type:"success"})},function(n){console.log("err",n),e.$emit("SIDEPANEL:REMOVE",{id:i}),r.go("main"),e.project={},t.hasChanges=!1})}},t.addViewport=function(){var e={active:!0,name:null,width:null,height:null};o("viewports",e)},t.addSelector=function(){var e={active:!0,type:"container",query:null};o("selectors",e)},t.addCookie=function(){var e={active:!0,name:null,value:null,path:null};o("cookies",e)},t.activateType=function(r,n){e.project[r][n].active=e.project[r][n].active===!0||"true"===e.project[r][n].active?!1:!0,t.save()},t.deleteTypeItem=function(r,n){e.project[r].splice(n,1),t.save()},t.clearHistory=function(){n.clearHistory(e.project).then(function(t){e.$broadcast("ALERT:FIRE",{title:"Cleared All History!",dur:5,type:"success",icon:"history"})},function(t){e.$broadcast("ALERT:FIRE",{title:"Error Occurred! Please try again.",dur:5,type:"error",icon:"stop"})})}}]);var fs=require("fs");MUG.controller("SidePanelCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){t.projects=[],t.projects=n.getAll(),e.$on("SIDEPANEL:NEWPROJECT",function(e,r){r&&r.id&&t.projects.unshift(r)}),e.$on("SIDEPANEL:UPDATE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&(t.projects[n].title=r.title,t.projects[n].timestamp=r.timestamp,r.batchHistory[r.currentBatch]&&(r.batchHistory[r.currentBatch].success&&(t.projects[n].totals.success=r.batchHistory[r.currentBatch].success),r.batchHistory[r.currentBatch].warning&&(t.projects[n].totals.warning=r.batchHistory[r.currentBatch].warning),r.batchHistory[r.currentBatch].error&&(t.projects[n].totals.error=r.batchHistory[r.currentBatch].error),r.batchHistory[r.currentBatch].views&&(t.projects[n].totals.views=r.batchHistory[r.currentBatch].views)))})}),e.$on("SIDEPANEL:REMOVE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&t.projects.splice(n,1)})}),t.goToProject=function(t){var n="runner";r.go("projects."+n,{id:t}),e.currentProjectId=t}}]),MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{},Compare:{errorColor:{red:255,green:0,blue:255},errorType:"flat",transparency:1,largeImageThreshold:0}}),MUG.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("main",{url:"/",templateUrl:"main.html"}).state("preferences",{url:"/preferences",templateUrl:"preferences.html",controller:"PreferencesCtrl"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html",controller:"ProjectSettingsCtrl"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html",controller:"ProjectRunnerCtrl"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html",controller:"ProjectHistoryCtrl"}),t.otherwise("/")}]),MUG.run(["$rootScope","$http",function(e,t){var r=t.defaults.headers.common;r["Content-Type"]="application/json",e.$on("$stateChangeError",function(e,t,r,n,o,i){console.log("$stateChangeError",i)})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFsZXJ0LmpzIiwiZmFkZWluLmpzIiwibW9kYWwuanMiLCJtc2djZW50ZXIuanMiLCJwcmVsb2FkZXIuanMiLCJ0aW1lYWdvLmpzIiwiY29tcGFyZS5qcyIsIm5vd3RpbWUuanMiLCJwcm9qZWN0cy5qcyIsInRpbWUtYWdvLmpzIiwibWFpbmN0cmwuanMiLCJwcmVmZXJlbmNlc2N0cmwuanMiLCJwcm9qZWN0Y3RybC5qcyIsInByb2plY3RoaXN0b3J5Y3RybC5qcyIsInByb2plY3RydW5uZXJjdHJsLmpzIiwicHJvamVjdHNldHRpbmdzY3RybC5qcyIsInNpZGVwYW5lbGN0cmwuanMiLCJjb25maWcuanMiLCJyb3V0ZXMuanMiLCJpbml0LmpzIl0sIm5hbWVzIjpbIk1VRyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJkaXJlY3RpdmUiLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCIkY29tcGlsZSIsIiR0ZW1wbGF0ZUNhY2hlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwidGVtcGxhdGUiLCJzY29wZSIsImxpbmsiLCJlbCIsImF0dHJzIiwiY3RybCIsInNob3dNZXNzYWdlIiwiZGF0YSIsIl9pZCIsIkRhdGUiLCIkdG1wU2NvcGUiLCJ0aXRsZSIsImljb24iLCIkbmV3IiwiYWxlcnQiLCJpZCIsInR5cGUiLCJhY3Rpb24iLCJjYWxsYmFjayIsInRoaXMiLCJjbGVhckVsIiwiYWxlcnRFbCIsImFsZXJ0VGVtcGxhdGUiLCJwcmV2aW91c0lkIiwiX2VsIiwiYXBwZW5kIiwiYWRkQ2xhc3MiLCJhbGVydEFjdGl2ZSIsImFsZXJ0VmlzaWJsZSIsInRpbWVyIiwiZHVyYXRpb24iLCJlbGVtIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsImdldCIsIiRvbiIsImUiLCJ3aW5kb3ciLCJjbGVhclRpbWVvdXQiLCJkdXIiLCJvZmZzZXQiLCJwYXJzZUludCIsImZhZGVJbiIsInNldFRpbWVvdXQiLCJjc3MiLCJ0ZW1wbGF0ZVVybCIsIiRzY29wZSIsIiRlbGVtZW50IiwiJGF0dHIiLCJzZXRBY3RpdmVJdGVtIiwiaW1hZ2VTcmMiLCJyZW1vdGVTb3VyY2UiLCJzb3VyY2UiLCJjb21wYXJlSXRlbSIsImEiLCJwcm9qZWN0IiwiY3VycmVudEJhdGNoIiwiY3VycmVudFJlZmVyZW5jZSIsImIiLCJjIiwibW9kYWxBY3RpdmUiLCJtb2RhbFZpc2libGUiLCJjb3B5IiwiYWN0aXZlT3B0aW9uIiwib3BhY2l0eVJhbmdlIiwiY3VycmVudEluZGV4IiwiYWN0aXZlSXRlbSIsInZpZXdlciIsIml0ZW1zIiwiYW1vdW50IiwiaW52ZXJzZSIsInBlcmNlbnQiLCIkd2F0Y2giLCJudiIsIm92IiwidG9GaXhlZCIsIk1hdGgiLCJyb3VuZCIsIm9wdGlvbk1vZGUiLCJhcmdzIiwiY2xvc2UiLCJpdGVtIiwibGVuZ3RoIiwibW9kYWxBY3Rpb25OYXYiLCJuZXh0SWR4IiwidG90YWwiLCJnb1RvSW5kZXgiLCJpZHgiLCJuZXdCb2R5IiwibXNnIiwibmV3SWNuIiwiZGVmYXVsdEljb24iLCJtc2dUZW1wbGF0ZSIsIm5ld01lc3NhZ2UiLCJtc2dFbCIsImZpbmQiLCJjaGFuZ2VUeXBlIiwiYm9keSIsImFjdGlvbkVsIiwiUCIsInJlcXVpcmUiLCJ1cGRhdGVQcmVsb2FkZXIiLCJwcmV2aW91c1RpdGxlIiwiQiIsImFuaW1hdGUiLCJyZXNldFByZWxvYWRlciIsImxvYWRpbmciLCJCcm93c2VyIiwiaW5pdCIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsImluc3RhbmNlIiwiZHJhd0Jyb3dzZXIiLCJ0aW1lQWdvIiwibm93VGltZSIsImZyb21UaW1lIiwiJG9ic2VydmUiLCJ2YWx1ZSIsInBhcnNlIiwiZ2V0VGltZSIsInRleHQiLCJpbldvcmRzIiwiZnMiLCJhc3luYyIsImZhY3RvcnkiLCIkcSIsIkNvbmZpZyIsInJlYWRBc3luYyIsImZpbGUiLCJyZWFkRmlsZSIsImZpbGVEaXJQcmVmaXgiLCJjb21wYXJlU2luZ2xlIiwiZGZkIiwiZGVmZXIiLCJvdXRwdXQiLCJyZXNlbWJsZSIsIm91dHB1dFNldHRpbmdzIiwiQ29tcGFyZSIsIm1hcCIsImVyciIsInJlc3VsdHMiLCJhRGF0YSIsImltYWdlUHJlZml4IiwiYkRhdGEiLCJyZWplY3QiLCJjb21wYXJlVG8iLCJpZ25vcmVDb2xvcnMiLCJvbkNvbXBsZXRlIiwiZGlmZkRhdGEiLCJyZXBvcnQiLCJzcmMiLCJnZXRJbWFnZURhdGFVcmwiLCJyZXNvbHZlIiwicHJvbWlzZSIsIl9fZGlybmFtZSIsInN0YXR1c1R5cGVzIiwicnVuU2luZ2xlIiwiZ2V0U3RhdHVzIiwibWlzTWF0Y2hWYWx1ZSIsInBhcnNlRmxvYXQiLCJtaXNNYXRjaFBlcmNlbnRhZ2UiLCJpc1NhbWVEaW1lbnNpb25zIiwibm93IiwidXBkYXRlVGltZSIsInBhdGgiLCJBV1MiLCJjcmVhdGVVVUlEIiwicyIsIkFycmF5Iiwiam9pbiIsIm4iLCJyYW5kb20iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjcmVhdGVEdW1teVByb2plY3QiLCJwcm9qZWN0SWQiLCJ0aW1lc3RhbXAiLCJ0b3RhbHMiLCJzdWNjZXNzIiwid2FybmluZyIsImVycm9yIiwidmlld3MiLCJjcmVhdGVEdW1teVByb2plY3RGaWxlIiwib3B0aW9ucyIsImJhdGNoSGlzdG9yeSIsInZpZXdwb3J0cyIsInNlbGVjdG9ycyIsImNvb2tpZXMiLCJtZXRhIiwidXJsIiwicmVhZHlFdmVudCIsImRlbGF5IiwibWlzTWF0Y2hUaHJlc2hvbGQiLCJnZXRKc29uRmlsZSIsInJlYWRGaWxlU3luYyIsImNvZGUiLCJKU09OIiwicmVtb3ZlQWxsSW5EaXJlY3RvcnkiLCJkaXJQYXRoIiwiZmlsZXMiLCJyZWFkZGlyU3luYyIsImkiLCJmaWxlUGF0aCIsInN0YXRTeW5jIiwiaXNGaWxlIiwidW5saW5rU3luYyIsInJtRGlyIiwicHJvbWlzZVdyaXRlIiwiX3EiLCJ3cml0ZUZpbGUiLCJzdHJpbmdpZnkiLCJwcm9taXNlUmVtb3ZlIiwiX3oiLCJ1bmxpbmsiLCJwcm9qZWN0c1BhdGgiLCJwcm9qZWN0RmlsZXNQYXRoIiwiZ2V0QWxsIiwiZ2V0QnlJZCIsImdldFR5cGVCeUlkIiwidmFsaWRhdGUiLCJib29sIiwib2JqIiwid2lkdGgiLCJoZWlnaHQiLCJuYW1lIiwicXVlcnkiLCJjcmVhdGVOZXciLCJhbGxQcm9qZWN0cyIsIm5ld1Byb2plY3REYXRhIiwibmV3UHJvamVjdEZpbGUiLCJ1bnNoaWZ0Iiwic2F2ZSIsInByb2plY3REYXRhIiwic3BsaWNlIiwiY2xlYXJIaXN0b3J5IiwibWFpblByb2plY3RzIiwiY2xlYW5JbWFnZUZpbGVzIiwic3luYyIsIl90aGlzIiwiZCIsInByb2plY3RGaWxlcyIsInJlYWR5RmlsZXMiLCJ0bXBGaWxlIiwic2VhcmNoIiwicHVzaCIsImtleSIsInVwbG9hZCIsInRoZW4iLCJyZXMiLCJjbGVhbkFmdGVyU3luYyIsIm5ld1JlZnMiLCJkZmRkIiwiaGlzdG9yeURhdGEiLCJ1cGRhdGVkUmVtb3RlRmlsZXMiLCJxdWV1ZVByb21pc2VzIiwidXBkYXRlZEF0IiwidG1wU3JjIiwidG1wUmVmIiwic3BsaXQiLCJ0bXBUeXBlIiwidG1wQWxpYXMiLCJyZW1SZWZQYXRoIiwicmVtUmVmIiwicmVtUmVmRGlmZiIsInByb2plY3RGaWxlIiwicHJvamVjdEhpc3RvcnlGaWxlIiwicHJvamVjdFdyaXRlIiwicHJvamVjdEhpc3RvcnlXcml0ZSIsImF3c1VwbG9hZCIsImFsbCIsImJhc2UiLCJjb21wcyIsInJlZnMiLCJ0cmltRGlnaXRzIiwibnVtIiwibSIsInRvU3RyaW5nIiwic2xpY2UiLCJzZXJ2aWNlIiwic2V0dGluZ3MiLCJyZWZyZXNoTWlsbGlzIiwiYWxsb3dGdXR1cmUiLCJzdHJpbmdzIiwicHJlZml4QWdvIiwicHJlZml4RnJvbU5vdyIsInN1ZmZpeEFnbyIsInN1ZmZpeEZyb21Ob3ciLCJzZWNvbmRzIiwibWludXRlIiwibWludXRlcyIsImhvdXIiLCJob3VycyIsImRheSIsImRheXMiLCJtb250aCIsIm1vbnRocyIsInllYXIiLCJ5ZWFycyIsIm51bWJlcnMiLCJkaXN0YW5jZU1pbGxpcyIsInN1YnN0aXR1dGUiLCJzdHJpbmdPckZ1bmN0aW9uIiwibnVtYmVyIiwic3RyaW5nIiwiaXNGdW5jdGlvbiIsIiRsIiwicHJlZml4Iiwic3VmZml4IiwiYWJzIiwid29yZHMiLCJzZXBhcmF0b3IiLCJ1bmRlZmluZWQiLCJ3b3JkU2VwYXJhdG9yIiwidHJpbSIsImlzbzg2MDEiLCJpc051bWJlciIsIm9yaWdpbmFsVGltZXN0YW1wIiwiZmlsdGVyIiwiZGlmZiIsImlwYyIsImNvbnRyb2xsZXIiLCIkc3RhdGUiLCJQcm9qZWN0cyIsImN1cnJlbnRQcm9qZWN0SWQiLCJjcmVhdGVOZXdQcm9qZWN0IiwiJGJyb2FkY2FzdCIsImdvIiwiY29uc29sZSIsImxvZyIsIm9uIiwibG9jYXRpb24iLCJhd3NDb25maWciLCJidWNrZXQiLCJhY2Nlc3NLZXlJZCIsInNlY3JldEFjY2Vzc0tleSIsImdldENvbmZpZyIsInNldENvbmZpZyIsIiRzdGF0ZVBhcmFtcyIsImFjdGl2ZUZpbHRlciIsImFjdGl2ZUZpbHRlclF1ZXJ5IiwiaGlzdG9yeUl0ZW1zIiwiY2hhbmdlRmlsdGVyIiwicHJldmlld0l0ZW0iLCIkZW1pdCIsInByb2Nlc3NCYXRjaCIsImFsbERhdGEiLCJwbGFjZUl0ZW0iLCJzdGF0dXMiLCJ0YXJnZXQiLCJmb3JtYXR0ZWQiLCJhY3RpdmVEYXRhIiwiaGFzUmVmZXJlbmNlIiwiYmF0Y2giLCJzZXR1cEN1cnJlbnRCYXRjaCIsImJhdGNoSXRlbXMiLCJydW5uaW5nVHlwZSIsInZhbGlkYXRlUHJvamVjdCIsImlzVmFsaWQiLCJjaGVja1N0YXRlIiwiaGFzU2V0dGluZ3MiLCJoYXNDb21wYXJlIiwiZ3JhYkxhdGVzdERhdGEiLCJzeW5jUHJvamVjdCIsImF1dG9TeW5jQXdzIiwicnVubmVyRXZlbnRzIiwicHJvZ3Jlc3MiLCJydW5uZXJDb21wbGV0ZSIsInByb2Nlc3NpbmciLCJydW5uZXJGYWlsZWQiLCJyZWFzb24iLCJwcmV2aWV3QmF0Y2giLCJuZXdDb21wYXJlIiwidmFsaWQiLCJzZW5kIiwibmV3UmVmZXJlbmNlIiwiYWRkTmV3VHlwZSIsImNoZWNrQXdzU2V0dGluZ3MiLCJzYXZlVGltZXIiLCJzeW5jaW5nIiwic2VsZWN0b3JUeXBlcyIsImhhc0NoYW5nZXMiLCJoYXNBd3NTZXR0aW5ncyIsIm1hc3RlciIsIm5WIiwib1YiLCJzeW5jTm93IiwiY2FuY2VsU2F2ZSIsInN1cmUiLCJjb25maXJtIiwiZGVsZXRlUHJvamVjdCIsInByb2plY3RJRCIsImFkZFZpZXdwb3J0IiwibmV3Vmlld3BvcnQiLCJhY3RpdmUiLCJhZGRTZWxlY3RvciIsIm5ld1NlbGVjdG9yIiwiYWRkQ29va2llIiwibmV3Q29va2llIiwiYWN0aXZhdGVUeXBlIiwiZGVsZXRlVHlwZUl0ZW0iLCJwcm9qZWN0cyIsImdvVG9Qcm9qZWN0IiwiY29uc3RhbnQiLCJFTlYiLCJTVEFHRSIsIlBST0QiLCJlcnJvckNvbG9yIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiZXJyb3JUeXBlIiwidHJhbnNwYXJlbmN5IiwibGFyZ2VJbWFnZVRocmVzaG9sZCIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwic3RhdGUiLCJvdGhlcndpc2UiLCJydW4iLCIkaHR0cCIsIiRjb21tb24iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUFBLEtBQUFDLFFBQUFDLE9BQUEsV0FBQSxZQUFBLGdCQ21CQUYsS0FBQUcsVUFBQSxTQUNBLGFBQUEsV0FBQSxXQUFBLGlCQUNBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FDQUMsU0FBQSxJQUNBQyxTQUFBLEVBQ0FDLFNBQUEsbUNBQ0FDLFNBQ0FDLEtBQUEsU0FBQUQsRUFBQUUsRUFBQUMsRUFBQUMsR0FTQSxRQUFBQyxHQUFBQyxH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LHVCQXNCQStGLEVBQUFFLFVBQUEsUUNyRUE5YSxJQUFBK2EsS0FBQSxhQUFBLFFBQ0EsU0FBQTNhLEVBQUE0YSxHQUdBLEdBQUFDLEdBQUFELEVBQUFFLFNBQUFDLFFBQUFDLE1BQ0FILEdBQUEsZ0JBQUEsbUJBRUE3YSxFQUFBNEMsSUFBQSxvQkFBQSxTQUFBcVksRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXhQLEdBQ0FtSixRQUFBQyxJQUFBLG9CQUFBcEoiLCJmaWxlIjoibXVnLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIE1VRyA9IGFuZ3VsYXIubW9kdWxlKCdtdWdzaG90JywgWyd1aS5yb3V0ZXInLCAnbXVndGVtcGxhdGVzJ10pO1xuIiwiLyoqXG4gKiBhbGVydFxuICogYSBkaXJlY3RpdmUgZm9yIGhhbmRsaW5nIGFsbCBhbGVydHMgYW5kIG5vdGljZXMgZm9yIGEgdXNlclxuICpcbiAqIFVTRTpcbiAqIDxhbGVydD48L2FsZXJ0PlxuICpcbiAqICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6IFwiSGV5IHRoZXJlLCBJbSBhIG1lc3NhZ2UhIVwiLCBkdXI6IDUsIHR5cGU6IFwiaW5mb1wiLCBpY29uOiBcImluZm9cIiwgY2FsbGJhY2s6IGZ1bmN0aW9uKCl7fSB9KTtcbiAqXG4gKiBUWVBFUzpcbiAqIC0gaW5mbywgc3VjY2Vzcywgd2FybmluZywgZXJyb3JcbiAqXG4gKiBPUFRJT05TOlxuICogLSB0aXRsZTogdGhlIGNvbnRlbnRzIG9mIHRoZSBtZXNzYWdlLCAoVE9ETzogY2FuIGJlIGh0bWwgb3Igc2ltcGxlIHRleHQpXG4gKiAtIGNhbGxiYWNrOiBhIGZ1bmN0aW9uIHRvIGZpcmUgb24gYWN0aW9uIHRha2VuIG9uIG1lc3NhZ2VcbiAqIC0gZHVyOiB0aGUgdGltZW91dCBvZiB0aGUgbWVzc2FnZSwgaW4gc2Vjb25kc1xuICogLSB0eXBlOiBzZWUgYWJvdmUgdHlwZXNcbiAqIC0gaWNvbjogbm8gZGVmYXVsdCwgc2VlIGh0dHBzOi8vb2N0aWNvbnMuZ2l0aHViLmNvbS8gZm9yIG9wdGlvbnNcbiAqL1xuTVVHLmRpcmVjdGl2ZSgnYWxlcnQnLFxuWyckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRjb21waWxlJywgJyR0ZW1wbGF0ZUNhY2hlJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICR0aW1lb3V0LCAkY29tcGlsZSwgJHRlbXBsYXRlQ2FjaGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwiYWxlcnQtcGFyZW50XCI+PC9kaXY+JyxcbiAgICBzY29wZToge30sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsLCBhdHRycywgY3RybCkge1xuICAgICAgdmFyIGFsZXJ0VGVtcGxhdGUgPSAkdGVtcGxhdGVDYWNoZS5nZXQoJ2FsZXJ0Lmh0bWwnKTtcbiAgICAgIHZhciBfZWwgPSBhbmd1bGFyLmVsZW1lbnQoZWwpO1xuICAgICAgdmFyIHRpbWVyO1xuICAgICAgdmFyIGR1cmF0aW9uID0gNTAwMDtcbiAgICAgIHZhciBwcmV2aW91c0lkID0gJyc7XG4gICAgICB2YXIgYWxlcnRBY3RpdmUgPSAnYWxlcnQtYWN0aXZlJztcbiAgICAgIHZhciBhbGVydFZpc2libGUgPSAnYWxlcnQtdmlzaWJsZSc7XG5cbiAgICAgIGZ1bmN0aW9uIHNob3dNZXNzYWdlKGRhdGEpIHtcbiAgICAgICAgdmFyIF9pZCA9ICgrbmV3IERhdGUoKSk7XG4gICAgICAgIHZhciBuZXdCb2R5ID0gZGF0YS50aXRsZTtcbiAgICAgICAgdmFyIG5ld0ljbiA9IChkYXRhLmljb24pID8gZGF0YS5pY29uIDogbnVsbDtcbiAgICAgICAgdmFyICR0bXBTY29wZSA9ICRyb290U2NvcGUuJG5ldyh0cnVlKTtcblxuICAgICAgICAvLyBzZXR1cCBzaW1wbGUgc2NvcGUgZm9yIG9ubHkgdGhpcyBhbGVydCBpdGVtXG4gICAgICAgICR0bXBTY29wZS5hbGVydCA9IHt9O1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQuaWQgPSBfaWQ7XG4gICAgICAgICR0bXBTY29wZS5hbGVydC5pY29uID0gKGRhdGEuaWNvbikgPyBkYXRhLmljb24gOiBudWxsO1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQudHlwZSA9IChkYXRhLnR5cGUpID8gZGF0YS50eXBlIDogJ2luZm8nO1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQudGl0bGUgPSBkYXRhLnRpdGxlO1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQuYWN0aW9uID0gKCFkYXRhLmNhbGxiYWNrKSA/IG51bGwgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYWN0aW9uRWwgPSB0aGlzLmlkO1xuICAgICAgICAgIGRhdGEuY2FsbGJhY2soKTtcbiAgICAgICAgICBjbGVhckVsKHRoaXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhbGVydEVsID0gJGNvbXBpbGUoYWxlcnRUZW1wbGF0ZSkoJHRtcFNjb3BlKTtcblxuICAgICAgICAvLyBzZXQgYSB1bmlxdWUgaWRcbiAgICAgICAgYWxlcnRFbFswXS5pZCA9IF9pZDtcbiAgICAgICAgcHJldmlvdXNJZCA9IF9pZDtcblxuICAgICAgICAvLyB0aHJvdyBpbnRvIGRvbSwgdGhlbiBzaG93IGluIHZpZXcsIHN0YXJ0IHRpbWVyXG4gICAgICAgIF9lbC5hcHBlbmQoYWxlcnRFbCk7XG4gICAgICAgIGFsZXJ0RWwuYWRkQ2xhc3MoYWxlcnRBY3RpdmUpO1xuXG4gICAgICAgIC8vIHNob3dcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYWxlcnRFbC5hZGRDbGFzcyhhbGVydFZpc2libGUpO1xuICAgICAgICB9LCAyMCk7XG5cbiAgICAgICAgdGltZXIgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGVhckVsKGFsZXJ0RWwpO1xuICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsZWFyRWwoZWxlbSkge1xuICAgICAgICBpZiAoIWVsZW0gJiYgcHJldmlvdXNJZCkge1xuICAgICAgICAgIGVsZW0gPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJldmlvdXNJZCkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFlbGVtKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW0pIHtcbiAgICAgICAgICBlbGVtID0gYW5ndWxhci5lbGVtZW50KGVsZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbS5yZW1vdmVDbGFzcyhhbGVydFZpc2libGUpO1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtLnJlbW92ZSgpO1xuICAgICAgICB9LCAzMDApO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiRvbignQUxFUlQ6RklSRScsIGZ1bmN0aW9uKGUsIGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhLnRpdGxlKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICBjbGVhckVsKCk7XG5cbiAgICAgICAgaWYgKGRhdGEuZHVyKSB7XG4gICAgICAgICAgZHVyYXRpb24gPSBkYXRhLmR1ciAqIDEwMDA7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93TWVzc2FnZShkYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dKTtcbiIsIi8qKlxuICogZmFkZUluXG4gKiBBIGRpcmVjdGl2ZSBmb3IgYW5pbWF0aW5nIGluIGVsZW1lbnRzXG4gKi9cbk1VRy5kaXJlY3RpdmUoJ2ZhZGVJbicsIFtmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycykge1xuICAgICAgdmFyIG9mZnNldCA9IHBhcnNlSW50KGF0dHJzLmZhZGVJbikgfHwgMTA7XG4gICAgICBlbGVtLmFkZENsYXNzKCdmYWRlLWluJyk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW0uY3NzKCdvcGFjaXR5JywgJzEnKTtcbiAgICAgIH0sIG9mZnNldCk7XG4gICAgfVxuICB9O1xuXG59XSk7XG4iLCIvKipcbiAqIE1vZGFsXG4gKiBCdWlsZHMgYSBtb2RhbCBmb3IgaW1hZ2Ugdmlld2luZyBhbmQgY29tcGFyaW5nXG4gKlxuICogQHVzYWdlXG4gKiA8bW9kYWw+PC9tb2RhbD5cbiAqL1xuTVVHLmRpcmVjdGl2ZSgnbW9kYWwnLFxuWyckdGltZW91dCcsICckY29tcGlsZScsICckcm9vdFNjb3BlJyxcbmZ1bmN0aW9uKCR0aW1lb3V0LCAkY29tcGlsZSwgJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogJ21vZGFsLmh0bWwnLFxuICAgIHNjb3BlOiB7fSxcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cikge1xuICAgICAgdmFyIG1vZGFsQWN0aXZlID0gJ21vZGFsLW9wZW4nO1xuICAgICAgdmFyIG1vZGFsVmlzaWJsZSA9ICdtb2RhbC12aXNpYmxlJztcblxuICAgICAgJHNjb3BlLnByb2plY3QgPSBhbmd1bGFyLmNvcHkoJHJvb3RTY29wZS5wcm9qZWN0KTtcbiAgICAgICRzY29wZS5hY3RpdmVPcHRpb24gPSAnc2lkZXMnO1xuICAgICAgJHNjb3BlLm9wYWNpdHlSYW5nZSA9IHt9O1xuICAgICAgJHNjb3BlLmN1cnJlbnRJbmRleCA9IDA7XG4gICAgICAkc2NvcGUuYWN0aXZlSXRlbSA9IHt9O1xuICAgICAgJHNjb3BlLmNvbXBhcmVJdGVtID0ge1xuICAgICAgICBhOiAnJyxcbiAgICAgICAgYjogJycsXG4gICAgICAgIGM6ICcnXG4gICAgICB9O1xuICAgICAgJHNjb3BlLnZpZXdlciA9IHtcbiAgICAgICAgaXRlbXM6IFtdXG4gICAgICB9O1xuICAgICAgJHNjb3BlLm9wYWNpdHlSYW5nZSA9IHtcbiAgICAgICAgYW1vdW50OiAwLjgsXG4gICAgICAgIGludmVyc2U6IDAuMixcbiAgICAgICAgcGVyY2VudDogJzgwJSdcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS4kd2F0Y2goJ29wYWNpdHlSYW5nZS5hbW91bnQnLCBmdW5jdGlvbihudiwgb3YpIHtcbiAgICAgICAgaWYgKG52ID09PSBvdikge3JldHVybjt9XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBvdGhlciB2YWx1ZXNcbiAgICAgICAgJHNjb3BlLm9wYWNpdHlSYW5nZS5pbnZlcnNlID0gKDEgLSBudikudG9GaXhlZCgyKTtcbiAgICAgICAgJHNjb3BlLm9wYWNpdHlSYW5nZS5wZXJjZW50ID0gTWF0aC5yb3VuZChudiAqIDEwMCkgKyAnJSc7XG4gICAgICB9KTtcblxuICAgICAgLy8gc2V0IHRoZSBhY3RpdmUgaXRlbSB3aXRoIGNvcnJlY3QgcGF0aHNcbiAgICAgIGZ1bmN0aW9uIHNldEFjdGl2ZUl0ZW0oZGF0YSkge1xuICAgICAgICB2YXIgaW1hZ2VTcmMgPSAoIWRhdGEucmVtb3RlU291cmNlKSA/IGRhdGEuc291cmNlIDogZGF0YS5yZW1vdGVTb3VyY2U7XG4gICAgICAgICRzY29wZS5jb21wYXJlSXRlbS5hID0gKCFkYXRhLnJlbW90ZVNvdXJjZSkgPyAnc2NyZWVucy9yZWZlcmVuY2UvJyArICRyb290U2NvcGUucHJvamVjdC5pZCArICcvJyArIGltYWdlU3JjLnJlcGxhY2UoJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCArICcucG5nJywgJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRSZWZlcmVuY2UgKyAnLnBuZycpIDogaW1hZ2VTcmM7XG4gICAgICAgICRzY29wZS5jb21wYXJlSXRlbS5iID0gKCFkYXRhLnJlbW90ZVNvdXJjZSkgPyAnc2NyZWVucy9jb21wYXJlLycgKyAkcm9vdFNjb3BlLnByb2plY3QuaWQgKyAnLycgKyBpbWFnZVNyYyA6IGltYWdlU3JjO1xuICAgICAgICAkc2NvcGUuY29tcGFyZUl0ZW0uYyA9ICghZGF0YS5yZW1vdGVTb3VyY2UpID8gJ3NjcmVlbnMvY29tcGFyZS8nICsgJHJvb3RTY29wZS5wcm9qZWN0LmlkICsgJy8nICsgaW1hZ2VTcmMucmVwbGFjZSgnLnBuZycsICdfZGlmZi5wbmcnKSA6IGltYWdlU3JjO1xuICAgICAgfVxuXG4gICAgICAvLyBDaG9vc2UgdGhlIHZpZXdlciBsYXlvdXRcbiAgICAgICRzY29wZS5vcHRpb25Nb2RlID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgICAkc2NvcGUuYWN0aXZlT3B0aW9uID0gdHlwZTtcbiAgICAgIH07XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCdNT0RBTDpDTE9TRScsIGZ1bmN0aW9uKGUsIGFyZ3MpIHtcbiAgICAgICAgJHNjb3BlLmNsb3NlKCk7XG4gICAgICB9KTtcblxuICAgICAgJHJvb3RTY29wZS4kb24oJ01PREFMOk9QRU4nLCBmdW5jdGlvbihlLCBhcmdzKSB7XG4gICAgICAgIGlmICghYXJncyB8fCAhYXJncy50eXBlKSB7IHJldHVybjsgfVxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0byByZXNldCBjdXJyZW50IEluZGV4XG4gICAgICAgICRzY29wZS5jdXJyZW50SW5kZXggPSAwO1xuICAgICAgICAkc2NvcGUucHJvamVjdCA9IGFuZ3VsYXIuY29weSgkcm9vdFNjb3BlLnByb2plY3QpO1xuXG4gICAgICAgIC8vIFNob3cgYSBzaW5nbGUgaXRlbVxuICAgICAgICBpZiAoYXJncy50eXBlID09PSAncHJldmlldycpIHtcbiAgICAgICAgICAkc2NvcGUuYWN0aXZlSXRlbSA9IGFyZ3MuaXRlbTtcbiAgICAgICAgICAkc2NvcGUudmlld2VyID0gYXJncy5wcm9qZWN0IHx8IHt9O1xuICAgICAgICAgICRzY29wZS52aWV3ZXIuaXRlbXMgPSBudWxsO1xuICAgICAgICAgICRzY29wZS5jb21wYXJlSXRlbS5hID0gJ3NjcmVlbnMvJyArICRzY29wZS5hY3RpdmVJdGVtLnR5cGUgKyAnLycgKyAkcm9vdFNjb3BlLnByb2plY3QuaWQgKyAnLycgKyAkc2NvcGUuYWN0aXZlSXRlbS5zb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IG11bHRpcGxlIGl0ZW1zXG4gICAgICAgIGlmIChhcmdzLnR5cGUgPT09ICdiYXRjaCcgJiYgYXJncy5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSBhcmdzLml0ZW1zWyRzY29wZS5jdXJyZW50SW5kZXhdO1xuICAgICAgICAgICRzY29wZS52aWV3ZXIgPSBhcmdzLnByb2plY3QgfHwge307XG4gICAgICAgICAgJHNjb3BlLnZpZXdlci5pdGVtcyA9IGFyZ3MuaXRlbXM7XG4gICAgICAgICAgc2V0QWN0aXZlSXRlbSgkc2NvcGUuYWN0aXZlSXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYWtlIHRoZSBtb2RhbCBhY3RpdmUgd2l0aCBkYXRhXG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKG1vZGFsQWN0aXZlKTtcblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRlbGVtZW50LmFkZENsYXNzKG1vZGFsVmlzaWJsZSk7XG4gICAgICAgIH0sIDMwKTtcbiAgICAgIH0pO1xuXG4gICAgICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MobW9kYWxWaXNpYmxlKTtcblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKG1vZGFsQWN0aXZlKTtcbiAgICAgICAgfSwgMjMwKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFNldHVwIG9mIGxlZnQvcmlnaHQgbmF2aWdhdGlvblxuICAgICAgJHNjb3BlLm1vZGFsQWN0aW9uTmF2ID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgICBpZiAoJHNjb3BlLnZpZXdlci5pdGVtcy5sZW5ndGggPCAxKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHZhciB0b3RhbCA9ICRzY29wZS52aWV3ZXIuaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIG5leHRJZHg7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBuZXh0SWR4ID0gKCRzY29wZS5jdXJyZW50SW5kZXggPT09IHRvdGFsKSA/IDAgOiAkc2NvcGUuY3VycmVudEluZGV4ICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0SWR4ID0gKCRzY29wZS5jdXJyZW50SW5kZXggPT09IDApID8gdG90YWwgOiAkc2NvcGUuY3VycmVudEluZGV4IC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5hY3RpdmVJdGVtID0gJHNjb3BlLnZpZXdlci5pdGVtc1tuZXh0SWR4XTtcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRJbmRleCA9IG5leHRJZHg7XG4gICAgICAgIHNldEFjdGl2ZUl0ZW0oJHNjb3BlLmFjdGl2ZUl0ZW0pO1xuICAgICAgfTtcblxuICAgICAgLy8gR28gZGlyZWN0bHkgdG8gYW4gaXRlbVxuICAgICAgJHNjb3BlLmdvVG9JbmRleCA9IGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICBpZiAoJHNjb3BlLmN1cnJlbnRJbmRleCA9PT0gaWR4KSB7cmV0dXJuO31cblxuICAgICAgICAkc2NvcGUuYWN0aXZlSXRlbSA9ICRzY29wZS52aWV3ZXIuaXRlbXNbaWR4XTtcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRJbmRleCA9IGlkeDtcbiAgICAgICAgc2V0QWN0aXZlSXRlbSgkc2NvcGUuYWN0aXZlSXRlbSk7XG4gICAgICB9O1xuXG4gICAgfVxuICB9O1xufV0pO1xuIiwiLyoqXG4gKiBtc2dDZW50ZXJcbiAqIGEgZGlyZWN0aXZlIGZvciBoYW5kbGluZyBhbGwgbWVzc2FnZSByZWxheSBmb3IgYSB1c2VyXG4gKlxuICogVVNFOlxuICogJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdNU0dDRU5URVI6RklSRScsIHsgbXNnOiBcIkhleSB0aGVyZSwgSW0gYSBtZXNzYWdlISFcIiwgZHVyOiA1LCB0eXBlOiBcImluZm9cIiwgaWNvbjogXCJpbmZvXCIsIGNhbGxiYWNrOiBmdW5jdGlvbigpe30gfSk7XG4gKlxuICogVFlQRVM6XG4gKiAtIERFRkFVTFQsIHNob3dzIGdyZWVuIG1lc3NhZ2UsIHVzZWQgZm9yIHN1Y2Nlc3NcbiAqIC0gV2FybmluZzogXCJ3YXJuXCIgLSBzaG93cyBvcmFuZ2UgbWVzc2FnZSwgdXNlZCBmb3IgZXJyb3JzIG9yIHdhcm5pbmdzXG4gKiAtIEluZm86IFwiaW5mb1wiIC0gc2hvd3MgZGFyayBibHVlIG1lc3NhZ2UsIHVzZWQgZm9yIGdlbmVyYWwgdGhpbmdzXG4gKlxuICogT1BUSU9OUzpcbiAqIC0gbXNnOiB0aGUgY29udGVudHMgb2YgdGhlIG1lc3NhZ2UsIChUT0RPOiBjYW4gYmUgaHRtbCBvciBzaW1wbGUgdGV4dClcbiAqIC0gY2FsbGJhY2s6IGEgZnVuY3Rpb24gdG8gZmlyZSBvbiBhY3Rpb24gdGFrZW4gb24gbWVzc2FnZVxuICogLSBkdXI6IHRoZSB0aW1lb3V0IG9mIHRoZSBtZXNzYWdlXG4gKiAtIHR5cGU6IHNlZSBhYm92ZSB0eXBlc1xuICogLSBpY29uOiBkZWZhdWx0IGlzIGdsb2JlLCBjYW4gYmUgc2V0IHRvIEFOWSBpLXNwcml0ZXMgKHNwcml0ZXMubGVzcylcbiAqL1xuTVVHLmRpcmVjdGl2ZSgnbXNnQ2VudGVyJyxcblsgXCIkcm9vdFNjb3BlXCIsIFwiJHRpbWVvdXRcIiwgXCIkY29tcGlsZVwiLFxuZnVuY3Rpb24gKCRyb290U2NvcGUsICR0aW1lb3V0LCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7fSxcbiAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRycywgY3RybCkge1xuICAgICAgdmFyIG1zZ1RlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJtc2dcIiBuZy1jbGljaz1cImFjdGlvbigpXCI+JytcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1zZy1pY25cIj48aSBjbGFzcz1cIml3IGktSUNPTlwiPjwvaT48L2Rpdj4nK1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwibXNnLWNvbnRcIj5CT0RZPC9kaXY+JytcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1zZy1hY3Rpb25cIj48aSBjbGFzcz1cImliIGktci1hcnJvd1wiPjwvaT48L2Rpdj4nK1xuICAgICAgICAnPC9kaXY+JztcblxuICAgICAgdmFyIF9lbCA9IGFuZ3VsYXIuZWxlbWVudChlbCk7XG4gICAgICB2YXIgdGltZXI7XG4gICAgICB2YXIgZHVyYXRpb24gPSA1MDAwO1xuICAgICAgdmFyIHByZXZpb3VzSWQgPSBcIlwiO1xuICAgICAgdmFyIGRlZmF1bHRJY29uID0gXCJpbmZvXCI7XG5cbiAgICAgIHNjb3BlLmJvZHkgPSBcIlwiO1xuICAgICAgc2NvcGUuY2FsbGJhY2sgPSBudWxsO1xuICAgICAgc2NvcGUuaWNvbiA9IGRlZmF1bHRJY29uO1xuICAgICAgc2NvcGUuYWN0aW9uID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGFjdGlvbkVsID0gX2VsLmZpbmQoXCIjXCIgKyB0aGlzLmlkKTtcbiAgICAgICAgc2NvcGUuY2FsbGJhY2soKTtcbiAgICAgICAgY2xlYXJFbCggYWN0aW9uRWwgKTtcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHNob3dNZXNzYWdlICggZGF0YSApe1xuICAgICAgICB2YXIgX2lkID0gKCtuZXcgRGF0ZSgpKTtcbiAgICAgICAgdmFyIG5ld0JvZHkgPSBkYXRhLm1zZztcbiAgICAgICAgdmFyIG5ld0ljbiA9IChkYXRhLmljb24pPyBkYXRhLmljb24gOiBkZWZhdWx0SWNvbjtcblxuICAgICAgICB2YXIgdGVtcGxhdGUgPSBtc2dUZW1wbGF0ZS5yZXBsYWNlKFwiQk9EWVwiLCBuZXdCb2R5KS5yZXBsYWNlKFwiSUNPTlwiLCBuZXdJY24pO1xuICAgICAgICB2YXIgbmV3TWVzc2FnZSA9ICRjb21waWxlKHRlbXBsYXRlKShzY29wZSk7XG5cbiAgICAgICAgLy8gc2V0IGEgdW5pcXVlIGlkXG4gICAgICAgIG5ld01lc3NhZ2VbMF0uaWQgPSBfaWQ7XG4gICAgICAgIHByZXZpb3VzSWQgPSBfaWQ7XG5cbiAgICAgICAgLy8gdGhyb3cgaW50byBkb20sIHRoZW4gc2hvdyBpbiB2aWV3LCBzdGFydCB0aW1lclxuICAgICAgICBfZWwuYXBwZW5kKCBuZXdNZXNzYWdlICk7XG5cbiAgICAgICAgLy8gcmVtZW1iZXIgdGhlIG5ldyBlbCBmb3IgbGF0ZXJcbiAgICAgICAgdmFyIG1zZ0VsID0gX2VsLmZpbmQoXCIjXCIgKyBfaWQpO1xuICAgICAgICBjaGFuZ2VUeXBlKCBtc2dFbCwgZGF0YS50eXBlICk7XG5cbiAgICAgICAgaWYoZGF0YS5jYWxsYmFjayl7XG4gICAgICAgICAgbXNnRWwuZmluZChcIi5tc2ctYWN0aW9uXCIpLmFkZENsYXNzKFwic2hvd1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3dcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbXNnRWwuYWRkQ2xhc3MoJ2FkZCcpO1xuICAgICAgICB9LCAyMCk7XG5cbiAgICAgICAgdGltZXIgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFyRWwoIG1zZ0VsICk7XG4gICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xlYXJFbCAoIGVsZW0gKSB7XG4gICAgICAgIGlmKCFlbGVtICYmIHByZXZpb3VzSWQpe1xuICAgICAgICAgIGVsZW0gPSBfZWwuZmluZChcIiNcIiArIHByZXZpb3VzSWQpO1xuICAgICAgICB9IGVsc2UgaWYoIWVsZW0pIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgZWxlbS5yZW1vdmVDbGFzcygnYWRkJyk7XG4gICAgICAgIGVsZW0uYWRkQ2xhc3MoJ3JlbW92ZScpO1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtKS5yZW1vdmUoKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHRoZSB0eXBlIGJ5IGEgY2xhc3NcbiAgICAgIGZ1bmN0aW9uIGNoYW5nZVR5cGUgKCBlbGVtLCB0eXBlICkge1xuICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKCdtc2ctaW5mbycpO1xuICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKCdtc2ctd2FybicpO1xuXG4gICAgICAgIGlmKHR5cGUpe1xuICAgICAgICAgIGVsZW0uYWRkQ2xhc3MoJ21zZy0nICsgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kb24oJ01TR0NFTlRFUjpGSVJFJywgZnVuY3Rpb24oZSwgZGF0YSl7XG4gICAgICAgIGlmKCFkYXRhLm1zZyl7IHJldHVybjsgfVxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgY2xlYXJFbCgpO1xuXG4gICAgICAgIGlmKGRhdGEuZHVyKXtcbiAgICAgICAgICBkdXJhdGlvbiA9IGRhdGEuZHVyICogMTAwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGRhdGEuY2FsbGJhY2spe1xuICAgICAgICAgIHNjb3BlLmNhbGxiYWNrID0gZGF0YS5jYWxsYmFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIHNob3dNZXNzYWdlKCBkYXRhICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCIvKipcbiAqIHByZWxvYWRlclxuICogYSBkaXJlY3RpdmUgZm9yIHNob3dpbmcgYSBwcmVsb2FkZXIgYW5pbWF0aW9uIGR1cmluZyBhIHByb2Nlc3NpbmcgcGVyaW9kXG4gKlxuICogVVNFOlxuICogPHByZWxvYWRlcj48L3ByZWxvYWRlcj5cbiAqXG4gKiAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ1BSRUxPQURFUjpPTicpO1xuICogJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdQUkVMT0FERVI6T0ZGJyk7XG4gKlxuICovXG52YXIgUCA9IHJlcXVpcmUoJy4vdmVuZG9yL2NvcmUvcHJlbG9hZGVyJyk7XG5cbk1VRy5kaXJlY3RpdmUoJ3ByZWxvYWRlcicsXG5bJyRyb290U2NvcGUnLCAnJHRpbWVvdXQnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgc2NvcGU6IHt9LFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInByZWxvYWRlclwiPjwvZGl2PicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHJzLCBjdHJsKSB7XG4gICAgICB2YXIgQjtcbiAgICAgIHZhciBlbDtcbiAgICAgIHZhciB0aW1lcjtcbiAgICAgIHZhciB0aXRsZTtcbiAgICAgIHZhciBwcmV2aW91c1RpdGxlO1xuICAgICAgdmFyIGR1cmF0aW9uID0gNTAwMDtcbiAgICAgIHZhciBsb2FkaW5nID0gJ2xvYWRpbmcnO1xuXG4gICAgICAvLyBJTklUIVxuICAgICAgLy8gYXZvaWQgdGhlIGhpZGUvc2hvdyB0aW1lbGluZVxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIEIgPSBuZXcgUC5Ccm93c2VyKCk7XG4gICAgICAgIEIuaW5pdCgpO1xuXG4gICAgICAgIC8vIHNldHVwIG9uZSBpbnN0YW5jZSBvZiB0aGUgY2FudmFzXG4gICAgICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZWxvYWRlcicpO1xuICAgICAgICBlbC5hcHBlbmRDaGlsZChCLmluc3RhbmNlKTtcblxuICAgICAgICAvLyBkcmF3IGJyb3dzZXJcbiAgICAgICAgQi5kcmF3QnJvd3NlcigpO1xuICAgICAgfSwgMzApO1xuXG4gICAgICAvLyBmdW5jdGlvbiBzaG93UHJlbG9hZGVyKCkge1xuICAgICAgLy9cbiAgICAgIC8vICAgLy8gYXZvaWQgdGhlIGhpZGUvc2hvdyB0aW1lbGluZVxuICAgICAgLy8gICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIC8vXG4gICAgICAvLyAgICAgLy8gU3RhcnQgYW5pbWF0aW9uXG4gICAgICAvLyAgICAgQi5hbmltYXRlKDAsIDMwKTtcbiAgICAgIC8vICAgfSwgMzApO1xuICAgICAgLy9cbiAgICAgIC8vICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAvL1xuICAgICAgLy8gICAgIC8vIC8vIGRyYXcgYnJvd3NlclxuICAgICAgLy8gICAgIC8vIEIuZHJhd0Jyb3dzZXIoKTtcbiAgICAgIC8vXG4gICAgICAvLyAgICAgLy8gU3RhcnQgYW5pbWF0aW9uXG4gICAgICAvLyAgICAgQi5hbmltYXRlKDEsIDE1MCk7XG4gICAgICAvL1xuICAgICAgLy8gICAgIC8vIGVsLmFkZENsYXNzKGxvYWRpbmcpO1xuICAgICAgLy8gICB9LCAzMDAwKTtcbiAgICAgIC8vIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlUHJlbG9hZGVyKGUsIGFyZ3MpIHtcbiAgICAgICAgaWYgKCFhcmdzIHx8ICFhcmdzLm1zZykgeyByZXR1cm47IH1cblxuICAgICAgICB0aXRsZSA9IGFyZ3MubXNnO1xuXG4gICAgICAgIHZhciB0eXBlO1xuXG4gICAgICAgIHN3aXRjaCAodGl0bGUpIHtcbiAgICAgICAgICAvLyBjYXNlICdTdGFydGluZyBjb21wYXJlIGNhcHR1cmUnOlxuICAgICAgICAgIC8vICAgdHlwZSA9IDA7XG4gICAgICAgICAgLy8gICBicmVhaztcbiAgICAgICAgICBjYXNlICdPcGVuaW5nIEJyb3dzZXIgU2Vzc2lvbic6XG4gICAgICAgICAgICB0eXBlID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0NhcHR1cmluZyBTY3JlZW5zJzpcbiAgICAgICAgICAgIHR5cGUgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gY2FzZSAnVXBkYXRlZCBQcm9qZWN0IEhpc3RvcnknOlxuICAgICAgICAgIC8vICAgdHlwZSA9IDI7XG4gICAgICAgICAgLy8gICBicmVhaztcbiAgICAgICAgICAvLyBjYXNlICdDb21wYXJpbmcgQ2FwdHVyZSBEYXRhJzpcbiAgICAgICAgICAvLyAgIHR5cGUgPSAyO1xuICAgICAgICAgIC8vICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayB0aGF0IHRoZSB0aXRsZSBoYXMgY2hhbmdlZFxuICAgICAgICBpZiAodGl0bGUgIT09IHByZXZpb3VzVGl0bGUgJiYgQiAmJiBCLmFuaW1hdGUpIHtcblxuICAgICAgICAgIC8vIFN0YXJ0IGFuaW1hdGlvblxuICAgICAgICAgIEIuYW5pbWF0ZSh0eXBlLCAzMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwcmV2aW91c1RpdGxlID0gdGl0bGU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVzZXRQcmVsb2FkZXIoKSB7XG4gICAgICAgIGVsLmFkZENsYXNzKGxvYWRpbmcpO1xuICAgICAgfVxuXG4gICAgICAvLyAkcm9vdFNjb3BlLiRvbignUFJFTE9BREVSOk9OJywgc2hvd1ByZWxvYWRlcik7XG4gICAgICAkcm9vdFNjb3BlLiRvbignUFJFTE9BREVSOlVQREFURScsIHVwZGF0ZVByZWxvYWRlcik7XG4gICAgICAkcm9vdFNjb3BlLiRvbignUFJFTE9BREVSOk9GRicsIHJlc2V0UHJlbG9hZGVyKTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCJNVUcuZmFjdG9yeSgndGltZUFnbycsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlcnZpY2UgPSB7fTtcblxuICBzZXJ2aWNlLnNldHRpbmdzID0ge1xuICAgIHJlZnJlc2hNaWxsaXM6IDYwMDAwLFxuICAgIGFsbG93RnV0dXJlOiBmYWxzZSxcbiAgICBzdHJpbmdzOiB7XG4gICAgICBwcmVmaXhBZ286IG51bGwsXG4gICAgICBwcmVmaXhGcm9tTm93OiBudWxsLFxuICAgICAgc3VmZml4QWdvOiAnYWdvJyxcbiAgICAgIHN1ZmZpeEZyb21Ob3c6ICdmcm9tIG5vdycsXG4gICAgICBzZWNvbmRzOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICAgIG1pbnV0ZTogJ2Fib3V0IGEgbWludXRlJyxcbiAgICAgIG1pbnV0ZXM6ICclZCBtaW51dGVzJyxcbiAgICAgIGhvdXI6ICdhYm91dCBhbiBob3VyJyxcbiAgICAgIGhvdXJzOiAnJWQgaG91cnMnLFxuICAgICAgZGF5OiAnYSBkYXknLFxuICAgICAgZGF5czogJyVkIGRheXMnLFxuICAgICAgbW9udGg6ICdhYm91dCBhIG1vbnRoJyxcbiAgICAgIG1vbnRoczogJyVkIG1vbnRocycsXG4gICAgICB5ZWFyOiAnYWJvdXQgYSB5ZWFyJyxcbiAgICAgIHllYXJzOiAnJWQgeWVhcnMnLFxuICAgICAgbnVtYmVyczogW11cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdHJpbURpZ2l0cyAoIG51bSApIHtcbiAgICAgIHZhciBtID0gbnVtLnRvU3RyaW5nKCkuc2xpY2UoMCwxMyk7XG4gICAgICByZXR1cm4gKG0ubGVuZ3RoID09IDEzKT8gcGFyc2VJbnQobSkgOiBudW07XG4gIH1cblxuICBzZXJ2aWNlLmluV29yZHMgPSBmdW5jdGlvbiAoZGlzdGFuY2VNaWxsaXMpIHtcbiAgICB2YXIgJGwgPSBzZXJ2aWNlLnNldHRpbmdzLnN0cmluZ3M7XG4gICAgdmFyIHByZWZpeCA9ICRsLnByZWZpeEFnbztcbiAgICB2YXIgc3VmZml4ID0gJGwuc3VmZml4QWdvO1xuICAgIGlmIChzZXJ2aWNlLnNldHRpbmdzLmFsbG93RnV0dXJlKSB7XG4gICAgICBpZiAoZGlzdGFuY2VNaWxsaXMgPCAwKSB7XG4gICAgICAgIHByZWZpeCA9ICRsLnByZWZpeEZyb21Ob3c7XG4gICAgICAgIHN1ZmZpeCA9ICRsLnN1ZmZpeEZyb21Ob3c7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBNYXRoLmFicyhkaXN0YW5jZU1pbGxpcykgLyAxMDAwO1xuICAgIHZhciBtaW51dGVzID0gc2Vjb25kcyAvIDYwO1xuICAgIHZhciBob3VycyA9IG1pbnV0ZXMgLyA2MDtcbiAgICB2YXIgZGF5cyA9IGhvdXJzIC8gMjQ7XG4gICAgdmFyIHllYXJzID0gZGF5cyAvIDM2NTtcblxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGUoc3RyaW5nT3JGdW5jdGlvbiwgbnVtYmVyKSB7XG4gICAgICB2YXIgc3RyaW5nID0gYW5ndWxhci5pc0Z1bmN0aW9uKHN0cmluZ09yRnVuY3Rpb24pID9cbiAgICAgIHN0cmluZ09yRnVuY3Rpb24obnVtYmVyLCBkaXN0YW5jZU1pbGxpcykgOiBzdHJpbmdPckZ1bmN0aW9uO1xuICAgICAgdmFyIHZhbHVlID0gKCRsLm51bWJlcnMgJiYgJGwubnVtYmVyc1tudW1iZXJdKSB8fCBudW1iZXI7XG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyVkL2ksIHZhbHVlKTtcbiAgICB9XG5cbiAgICB2YXIgd29yZHMgPSBzZWNvbmRzIDwgNDUgJiYgc3Vic3RpdHV0ZSgkbC5zZWNvbmRzLCBNYXRoLnJvdW5kKHNlY29uZHMpKSB8fFxuICAgICAgICBzZWNvbmRzIDwgOTAgJiYgc3Vic3RpdHV0ZSgkbC5taW51dGUsIDEpIHx8XG4gICAgICAgIG1pbnV0ZXMgPCA0NSAmJiBzdWJzdGl0dXRlKCRsLm1pbnV0ZXMsIE1hdGgucm91bmQobWludXRlcykpIHx8XG4gICAgICAgIG1pbnV0ZXMgPCA5MCAmJiBzdWJzdGl0dXRlKCRsLmhvdXIsIDEpIHx8XG4gICAgICAgIGhvdXJzIDwgMjQgJiYgc3Vic3RpdHV0ZSgkbC5ob3VycywgTWF0aC5yb3VuZChob3VycykpIHx8XG4gICAgICAgIGhvdXJzIDwgNDIgJiYgc3Vic3RpdHV0ZSgkbC5kYXksIDEpIHx8XG4gICAgICAgIGRheXMgPCAzMCAmJiBzdWJzdGl0dXRlKCRsLmRheXMsIE1hdGgucm91bmQoZGF5cykpIHx8XG4gICAgICAgIGRheXMgPCA0NSAmJiBzdWJzdGl0dXRlKCRsLm1vbnRoLCAxKSB8fFxuICAgICAgICBkYXlzIDwgMzY1ICYmIHN1YnN0aXR1dGUoJGwubW9udGhzLCBNYXRoLnJvdW5kKGRheXMgLyAzMCkpIHx8XG4gICAgICAgIHllYXJzIDwgMS41ICYmIHN1YnN0aXR1dGUoJGwueWVhciwgMSkgfHxcbiAgICAgICAgc3Vic3RpdHV0ZSgkbC55ZWFycywgTWF0aC5yb3VuZCh5ZWFycykpO1xuXG4gICAgdmFyIHNlcGFyYXRvciA9ICRsLndvcmRTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcgJyA6ICRsLndvcmRTZXBhcmF0b3I7XG4gICAgcmV0dXJuIFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdLmpvaW4oc2VwYXJhdG9yKS50cmltKCk7XG4gIH07XG5cbiAgc2VydmljZS5wYXJzZSA9IGZ1bmN0aW9uIChpc284NjAxKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoaXNvODYwMSkpIHtcbiAgICAgIGlzbzg2MDEgPSBpc284NjAxICsgXCJcIjtcbiAgICAgIC8vIGZvcm1hdCBmb3IgY29ycmVjdCBsZW5ndGhcbiAgICAgIHZhciBvcmlnaW5hbFRpbWVzdGFtcCA9IHRyaW1EaWdpdHMoIGlzbzg2MDEgKTtcbiAgICAgIHJldHVybiBwYXJzZUludChvcmlnaW5hbFRpbWVzdGFtcCwgMTApO1xuICAgIH1cbiAgICB2YXIgcyA9IChpc284NjAxIHx8ICcnKS50cmltKCk7XG4gICAgcyA9IHMucmVwbGFjZSgvXFwuXFxkKy8sICcnKTsgLy8gcmVtb3ZlIG1pbGxpc2Vjb25kc1xuICAgIHMgPSBzLnJlcGxhY2UoLy0vLCAnLycpLnJlcGxhY2UoLy0vLCAnLycpO1xuICAgIHMgPSBzLnJlcGxhY2UoL1QvLCAnICcpLnJlcGxhY2UoL1ovLCAnIFVUQycpO1xuICAgIHMgPSBzLnJlcGxhY2UoLyhbXFwrXFwtXVxcZFxcZClcXDo/KFxcZFxcZCkvLCAnICQxJDInKTsgLy8gLTA0OjAwIC0+IC0wNDAwXG4gICAgcmV0dXJuIG5ldyBEYXRlKHMpO1xuICB9O1xuXG4gIHJldHVybiBzZXJ2aWNlO1xufSk7XG4iLCJ2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTtcblxuTVVHLmZhY3RvcnkoJ0NvbXBhcmUnLFxuWyckcScsICdDb25maWcnLFxuZnVuY3Rpb24oJHEsIENvbmZpZykge1xuICAvLyBDb25maWcgdmFyc1xuICB2YXIgZmlsZURpclByZWZpeCA9IF9fZGlybmFtZSArICcvJztcbiAgdmFyIGltYWdlUHJlZml4ID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnO1xuICB2YXIgc3RhdHVzVHlwZXMgPSBbJ3Bhc3NlZCcsICd3YXJuaW5nJywgJ2ZhaWxlZCddO1xuXG4gIC8vIGFzeW5jIGhlbHBlclxuICBmdW5jdGlvbiByZWFkQXN5bmMoZmlsZSwgY2FsbGJhY2spIHtcbiAgICBmcy5yZWFkRmlsZShmaWxlRGlyUHJlZml4ICsgZmlsZSwgJ2Jhc2U2NCcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFRPRE86IGxldCB0aGUgYmFja2VuZCBwcm9jZXNzIGhhbmRsZSB0aGlzIVxuICBmdW5jdGlvbiBjb21wYXJlU2luZ2xlKGEsIGIpIHtcbiAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICB2YXIgb3V0cHV0ID0ge307XG5cbiAgICAvLyBBcHBseSBNYWluIENvbXBhcmUgQ29uZmlnXG4gICAgcmVzZW1ibGUub3V0cHV0U2V0dGluZ3MoQ29uZmlnLkNvbXBhcmUpO1xuXG4gICAgLy8gT3BlbiBib3RoIGZpbGVzLCBiZWZvcmUgd2UgYXJlIHJlYWR5IHRvIHByb2Nlc3NcbiAgICBhc3luYy5tYXAoW2EsIGJdLCByZWFkQXN5bmMsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgICAgdmFyIGFEYXRhID0gaW1hZ2VQcmVmaXggKyByZXN1bHRzWzBdO1xuICAgICAgdmFyIGJEYXRhID0gaW1hZ2VQcmVmaXggKyByZXN1bHRzWzFdO1xuXG4gICAgICAvLyBIYW5kbGVzIGVycm9yc1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICB9XG5cbiAgICAgIC8vIFJ1biB0aGUgY29tcGFyZSBmdW5jdGlvbiwgcmV0dXJuIHRoZSBkaWZmIGRhdGFcbiAgICAgIHJlc2VtYmxlKGFEYXRhKVxuICAgICAgICAuY29tcGFyZVRvKGJEYXRhKVxuICAgICAgICAuaWdub3JlQ29sb3JzKClcbiAgICAgICAgLm9uQ29tcGxldGUoZnVuY3Rpb24oZGlmZkRhdGEpIHtcbiAgICAgICAgICBvdXRwdXQucmVwb3J0ID0gZGlmZkRhdGE7XG4gICAgICAgICAgb3V0cHV0LnNyYyA9IGRpZmZEYXRhLmdldEltYWdlRGF0YVVybCgpO1xuXG4gICAgICAgICAgZGZkLnJlc29sdmUob3V0cHV0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gIH07XG5cbiAgcmV0dXJuIHtcblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHR3byBpbWFnZXMgYW5kIHJldHVybnMgYWxsIGRhdGEgd2l0aCBhbiBpbWFnZSBvZiBjaGFuZ2VzXG4gICAgICovXG4gICAgcnVuU2luZ2xlOiBjb21wYXJlU2luZ2xlLFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyB0aGUgdHlwZSBvZiBwYXNzL3dhcm4vZmFpbCBzdGF0dXNcbiAgICAgKi9cbiAgICBnZXRTdGF0dXM6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBtaXNNYXRjaFZhbHVlID0gcGFyc2VGbG9hdChkYXRhLm1pc01hdGNoUGVyY2VudGFnZSk7XG5cbiAgICAgIC8vIGxvd2VzdCB0b2xlcmFuY2VcbiAgICAgIGlmIChtaXNNYXRjaFZhbHVlIDwgMC4xKSB7XG5cbiAgICAgICAgLy8gV2FybiB0aGF0IGRpbWVuc2lvbnMgYXJlIGRpZmZlcmVuY2VcbiAgICAgICAgaWYgKGRhdGEuaXNTYW1lRGltZW5zaW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdHVzVHlwZXNbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXR1c1R5cGVzWzBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdhcm5pbmcgdG9sZXJhbmNlXG4gICAgICBpZiAobWlzTWF0Y2hWYWx1ZSA+IDAuMSAmJiBtaXNNYXRjaFZhbHVlIDwgMikge1xuICAgICAgICByZXR1cm4gc3RhdHVzVHlwZXNbMV07XG4gICAgICB9XG5cbiAgICAgIC8vIGVycm9yIHRvbGVyYW5jZSByZWFjaGVkXG4gICAgICByZXR1cm4gc3RhdHVzVHlwZXNbMl07XG4gICAgfVxuXG4gIH07XG59XSk7XG4iLCJNVUcuZmFjdG9yeSgnbm93VGltZScsXG5bJyR0aW1lb3V0JyxcbmZ1bmN0aW9uKCR0aW1lb3V0KSB7XG4gIHZhciBub3dUaW1lID0gRGF0ZS5ub3coKTtcbiAgdmFyIHVwZGF0ZVRpbWUgPSBmdW5jdGlvbigpIHtcbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIG5vd1RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgdXBkYXRlVGltZSgpO1xuICAgIH0sIDEwMDApO1xuICB9O1xuXG4gIHVwZGF0ZVRpbWUoKTtcbiAgcmV0dXJuIHtcbiAgICBnZXRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBub3dUaW1lO1xuICAgIH1cbiAgfTtcbn1dKTtcbiIsInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBBV1MgPSByZXF1aXJlKCcuL3ZlbmRvci9jb3JlL2F3cycpO1xuXG5NVUcuZmFjdG9yeSgnUHJvamVjdHMnLFxuWyckcScsXG5mdW5jdGlvbigkcSkge1xuICAvLyBDb25maWcgdGhlIG1haW4gcGF0aHNcbiAgdmFyIHByb2plY3RzUGF0aCA9IF9fZGlybmFtZSArICcvcHJvamVjdHMuanNvbic7XG4gIHZhciBwcm9qZWN0RmlsZXNQYXRoID0gX19kaXJuYW1lICsgJy9wcm9qZWN0cy8nO1xuXG4gIC8vIENyZWF0ZXMgYSBVVUlEIG9mIHRoZSBzcGVjaWZpZWQgbGVuZ3RoXG4gIGZ1bmN0aW9uIGNyZWF0ZVVVSUQocykge1xuICAgIHZhciBuO1xuICAgIGlmICh0eXBlb2YgcyA9PSAnbnVtYmVyJyAmJiBzID09PSBwYXJzZUludChzLCAxMCkpIHtcbiAgICAgIHMgPSBBcnJheShzICsgMSkuam9pbigneCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzLnJlcGxhY2UoL3gvZywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbiA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDYxKSArIDQ4O1xuICAgICAgbiA9IG4gPiA1NyA/IChuICsgNyA+IDkwID8gbiArIDEzIDogbiArIDcpIDogbjtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG4pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQ3JlYXRlcyBhIEpTT04gb2JqZWN0IGZvciBhIGJhc2VsaW5lIG5ldyBwcm9qZWN0XG4gIGZ1bmN0aW9uIGNyZWF0ZUR1bW15UHJvamVjdCh0b3RhbCkge1xuICAgIHRvdGFsID0gdG90YWwgfHwgMDtcbiAgICB2YXIgcHJvamVjdElkID0gY3JlYXRlVVVJRCgxMik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBwcm9qZWN0SWQsXG4gICAgICB0aXRsZTogJ1Byb2plY3QgJyArIChwYXJzZUludCh0b3RhbCwgMTApICsgMSksXG4gICAgICB0aW1lc3RhbXA6ICgrbmV3IERhdGUpLFxuICAgICAgdG90YWxzOiB7XG4gICAgICAgIHN1Y2Nlc3M6IG51bGwsXG4gICAgICAgIHdhcm5pbmc6IG51bGwsXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICB2aWV3czogMFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBuZWVkZWQgYmFzZSBkYXRhIGZvciBzdG9yaW5nIGFuIGluZGl2aWR1YWwgcHJvamVjdFxuICBmdW5jdGlvbiBjcmVhdGVEdW1teVByb2plY3RGaWxlKG9wdGlvbnMpIHtcbiAgICB2YXIgcHJvamVjdElkID0gY3JlYXRlVVVJRCgxMik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhdGNoSGlzdG9yeToge30sXG4gICAgICBjdXJyZW50QmF0Y2g6IG51bGwsXG4gICAgICBjdXJyZW50UmVmZXJlbmNlOiBudWxsLFxuICAgICAgaWQ6IG9wdGlvbnMuaWQsXG4gICAgICB0aXRsZTogb3B0aW9ucy50aXRsZSxcbiAgICAgIHRpbWVzdGFtcDogb3B0aW9ucy50aW1lc3RhbXAsXG4gICAgICB2aWV3cG9ydHM6IFtdLFxuICAgICAgc2VsZWN0b3JzOiBbXSxcbiAgICAgIGNvb2tpZXM6IFtdLFxuICAgICAgbWV0YToge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIHJlYWR5RXZlbnQ6IG51bGwsXG4gICAgICAgIGRlbGF5OiBudWxsLFxuICAgICAgICBtaXNNYXRjaFRocmVzaG9sZDogbnVsbFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBHcmFicyBKU09OIGZpbGUgYW5kIGFwcHJvcHJpYXRlbHkgaGFuZGxlcyBlcnJvcnNcbiAgZnVuY3Rpb24gZ2V0SnNvbkZpbGUocGF0aCwgdHlwZSkge1xuICAgIHZhciBmaWxlO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZpbGUgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0ZjgnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBjb3VsZG4ndCBmaW5kIGZpbGVcbiAgICAgIGlmIChlLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICAgIHJldHVybiB0eXBlIHx8IHt9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5wYXJzZShmaWxlKTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBhbGwgZmlsZXMgaW4gZGlyZWN0b3J5XG4gIGZ1bmN0aW9uIHJlbW92ZUFsbEluRGlyZWN0b3J5KGRpclBhdGgpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGZpbGVzID0gZnMucmVhZGRpclN5bmMoZGlyUGF0aCk7XG4gICAgfSBjYXRjaCAoZSkgeyByZXR1cm47IH1cblxuICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZmlsZVBhdGggPSBwYXRoLmpvaW4oZGlyUGF0aCwgZmlsZXNbaV0pO1xuXG4gICAgICAgIGlmIChmcy5zdGF0U3luYyhmaWxlUGF0aCkuaXNGaWxlKCkpIHtcbiAgICAgICAgICBmcy51bmxpbmtTeW5jKGZpbGVQYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBybURpcihmaWxlUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfTtcblxuICAvLyBzZXRzIHVwIGEgcHJvbWlzZSBkcml2ZW4gZmlsZSB3cml0ZVxuICBmdW5jdGlvbiBwcm9taXNlV3JpdGUoZmlsZVBhdGgsIGRhdGEpIHtcbiAgICB2YXIgX3EgPSAkcS5kZWZlcigpO1xuXG4gICAgZnMud3JpdGVGaWxlKGZpbGVQYXRoLCBKU09OLnN0cmluZ2lmeShkYXRhKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIF9xLnJlamVjdChlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBfcS5yZXNvbHZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3EucHJvbWlzZTtcbiAgfVxuXG4gIC8vIHNldHMgdXAgYSBwcm9taXNlIGRyaXZlbiBmaWxlIGRlbGV0ZVxuICBmdW5jdGlvbiBwcm9taXNlUmVtb3ZlKHBhdGgpIHtcbiAgICB2YXIgX3ogPSAkcS5kZWZlcigpO1xuXG4gICAgLy8gZnMudW5saW5rXG4gICAgZnMudW5saW5rKHBhdGgsIGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBfei5yZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX3oucmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF96LnByb21pc2U7XG4gIH1cblxuICByZXR1cm4ge1xuXG4gICAgZ2V0OiBmdW5jdGlvbihwYXRoLCB0eXBlKSB7XG4gICAgICByZXR1cm4gZ2V0SnNvbkZpbGUoX19kaXJuYW1lICsgcGF0aCwgdHlwZSk7XG4gICAgfSxcblxuICAgIGdldEFsbDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0SnNvbkZpbGUocHJvamVjdHNQYXRoLCBbXSk7XG4gICAgfSxcblxuICAgIGdldEJ5SWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gZ2V0SnNvbkZpbGUocHJvamVjdEZpbGVzUGF0aCArIGlkICsgJy5qc29uJyk7XG4gICAgfSxcblxuICAgIGdldFR5cGVCeUlkOiBmdW5jdGlvbihpZCwgdHlwZSkge1xuICAgICAgcmV0dXJuIGdldEpzb25GaWxlKHByb2plY3RGaWxlc1BhdGggKyBpZCArICdfJyArIHR5cGUgKyAnLmpzb24nLCBbXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHZhbGlkYXRlcyB0aGUgcHJvamVjdCwgbWFrZXMgc3VyZSBhbGwgc2V0dGluZ3MgYXJlIHNldHVwIGFuZCB2YWxpZFxuICAgICAqL1xuICAgIHZhbGlkYXRlOiBmdW5jdGlvbihwcm9qZWN0KSB7XG4gICAgICB2YXIgY29va2llcyA9IHByb2plY3QuY29va2llcztcbiAgICAgIHZhciB2aWV3cG9ydHMgPSBwcm9qZWN0LnZpZXdwb3J0cztcbiAgICAgIHZhciBzZWxlY3RvcnMgPSBwcm9qZWN0LnNlbGVjdG9ycztcbiAgICAgIHZhciB0aXRsZSA9IHByb2plY3QudGl0bGU7XG4gICAgICB2YXIgdXJsID0gcHJvamVjdC5tZXRhLnVybDtcbiAgICAgIHZhciBib29sID0gdHJ1ZTtcblxuICAgICAgLy8gdmVyaWZ5IGFsbCBkZWZhdWx0cyBhcmUgc2V0dXBcbiAgICAgIGlmICghdmlld3BvcnRzIHx8ICFzZWxlY3RvcnMgfHwgIXRpdGxlIHx8ICF1cmwgfHwgdmlld3BvcnRzLmxlbmd0aCA8IDEgfHwgc2VsZWN0b3JzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSBoYXZlIHZpZXdwb3J0cywgdmVyaWZ5IHRoZXkncmUgc2V0dXAgcmlnaHRcbiAgICAgIGlmICh2aWV3cG9ydHMpIHtcbiAgICAgICAgdmlld3BvcnRzLm1hcChmdW5jdGlvbihvYmosIGlkeCkge1xuICAgICAgICAgIGlmICghb2JqLndpZHRoIHx8ICFvYmouaGVpZ2h0IHx8ICFvYmoubmFtZSkge1xuICAgICAgICAgICAgYm9vbCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGhhdmUgc2VsZWN0b3JzLCB2ZXJpZnkgdGhleSdyZSBzZXR1cCByaWdodFxuICAgICAgaWYgKHNlbGVjdG9ycykge1xuICAgICAgICBzZWxlY3RvcnMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICAgICAgaWYgKCFvYmoucXVlcnkgfHwgIW9iai50eXBlKSB7XG4gICAgICAgICAgICBib29sID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UgaGF2ZSBjb29raWVzLCB2ZXJpZnkgdGhleSdyZSBzZXR1cCByaWdodFxuICAgICAgaWYgKGNvb2tpZXMpIHtcbiAgICAgICAgY29va2llcy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgICAgICBpZiAoIW9iai5uYW1lIHx8ICFvYmoucGF0aCB8fCAhb2JqLnZhbHVlKSB7XG4gICAgICAgICAgICBib29sID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVmYXVsdCB0byB0cnVlXG4gICAgICByZXR1cm4gYm9vbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlcyBhIG5ldyBwcm9qZWN0LCBhbmQgcmV0dXJucyB0aGUgZGF0YSBpbiBhIHByb21pc2VcbiAgICAgKi9cbiAgICBjcmVhdGVOZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgYWxsUHJvamVjdHMgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwcm9qZWN0c1BhdGgsICd1dGY4JykpO1xuICAgICAgdmFyIG5ld1Byb2plY3REYXRhID0gY3JlYXRlRHVtbXlQcm9qZWN0KGFsbFByb2plY3RzLmxlbmd0aCk7XG4gICAgICB2YXIgbmV3UHJvamVjdEZpbGUgPSBjcmVhdGVEdW1teVByb2plY3RGaWxlKG5ld1Byb2plY3REYXRhKTtcblxuICAgICAgYWxsUHJvamVjdHMudW5zaGlmdChuZXdQcm9qZWN0RGF0YSk7XG5cbiAgICAgIC8vIHNhdmUgdGhlIGRhdGEgdG8gdGhlIHByb2plY3RzIGxpc3RcbiAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0c1BhdGgsIEpTT04uc3RyaW5naWZ5KGFsbFByb2plY3RzKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2F2ZSBhcyBhbiBpbmRpdmlkdWFsIGZpbGVcbiAgICAgICAgZnMud3JpdGVGaWxlKHByb2plY3RGaWxlc1BhdGggKyBuZXdQcm9qZWN0RGF0YS5pZCArICcuanNvbicsIEpTT04uc3RyaW5naWZ5KG5ld1Byb2plY3RGaWxlKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNhdmUgYXMgYW4gaW5kaXZpZHVhbCBmaWxlXG4gICAgICAgICAgZnMud3JpdGVGaWxlKHByb2plY3RGaWxlc1BhdGggKyBuZXdQcm9qZWN0RGF0YS5pZCArICdfaGlzdG9yeS5qc29uJywgSlNPTi5zdHJpbmdpZnkoW10pLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlZGlyZWN0IHVzZXIgdG8gdGhlIHNldHRpbmdzIHBhZ2VcbiAgICAgICAgICAgIGRmZC5yZXNvbHZlKG5ld1Byb2plY3REYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH0sXG5cbiAgICAvLyBzYXZlIHRvIGZpbGUgYW5kIGxpc3RzLCByZXR1cm4gbGlzdCBkYXRhXG4gICAgc2F2ZTogZnVuY3Rpb24ocHJvamVjdERhdGEpIHtcbiAgICAgIHZhciBkZmQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIGFsbFByb2plY3RzID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocHJvamVjdHNQYXRoLCAndXRmOCcpKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBsaXN0aW5nIGRhdGFcbiAgICAgIGFsbFByb2plY3RzLm1hcChmdW5jdGlvbihvYmosIGlkeCkge1xuICAgICAgICBpZiAob2JqLmlkID09PSBwcm9qZWN0RGF0YS5pZCkge1xuICAgICAgICAgIGFsbFByb2plY3RzW2lkeF0udGl0bGUgPSBwcm9qZWN0RGF0YS50aXRsZTtcbiAgICAgICAgICBhbGxQcm9qZWN0c1tpZHhdLnRpbWVzdGFtcCA9ICgrbmV3IERhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gc2F2ZSBhcyBhbiBpbmRpdmlkdWFsIGZpbGVcbiAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0RmlsZXNQYXRoICsgcHJvamVjdERhdGEuaWQgKyAnLmpzb24nLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0RGF0YSksIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgbGlzdGluZyBkYXRhXG4gICAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0c1BhdGgsIEpTT04uc3RyaW5naWZ5KGFsbFByb2plY3RzKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJldHVybiB0aGUgbGlzdGluZyBkYXRhLCBzbyB3ZSBjYW4gdXBkYXRlIHRoZSBzaWRlcGFuZWxcbiAgICAgICAgICBkZmQucmVzb2x2ZShwcm9qZWN0RGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLy8gVE9ETzogc2hvdWxkIHJlbW92ZSBpbWFnZXMgdXBvbiBkZWxldGU/XG4gICAgLy8gUmVtb3ZlcyBhIHNpbmdsZSBwcm9qZWN0IGJ5IElEXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgYWxsUHJvamVjdHMgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwcm9qZWN0c1BhdGgsICd1dGY4JykpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGxpc3RpbmcgZGF0YVxuICAgICAgYWxsUHJvamVjdHMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICAgIGlmIChvYmouaWQgPT09IGlkKSB7XG4gICAgICAgICAgYWxsUHJvamVjdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlIHByb2plY3QgZmlsZVxuICAgICAgZnMudW5saW5rKHByb2plY3RGaWxlc1BhdGggKyBpZCArICcuanNvbicsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgcHJvamVjdCBoaXN0b3J5IGZpbGVcbiAgICAgICAgZnMudW5saW5rKHByb2plY3RGaWxlc1BhdGggKyBpZCArICdfaGlzdG9yeS5qc29uJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgbGlzdGluZyBkYXRhXG4gICAgICAgICAgZnMud3JpdGVGaWxlKHByb2plY3RzUGF0aCwgSlNPTi5zdHJpbmdpZnkoYWxsUHJvamVjdHMpLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJldHVyblxuICAgICAgICAgICAgZGZkLnJlc29sdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZW1vdmVzIGFsbCBzdG9yZWQgaGlzdG9yeSBmb3IgYSBwcm9qZWN0XG4gICAgICovXG4gICAgY2xlYXJIaXN0b3J5OiBmdW5jdGlvbihwcm9qZWN0KSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgIHZhciBtYWluUHJvamVjdHMgPSBnZXRKc29uRmlsZShwcm9qZWN0c1BhdGgsIFtdKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBwcm9qZWN0IGRhdGEgdG8gcmVmbGVjdCBubyBoaXN0b3J5XG4gICAgICBwcm9qZWN0LmN1cnJlbnRCYXRjaCA9IG51bGw7XG4gICAgICBwcm9qZWN0LmN1cnJlbnRSZWZlcmVuY2UgPSBudWxsO1xuICAgICAgcHJvamVjdC5iYXRjaEhpc3RvcnkgPSB7fTtcblxuICAgICAgLy8gdXBkYXRlIHRoZSBjdXJyZW50IHByb2plY3QgdG8gaGF2ZSBubyBiYXRjaEhpc3RvcnlcbiAgICAgIG1haW5Qcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgICAgaWYgKG9iai5pZCA9PT0gcHJvamVjdC5pZCkge1xuICAgICAgICAgIG1haW5Qcm9qZWN0c1tpZHhdLnRvdGFscy5zdWNjZXNzID0gMDtcbiAgICAgICAgICBtYWluUHJvamVjdHNbaWR4XS50b3RhbHMud2FybmluZyA9IDA7XG4gICAgICAgICAgbWFpblByb2plY3RzW2lkeF0udG90YWxzLmVycm9yID0gMDtcbiAgICAgICAgICBtYWluUHJvamVjdHNbaWR4XS50b3RhbHMudmlld3MgPSAwO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gcmVtb3ZlIGFsbCBsb2NhbCBpbWFnZXNcbiAgICAgIHRoaXMuY2xlYW5JbWFnZUZpbGVzKHByb2plY3QpO1xuXG4gICAgICAvLyBzYXZlIHRoZSBkYXRhIHRvIHRoZSBwcm9qZWN0cyBsaXN0XG4gICAgICBmcy53cml0ZUZpbGUocHJvamVjdEZpbGVzUGF0aCArIHByb2plY3QuaWQgKyAnX2hpc3RvcnkuanNvbicsIEpTT04uc3RyaW5naWZ5KFtdKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2F2ZSB0aGUgZGF0YSB0byB0aGUgaWQgcHJvamVjdFxuICAgICAgICBmcy53cml0ZUZpbGUocHJvamVjdEZpbGVzUGF0aCArIHByb2plY3QuaWQgKyAnLmpzb24nLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0KSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgZGF0YSBvbiB0aGUgcHJvamVjdHMgbGlzdFxuICAgICAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0c1BhdGgsIEpTT04uc3RyaW5naWZ5KG1haW5Qcm9qZWN0cyksIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVkaXJlY3QgdXNlciB0byB0aGUgc2V0dGluZ3MgcGFnZVxuICAgICAgICAgICAgZGZkLnJlc29sdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBwYXNzIGluIGEgcHJvamVjdElkLCB0aGVuIGl0IHdpbGwgcmVhZCB0aGUgcHJvamVjdCBhbmQgaXRzIGN1cnJlbnQgYmF0Y2ggb2YgZmlsZXMgdG8gdXBsb2FkXG4gICAgICogb25jZSBjb21wbGV0ZSwgaXQgd2lsbCBjbGVhbiBvdXQgYW55IGxvY2FsIHNjcmVlbnMgYW5kIHJlcGxhY2Ugd2l0aCBhd3MgcmVzb3VyY2VzXG4gICAgICovXG4gICAgc3luYzogZnVuY3Rpb24oaWQpIHtcbiAgICAgIGlmICghaWQpIHtyZXR1cm47fVxuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIHByb2plY3QgPSB0aGlzLmdldEJ5SWQoaWQpO1xuICAgICAgdmFyIHByb2plY3RGaWxlcyA9IHRoaXMuZ2V0VHlwZUJ5SWQoaWQsICdoaXN0b3J5Jyk7XG4gICAgICB2YXIgcmVhZHlGaWxlcyA9IFtdO1xuXG4gICAgICAvLyBwdWxsIG91dCBmaWxlcyB0aGF0IGFyZSBhbHJlYWR5IGluc2lkZSBhd3MsIHByZXAgZm9yIHVwbG9hZFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9qZWN0RmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRtcEZpbGUgPSBwcm9qZWN0RmlsZXNbaV07XG4gICAgICAgIGlmICh0bXBGaWxlLnNvdXJjZS5zZWFyY2goJ2FtYXpvbicpID09PSAtMSkge1xuICAgICAgICAgIHZhciBzcmMgPSB0bXBGaWxlLnNvdXJjZTtcbiAgICAgICAgICB2YXIgdHlwZSA9IHRtcEZpbGUudHlwZTtcbiAgICAgICAgICB2YXIgcGF0aCA9IF9fZGlybmFtZSArICcvc2NyZWVucy8nICsgdHlwZSArICcvJyArIHByb2plY3QuaWQgKyAnLycgKyBzcmM7XG4gICAgICAgICAgcmVhZHlGaWxlcy5wdXNoKHsga2V5OiB0eXBlICsgJy8nICsgc3JjLCBwYXRoOiBwYXRoIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHVwbG9hZCBmaWxlc1xuICAgICAgQVdTLmluaXQoKVxuICAgICAgICAudXBsb2FkKHJlYWR5RmlsZXMsIHByb2plY3QuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuXG4gICAgICAgICAgLy8gZG8gcG9zdC1wcm9jZXNzIGFjdGlvblxuICAgICAgICAgIF90aGlzLmNsZWFuQWZ0ZXJTeW5jKHByb2plY3QsIHJlcykudGhlbihkLnJlc29sdmUsIGQucmVqZWN0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNsZWFuIGxvY2FsIGltYWdlcywgdXBkYXRlIGhpc3Rvcnkgd2l0aCBhd3MgcmVzb3VyY2VzLCByZXR1cm5zIHRoZSB1cGRhdGVzXG4gICAgICovXG4gICAgY2xlYW5BZnRlclN5bmM6IGZ1bmN0aW9uIChwcm9qZWN0LCBuZXdSZWZzKSB7XG4gICAgICB2YXIgZGZkZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgaGlzdG9yeURhdGEgPSBnZXRKc29uRmlsZShwcm9qZWN0RmlsZXNQYXRoICsgcHJvamVjdC5pZCArICdfaGlzdG9yeS5qc29uJywgW10pO1xuICAgICAgdmFyIHVwZGF0ZWRSZW1vdGVGaWxlcyA9IFtdO1xuICAgICAgdmFyIHF1ZXVlUHJvbWlzZXMgPSBbXTtcbiAgICAgIHByb2plY3QudXBkYXRlZEF0ID0gKCtuZXcgRGF0ZSgpKTtcblxuICAgICAgLy8gbG9vcCB0aHJvdWdoIG5ldyBmaWxlc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdSZWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0bXBTcmMgPSBuZXdSZWZzW2ldO1xuICAgICAgICB2YXIgdG1wUmVmID0gdG1wU3JjLnNwbGl0KCcvJyk7XG4gICAgICAgIHZhciB0bXBUeXBlID0gdG1wUmVmW3RtcFJlZi5sZW5ndGggLSAyXTtcbiAgICAgICAgdmFyIHRtcEFsaWFzID0gdG1wUmVmW3RtcFJlZi5sZW5ndGggLSAxXTtcblxuICAgICAgICBoaXN0b3J5RGF0YS5tYXAoZnVuY3Rpb24oaXRlbSwgaWR4KSB7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgaGlzdG9yeSByZWZcbiAgICAgICAgICBpZiAoaXRlbS5zb3VyY2UgPT09IHRtcEFsaWFzICYmIHRtcFR5cGUgPT09ICdjb21wYXJlJykge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIHJlbW92ZSB0aGUgZGlmZiBhbHNvXG4gICAgICAgICAgICB2YXIgcmVtUmVmUGF0aCA9IF9fZGlybmFtZSArICcvc2NyZWVucy8nICsgdG1wVHlwZSArICcvJyArIHByb2plY3QuaWQgKyAnLycgKyB0bXBBbGlhcztcbiAgICAgICAgICAgIHZhciByZW1SZWYgPSBwcm9taXNlUmVtb3ZlKHJlbVJlZlBhdGgpO1xuICAgICAgICAgICAgdmFyIHJlbVJlZkRpZmYgPSBwcm9taXNlUmVtb3ZlKHJlbVJlZlBhdGgucmVwbGFjZSgnLicsICdfZGlmZi4nKSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBoaXN0b3J5XG4gICAgICAgICAgICBkZWxldGUgaGlzdG9yeURhdGFbaWR4XS5zb3VyY2U7XG4gICAgICAgICAgICBoaXN0b3J5RGF0YVtpZHhdLnJlbW90ZVNvdXJjZSA9IG5ld1JlZnNbaV07XG5cbiAgICAgICAgICAgIC8vIGFkZCB0byBwcm9taXNlIGxpc3RcbiAgICAgICAgICAgIHF1ZXVlUHJvbWlzZXMucHVzaChyZW1SZWYpO1xuICAgICAgICAgICAgcXVldWVQcm9taXNlcy5wdXNoKHJlbVJlZkRpZmYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNhdmUgaGlzdG9yeSAmIHByb2plY3RcbiAgICAgIHZhciBwcm9qZWN0RmlsZSA9IF9fZGlybmFtZSArICcvcHJvamVjdHMvJyArIHByb2plY3QuaWQgKyAnLmpzb24nO1xuICAgICAgdmFyIHByb2plY3RIaXN0b3J5RmlsZSA9IHByb2plY3RGaWxlLnJlcGxhY2UoJy5qc29uJywgJ19oaXN0b3J5Lmpzb24nKTtcbiAgICAgIHZhciBwcm9qZWN0V3JpdGUgPSBwcm9taXNlV3JpdGUocHJvamVjdEZpbGUsIHByb2plY3QpO1xuICAgICAgdmFyIHByb2plY3RIaXN0b3J5V3JpdGUgPSBwcm9taXNlV3JpdGUocHJvamVjdEhpc3RvcnlGaWxlLCBoaXN0b3J5RGF0YSk7XG4gICAgICBxdWV1ZVByb21pc2VzLnVuc2hpZnQocHJvamVjdFdyaXRlKTtcbiAgICAgIHF1ZXVlUHJvbWlzZXMudW5zaGlmdChwcm9qZWN0SGlzdG9yeVdyaXRlKTtcblxuICAgICAgLy8gYWRkIHByb2plY3QgZmlsZXMgdG8gdGhlIHVwbG9hZCByZWFkaW5lc3NcbiAgICAgIHVwZGF0ZWRSZW1vdGVGaWxlcy5wdXNoKHsga2V5OiBwcm9qZWN0LmlkLCBwYXRoOiBwcm9qZWN0RmlsZSB9KTtcbiAgICAgIHVwZGF0ZWRSZW1vdGVGaWxlcy5wdXNoKHsga2V5OiBwcm9qZWN0LmlkICsgJ19oaXN0b3J5JywgcGF0aDogcHJvamVjdEhpc3RvcnlGaWxlIH0pO1xuXG4gICAgICAvLyB1cGxvYWQgdXBkYXRlZCBoaXN0b3J5ICYgcHJvamVjdFxuICAgICAgdmFyIGF3c1VwbG9hZCA9IEFXUy5pbml0KCkudXBsb2FkKHVwZGF0ZWRSZW1vdGVGaWxlcywgcHJvamVjdC5pZCk7XG4gICAgICBxdWV1ZVByb21pc2VzLnVuc2hpZnQoYXdzVXBsb2FkKTtcblxuICAgICAgLy8gZG8gYWxsIHByb21pc2Ugb3BlcmF0aW9uc1xuICAgICAgJHEuYWxsKHF1ZXVlUHJvbWlzZXMpLnRoZW4oZGZkZC5yZXNvbHZlLCBkZmRkLnJlamVjdCk7XG5cbiAgICAgIHJldHVybiBkZmRkLnByb21pc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNsZWFuIGxvY2FsIGltYWdlcywgdXBkYXRlIGhpc3Rvcnkgd2l0aCBhd3MgcmVzb3VyY2VzLCByZXR1cm5zIHRoZSB1cGRhdGVzXG4gICAgICovXG4gICAgY2xlYW5JbWFnZUZpbGVzOiBmdW5jdGlvbiAocHJvamVjdCkge1xuICAgICAgdmFyIGJhc2UgPSBfX2Rpcm5hbWUgKyAnL3NjcmVlbnMvQkFTRS8nICsgcHJvamVjdC5pZDtcbiAgICAgIHZhciBjb21wcyA9IGJhc2UucmVwbGFjZSgnQkFTRScsICdjb21wYXJlJyk7XG4gICAgICB2YXIgcmVmcyA9IGJhc2UucmVwbGFjZSgnQkFTRScsICdyZWZlcmVuY2UnKTtcblxuICAgICAgcmVtb3ZlQWxsSW5EaXJlY3RvcnkoY29tcHMpO1xuICAgICAgcmVtb3ZlQWxsSW5EaXJlY3RvcnkocmVmcyk7XG4gICAgfVxuXG4gIH07XG59XSk7XG4iLCJNVUcuZmlsdGVyKCd0aW1lQWdvJyxcblsnbm93VGltZScsICd0aW1lQWdvJyxcbmZ1bmN0aW9uIChub3dUaW1lLCB0aW1lQWdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgZnJvbVRpbWUgPSB0aW1lQWdvLnBhcnNlKHZhbHVlKTtcbiAgICB2YXIgZGlmZiA9IG5vd1RpbWUuZ2V0VGltZSgpIC0gZnJvbVRpbWU7XG4gICAgcmV0dXJuIHRpbWVBZ28uaW5Xb3JkcyhkaWZmKTtcbiAgfTtcbn1dKTtcbiIsInZhciBpcGMgPSByZXF1aXJlKCdpcGMnKTtcblxuTVVHLmNvbnRyb2xsZXIoJ01haW5DdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJywgJ0NvbmZpZycsICdQcm9qZWN0cycsXG5mdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRzdGF0ZSwgQ29uZmlnLCBQcm9qZWN0cykge1xuICAkcm9vdFNjb3BlLmN1cnJlbnRQcm9qZWN0SWQgPSAnJztcblxuICAkc2NvcGUuY3JlYXRlTmV3UHJvamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIFByb2plY3RzLmNyZWF0ZU5ldygpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ1NJREVQQU5FTDpORVdQUk9KRUNUJywgcmVzKTtcbiAgICAgICRzdGF0ZS5nbygncHJvamVjdHMuc2V0dGluZ3MnLCB7IGlkOiByZXMuaWQgfSk7XG4gICAgfSxcblxuICAgIGZ1bmN0aW9uKGVycikge1xuICAgICAgY29uc29sZS5sb2coJ2VycicsIGVycik7XG4gICAgfSk7XG4gIH07XG5cbiAgaXBjLm9uKCdOQVZJR0FURTpUTycsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MubG9jYXRpb24pIHtyZXR1cm47fVxuXG4gICAgY29uc29sZS5sb2coJ05BVklHQVRFOlRPJywgYXJncyk7XG4gICAgJHN0YXRlLmdvKGFyZ3MubG9jYXRpb24pO1xuICB9KTtcblxufV0pO1xuIiwidmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBBV1MgPSByZXF1aXJlKCcuL3ZlbmRvci9jb3JlL2F3cycpO1xuXG5NVUcuY29udHJvbGxlcignUHJlZmVyZW5jZXNDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlKSB7XG4gICRzY29wZS5hd3NDb25maWcgPSB7XG4gICAgYnVja2V0OiAnJyxcbiAgICBhY2Nlc3NLZXlJZDogJycsXG4gICAgc2VjcmV0QWNjZXNzS2V5OiAnJ1xuICB9O1xuXG4gIC8vIGdyYWIgc2V0dGluZ3MgcmVhbCBxdWlja1xuICAkc2NvcGUuYXdzQ29uZmlnID0gQVdTLmdldENvbmZpZygpO1xuXG4gICRzY29wZS5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gc2F2ZSB0aGUgQVdTIGNvbmZpZ1xuICAgIEFXUy5zZXRDb25maWcoJHNjb3BlLmF3c0NvbmZpZyk7XG4gIH07XG5cbn1dKTtcbiIsIk1VRy5jb250cm9sbGVyKCdQcm9qZWN0Q3RybCcsXG5bJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRzdGF0ZVBhcmFtcycsICdQcm9qZWN0cycsXG5mdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRzdGF0ZVBhcmFtcywgUHJvamVjdHMpIHtcblxuICAvLyBBbGxvdyB0aGUgY2hpbGQgdmlld3MgdG8gYmluZCB0byBzYW1lIHNjb3BlXG4gICRyb290U2NvcGUucHJvamVjdCA9IFByb2plY3RzLmdldEJ5SWQoJHN0YXRlUGFyYW1zLmlkKTtcblxufV0pO1xuIiwiTVVHLmNvbnRyb2xsZXIoJ1Byb2plY3RIaXN0b3J5Q3RybCcsXG5bJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRzdGF0ZVBhcmFtcycsICdQcm9qZWN0cycsXG5mdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRzdGF0ZVBhcmFtcywgUHJvamVjdHMpIHtcbiAgJHNjb3BlLmFjdGl2ZUZpbHRlciA9ICdBbGwnO1xuICAkc2NvcGUuYWN0aXZlRmlsdGVyUXVlcnkgPSAnJztcblxuICAvLyBncmFiIGFsbCB0aGUgaGlzdG9yeSBkYXRhXG4gICRzY29wZS5oaXN0b3J5SXRlbXMgPSBQcm9qZWN0cy5nZXRUeXBlQnlJZCgkc3RhdGVQYXJhbXMuaWQsICdoaXN0b3J5Jyk7XG5cbiAgJHNjb3BlLmNoYW5nZUZpbHRlciA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAkc2NvcGUuYWN0aXZlRmlsdGVyID0gdHlwZTtcbiAgICAkc2NvcGUuYWN0aXZlRmlsdGVyUXVlcnkgPSAodHlwZSA9PSAnQWxsJykgPyAnJyA6IHR5cGU7XG4gIH07XG5cbiAgJHNjb3BlLnByZXZpZXdJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICAgICRyb290U2NvcGUuJGVtaXQoJ01PREFMOk9QRU4nLCB7IHR5cGU6ICdwcmV2aWV3JywgaXRlbTogaXRlbSwgcHJvamVjdDogJHJvb3RTY29wZS5wcm9qZWN0IH0pO1xuICB9O1xuXG59XSk7XG4iLCJ2YXIgaXBjID0gcmVxdWlyZSgnaXBjJyk7XG5cbk1VRy5jb250cm9sbGVyKCdQcm9qZWN0UnVubmVyQ3RybCcsXG5bJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyR0aW1lb3V0JywgJyRzdGF0ZVBhcmFtcycsICdQcm9qZWN0cycsXG5mdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICR0aW1lb3V0LCAkc3RhdGVQYXJhbXMsIFByb2plY3RzKSB7XG4gICRzY29wZS5wcm9jZXNzaW5nID0gZmFsc2U7XG4gICRzY29wZS5oYXNTZXR0aW5ncyA9IGZhbHNlO1xuICAkc2NvcGUuaGFzUmVmZXJlbmNlID0gZmFsc2U7XG4gICRzY29wZS5oYXNDb21wYXJlID0gZmFsc2U7XG4gICRzY29wZS5ydW5uaW5nVHlwZSA9ICdyZWZlcmVuY2UnO1xuICAkc2NvcGUuYmF0Y2hJdGVtcyA9IFtdO1xuICAkc2NvcGUuYWN0aXZlRGF0YSA9IHt9O1xuICAkc2NvcGUuY3VycmVudEJhdGNoID0gJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCB8fCAwO1xuICAkc2NvcGUucHJvZ3Jlc3MgPSB7XG4gICAgcGVyY2VudDogMCxcbiAgICB0aXRsZTogJ1N0YXJ0aW5nJ1xuICB9O1xuXG4gIC8vIFB1dHMgZGF0YSBpbnRvIHNvcnRlZCBzZWN0aW9uc1xuICBmdW5jdGlvbiBwcm9jZXNzQmF0Y2goYWxsRGF0YSkge1xuICAgIGlmICghYWxsRGF0YSB8fCBhbGxEYXRhLmxlbmd0aCA8IDEpIHtcbiAgICAgICRzY29wZS5oYXNSZWZlcmVuY2UgPSBmYWxzZTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvLyByZXNldCBqdXN0IHRoZSBzdGF0c1xuICAgICRzY29wZS5hY3RpdmVEYXRhID0ge307XG4gICAgJHNjb3BlLmFjdGl2ZURhdGEuc3VjY2VzcyA9IDA7XG4gICAgJHNjb3BlLmFjdGl2ZURhdGEud2FybmluZyA9IDA7XG4gICAgJHNjb3BlLmFjdGl2ZURhdGEuZXJyb3IgPSAwO1xuICAgIHZhciBmb3JtYXR0ZWQgPSBbeyB0eXBlOiAnc3VjY2VzcycsIGl0ZW1zOiBbXX0sIHsgdHlwZTogJ3dhcm5pbmcnLCBpdGVtczogW119LCB7IHR5cGU6ICdlcnJvcicsIGl0ZW1zOiBbXX1dO1xuXG4gICAgZnVuY3Rpb24gcGxhY2VJdGVtKGl0ZW0pIHtcblxuICAgICAgLy8gS2VlcCB0aGluZ3Mgb3JnYW5pemVzIHdpdGggcHJlc2V0IHByaW9yaXR5XG4gICAgICBpZiAoaXRlbS5zdGF0dXMpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IDA7XG5cbiAgICAgICAgc3dpdGNoIChpdGVtLnN0YXR1cykge1xuICAgICAgICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgICAgICAgdGFyZ2V0ID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAgICB0YXJnZXQgPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXR0ZWRbdGFyZ2V0XS5pdGVtcy51bnNoaWZ0KGl0ZW0pO1xuICAgICAgICAkc2NvcGUuYWN0aXZlRGF0YVtmb3JtYXR0ZWRbdGFyZ2V0XS50eXBlXSA9ICRzY29wZS5hY3RpdmVEYXRhW2Zvcm1hdHRlZFt0YXJnZXRdLnR5cGVdICsgMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbGxEYXRhLm1hcChmdW5jdGlvbihvYmosIGlkeCkge1xuICAgICAgaWYgKG9iai5iYXRjaCA9PT0gJHNjb3BlLmN1cnJlbnRCYXRjaCkge1xuICAgICAgICBwbGFjZUl0ZW0ob2JqKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS5oYXNSZWZlcmVuY2UgPSB0cnVlO1xuICAgIHJldHVybiBmb3JtYXR0ZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBzZXR1cEN1cnJlbnRCYXRjaCgpIHtcbiAgICBpZiAoJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCA9PT0gbnVsbCkge3JldHVybjt9XG5cbiAgICAvLyBncmFiIGFsbCB0aGUgcnVubmVyIHRlc3QgZGF0YVxuICAgIHZhciBpZCA9ICh0eXBlb2YgJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCAhPT0gdW5kZWZpbmVkKSA/ICRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2ggOiAwO1xuICAgIHZhciBoaXN0b3J5RGF0YSA9IFByb2plY3RzLmdldFR5cGVCeUlkKCRzdGF0ZVBhcmFtcy5pZCwgJ2hpc3RvcnknKTtcblxuICAgIC8vIFN0b3JlIHRoZSBwcm9jZXNzZWQgZGF0YSBpbnRvIHRoZSBiYXRjaCBkYXRhXG4gICAgJHNjb3BlLmJhdGNoSXRlbXMgPSBwcm9jZXNzQmF0Y2goaGlzdG9yeURhdGEpO1xuXG4gICAgLy8gc2V0dXAgd2hpY2ggdmlldyB0byBzaG93IGJhc2VkIG9uIGhpc3RvcnlcbiAgICAkc2NvcGUucnVubmluZ1R5cGUgPSAoJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRSZWZlcmVuY2UgPj0gJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCkgPyAncmVmZXJlbmNlJyA6ICdjb21wYXJlJztcbiAgfVxuXG4gIC8vIHZhbGlkYXRpb24gb2YgcHJvamVjdFxuICBmdW5jdGlvbiB2YWxpZGF0ZVByb2plY3QoKSB7XG4gICAgLy8gdmVyaWZ5IGlmIGl0cyB2YWxpZFxuICAgIHZhciBpc1ZhbGlkID0gUHJvamVjdHMudmFsaWRhdGUoJHJvb3RTY29wZS5wcm9qZWN0KTtcblxuICAgIC8vIGFsZXJ0IG9mIGludmFsaWRpdHlcbiAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6ICdQbGVhc2UgZmluaXNoIGNvbmZpZ3VyaW5nIHNldHRpbmdzIScsIGR1cjogNSwgdHlwZTogJ2Vycm9yJywgaWNvbjogJ3N0b3AnIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpc1ZhbGlkO1xuICB9XG5cbiAgLy8gY2hlY2tzIGZvciBjaGFuZ2VzIGFuZCB1cGRhdGVzIFVJIGFjY291cmRpbmdseVxuICBmdW5jdGlvbiBjaGVja1N0YXRlKCkge1xuICAgICRzY29wZS5oYXNTZXR0aW5ncyA9IHZhbGlkYXRlUHJvamVjdCgpO1xuICAgICRzY29wZS5oYXNSZWZlcmVuY2UgPSAoJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRSZWZlcmVuY2UgIT09IG51bGwpO1xuICAgICRzY29wZS5jdXJyZW50QmF0Y2ggPSAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoO1xuXG4gICAgaWYgKCRzY29wZS5ydW5uaW5nVHlwZSA9PT0gJ3JlZmVyZW5jZScpIHtcbiAgICAgICRzY29wZS5oYXNDb21wYXJlID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICRzY29wZS5oYXNDb21wYXJlID0gKCRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2ggIT09IG51bGwgJiYgJHJvb3RTY29wZS5wcm9qZWN0LmN1cnJlbnRCYXRjaCAhPT0gMCk7XG4gICAgICAkc2NvcGUuaGFzQ29tcGFyZSA9ICgkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudFJlZmVyZW5jZSA8PSAkcm9vdFNjb3BlLnByb2plY3QuY3VycmVudEJhdGNoKTtcbiAgICB9XG4gIH1cblxuICAvLyBncmFiIHRoZSBsYXRlc3QgZGF0YSBmb3IgdGhlIHByb2plY3RcbiAgZnVuY3Rpb24gZ3JhYkxhdGVzdERhdGEoKSB7XG4gICAgJHJvb3RTY29wZS5wcm9qZWN0ID0gUHJvamVjdHMuZ2V0QnlJZCgkcm9vdFNjb3BlLnByb2plY3QuaWQsICdoaXN0b3J5Jyk7XG5cbiAgICAvLyBTZXQgdGhlIGFjdGl2ZSBkYXRhIGJhc2VkIG9uIGN1cnJlbnRCYXRjaFxuICAgICRzY29wZS5hY3RpdmVEYXRhID0gKCRyb290U2NvcGUucHJvamVjdCAmJiAkcm9vdFNjb3BlLnByb2plY3QuYmF0Y2hIaXN0b3J5KSA/ICRyb290U2NvcGUucHJvamVjdC5iYXRjaEhpc3RvcnlbJHNjb3BlLmN1cnJlbnRCYXRjaF0gOiBudWxsO1xuXG4gICAgJHJvb3RTY29wZS4kZW1pdCgnU0lERVBBTkVMOlVQREFURScsICRyb290U2NvcGUucHJvamVjdCk7XG4gIH1cblxuICAvLyBzeW5jIGFsbCBwcm9qZWN0IGZpbGVzIGFuZCBzZXR0aW5ncyB0byBBV1NcbiAgZnVuY3Rpb24gc3luY1Byb2plY3QoKSB7XG4gICAgaWYgKHR5cGVvZiAkcm9vdFNjb3BlLnByb2plY3QubWV0YS5hdXRvU3luY0F3cyAhPT0gdW5kZWZpbmVkICYmICRyb290U2NvcGUucHJvamVjdC5tZXRhLmF1dG9TeW5jQXdzID09PSB0cnVlKSB7XG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnU3luYyBTdGFydGluZycsIGR1cjogMywgdHlwZTogJ2luZm8nIH0pO1xuXG4gICAgICBQcm9qZWN0cy5zeW5jKCRyb290U2NvcGUucHJvamVjdC5pZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdBTEVSVDpGSVJFJywgeyB0aXRsZTogJ1N5bmMgQ29tcGxldGUnLCBkdXI6IDMsIHR5cGU6ICdzdWNjZXNzJywgaWNvbjogJ2NoZWNrJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ3N5bmNOb3cgZXJyJywgZXJyKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnU3luYyBGYWlsZWQnLCBkdXI6IDUsIHR5cGU6ICdlcnJvcicsIGljb246ICdzdG9wZScgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGdyYWJMYXRlc3REYXRhKCk7XG4gIHNldHVwQ3VycmVudEJhdGNoKCk7XG4gIGNoZWNrU3RhdGUoKTtcblxuICAvLyBGaXJlIG9mZiB0aGUgdmlld2VyXG4gICRzY29wZS5wcmV2aWV3QmF0Y2ggPSBmdW5jdGlvbihpdGVtcykge1xuICAgICRyb290U2NvcGUuJGVtaXQoJ01PREFMOk9QRU4nLCB7IHR5cGU6ICdiYXRjaCcsIGl0ZW1zOiBpdGVtcywgcHJvamVjdDogJHJvb3RTY29wZS5wcm9qZWN0IH0pO1xuICB9O1xuXG4gIC8vIEZpcmUgb2ZmIGEgbmV3IHRlc3QhIVxuICAkc2NvcGUubmV3Q29tcGFyZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWxpZCA9IHZhbGlkYXRlUHJvamVjdCgpO1xuXG4gICAgLy8gdmFsaWRhdGlvbiBwYXVzZVxuICAgIGlmICghdmFsaWQpIHtyZXR1cm47fVxuXG4gICAgJHNjb3BlLnJ1bm5pbmdUeXBlID0gJ2NvbXBhcmUnO1xuICAgICRzY29wZS5wcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkcm9vdFNjb3BlLiRlbWl0KCdQUkVMT0FERVI6T04nKTtcbiAgICB9LCAxMCk7XG5cbiAgICBpcGMuc2VuZCgnUlVOTkVSOkZJUkUnLCB7IHR5cGU6ICdjb21wYXJlJywgcHJvamVjdElkOiAkcm9vdFNjb3BlLnByb2plY3QuaWQgfSk7XG4gIH07XG5cbiAgLy8gc2V0dXAgbmV3IHJlZmVyZW5jZVxuICAkc2NvcGUubmV3UmVmZXJlbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbGlkID0gdmFsaWRhdGVQcm9qZWN0KCk7XG5cbiAgICAvLyB2YWxpZGF0aW9uIHBhdXNlXG4gICAgaWYgKCF2YWxpZCkge3JldHVybjt9XG5cbiAgICAkc2NvcGUucHJvY2Vzc2luZyA9IHRydWU7XG4gICAgJHNjb3BlLnJ1bm5pbmdUeXBlID0gJ3JlZmVyZW5jZSc7XG4gICAgJHNjb3BlLmhhc0NvbXBhcmUgPSBmYWxzZTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkcm9vdFNjb3BlLiRlbWl0KCdQUkVMT0FERVI6T04nKTtcbiAgICB9LCAxMCk7XG5cbiAgICBpcGMuc2VuZCgnUlVOTkVSOkZJUkUnLCB7IHR5cGU6ICdyZWZlcmVuY2UnLCBwcm9qZWN0SWQ6ICRyb290U2NvcGUucHJvamVjdC5pZCB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBydW5uZXJFdmVudHMoYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5tc2cgfHwgIWFyZ3MucGVyY2VudCkge3JldHVybjt9XG5cbiAgICAvLyBXcml0ZSB0aGUgcHJvZ3Jlc3MgdG8gVUlcbiAgICAkc2NvcGUucHJvZ3Jlc3MucGVyY2VudCA9IHBhcnNlSW50KGFyZ3MucGVyY2VudCwgMTApO1xuICAgICRzY29wZS5wcm9ncmVzcy50aXRsZSA9IChhcmdzLm1zZykgPyBhcmdzLm1zZyA6ICRzY29wZS5wcm9ncmVzcy50aXRsZTtcblxuICAgICRyb290U2NvcGUuJGVtaXQoJ1BSRUxPQURFUjpVUERBVEUnLCBhcmdzKTtcbiAgfVxuXG4gIC8vIHNpZ25hbCBVSSBvZiBjaGFuZ2VzXG4gIGZ1bmN0aW9uIHJ1bm5lckNvbXBsZXRlKCkge1xuICAgIGdyYWJMYXRlc3REYXRhKCk7XG4gICAgc2V0dXBDdXJyZW50QmF0Y2goKTtcbiAgICBjaGVja1N0YXRlKCk7XG4gICAgc3luY1Byb2plY3QoKTtcbiAgICAkc2NvcGUucHJvY2Vzc2luZyA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVubmVyRmFpbGVkKHJlYXNvbikge1xuICAgIGNvbnNvbGUubG9nKCdSVU5ORVI6RkFJTEVEIHJlYXNvbicsIHJlYXNvbik7XG4gICAgJHNjb3BlLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGlwYy5vbignUlVOTkVSOlBST0dSRVNTJywgcnVubmVyRXZlbnRzKTtcbiAgaXBjLm9uKCdSVU5ORVI6Q09NUExFVEUnLCBydW5uZXJDb21wbGV0ZSk7XG4gIGlwYy5vbignUlVOTkVSOkZBSUxFRCcsIHJ1bm5lckZhaWxlZCk7XG5cbn1dKTtcbiIsInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbk1VRy5jb250cm9sbGVyKCdQcm9qZWN0U2V0dGluZ3NDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBQcm9qZWN0cykge1xuICB2YXIgc2F2ZVRpbWVyO1xuXG4gICRzY29wZS5zeW5jaW5nID0gZmFsc2U7XG4gICRzY29wZS5zZWxlY3RvclR5cGVzID0gWydjb250YWluZXInLCAnaGlkZScsICdyZW1vdmUnXTtcbiAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgJHNjb3BlLmhhc0F3c1NldHRpbmdzID0gZmFsc2U7XG4gICRzY29wZS5tYXN0ZXIgPSB7fTtcbiAgYW5ndWxhci5jb3B5KCRyb290U2NvcGUucHJvamVjdCwgJHNjb3BlLm1hc3Rlcik7XG5cbiAgZnVuY3Rpb24gYWRkTmV3VHlwZSh0eXBlLCBkYXRhKSB7XG4gICAgJHJvb3RTY29wZS5wcm9qZWN0W3R5cGVdLnB1c2goZGF0YSk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0F3c1NldHRpbmdzKCkge1xuICAgIC8vIHJlYWQgaWYgYXdzIHNldHRpbmdzIGFuZCBpZiB0aGV5IGFyZSBjb3JyZWN0XG4gICAgdmFyIGZpbGUgPSBQcm9qZWN0cy5nZXQoJy9jb25maWcvYXdzLmpzb24nLCB7fSk7XG5cbiAgICBpZiAoIWZpbGUgfHwgIWZpbGUuYnVja2V0IHx8ICFmaWxlLmFjY2Vzc0tleUlkIHx8ICFmaWxlLnNlY3JldEFjY2Vzc0tleSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gaW5pdGlhbCBhd3MgY3JlZCBjaGVja1xuICAkc2NvcGUuaGFzQXdzU2V0dGluZ3MgPSBjaGVja0F3c1NldHRpbmdzKCk7XG5cbiAgLy8gV2F0Y2ggZm9yIGNoYW5nZXMsIHNvIHdlIGNhbiBzYXZlXG4gICRzY29wZS4kd2F0Y2goJ3Byb2plY3QnLCBmdW5jdGlvbihuViwgb1YpIHtcbiAgICBpZiAoblYgIT0gb1YpIHtcbiAgICAgICRzY29wZS5oYXNDaGFuZ2VzID0gdHJ1ZTtcblxuICAgICAgLy8gc2F2ZSB0aGUgZmlsZSBmb3IgY29udmVuaWVuY2VcbiAgICAgICRzY29wZS5zYXZlKCk7XG4gICAgfVxuICB9LCB0cnVlKTtcblxuICAvLyBUT0RPOiBzZXR1cCB2YWxpZGF0aW9uc1xuICAvLyBzYXZlIHRoZSBjdXJyZW50IHByb2plY3RcbiAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2F2ZVRpbWVyKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNhdmVUaW1lcik7XG4gICAgfVxuXG4gICAgLy8gdGhyb3R0bGUgdGhlIHNhdmVzLCBzaW5jZSB3ZSBzYXZlIG9uIGFueSBjaGFuZ2VzXG4gICAgc2F2ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgLy8gU2F2ZSB0ZWggcHJvamVjdG9pZFxuICAgICAgUHJvamVjdHMuc2F2ZSgkcm9vdFNjb3BlLnByb2plY3QpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgc2lkZWJhciB3aXRoIGNoYW5nZXNcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdTSURFUEFORUw6VVBEQVRFJywgcmVzKTtcblxuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmV2ZXJ0IG1vZGVsXG4gICAgICAgICAgYW5ndWxhci5jb3B5KCRyb290U2NvcGUucHJvamVjdCwgJHNjb3BlLm1hc3Rlcik7XG4gICAgICAgICAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXJyJywgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSwgMjAwKTtcbiAgfTtcblxuICAvLyBzeW5jIHRoaXMgcHJvamVjdCB0byBBV1NcbiAgJHNjb3BlLnN5bmNOb3cgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUuc3luY2luZyA9IHRydWU7XG4gICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdBTEVSVDpGSVJFJywgeyB0aXRsZTogJ1N5bmMgU3RhcnRpbmcnLCBkdXI6IDUsIHR5cGU6ICdpbmZvJyB9KTtcblxuICAgIFByb2plY3RzLnN5bmMoJHJvb3RTY29wZS5wcm9qZWN0LmlkKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICRzY29wZS5zeW5jaW5nID0gZmFsc2U7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6ICdTeW5jIENvbXBsZXRlJywgZHVyOiA1LCB0eXBlOiAnc3VjY2VzcycsIGljb246ICdjaGVjaycgfSk7XG4gICAgICB9XG5cbiAgICAgICwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICRzY29wZS5zeW5jaW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzeW5jTm93IGVycicsIGVycik7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6ICdTeW5jIEZhaWxlZCcsIGR1cjogNSwgdHlwZTogJ2Vycm9yJywgaWNvbjogJ3N0b3BlJyB9KTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIC8vIHJldmVydCB0aGUgY3VycmVudCBwcm9qZWN0XG4gICRzY29wZS5jYW5jZWxTYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN1cmUgPSBjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xlYXIgYWxsIHlvdXIgY2hhbmdlcz8nKTtcbiAgICBpZiAoc3VyZSkge1xuICAgICAgLy8gcHV0IHJldmVydCBtb2RlbCBpbnRvIHRoZSBwcm9qZWN0IG1vZGVsXG4gICAgICBhbmd1bGFyLmNvcHkoJHNjb3BlLm1hc3RlciwgJHJvb3RTY29wZS5wcm9qZWN0KTtcbiAgICAgICRzY29wZS5oYXNDaGFuZ2VzID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIC8vIGRlbGV0ZSB0aGUgcHJvamVjdCwgYW5kIHJlbW92ZSBmcm9tIHByb2plY3QgbGlzdHMsIHRoZW4gcmVkaXJlY3QgdG8gbWFpblxuICAkc2NvcGUuZGVsZXRlUHJvamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdXJlID0gY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIHByb2plY3Q/Jyk7XG4gICAgaWYgKHN1cmUpIHtcbiAgICAgIHZhciBwcm9qZWN0SUQgPSAkcm9vdFNjb3BlLnByb2plY3QuaWQ7XG5cbiAgICAgIFByb2plY3RzLnJlbW92ZShwcm9qZWN0SUQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ1NJREVQQU5FTDpSRU1PVkUnLCB7IGlkOiBwcm9qZWN0SUQgfSk7XG4gICAgICAgICAgJHN0YXRlLmdvKCdtYWluJyk7XG4gICAgICAgICAgJHJvb3RTY29wZS5wcm9qZWN0ID0ge307XG4gICAgICAgICAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnUHJvamVjdCBSZW1vdmVkIFN1Y2Nlc3NmdWxseScsIGR1cjogNSwgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnInLCBlcnIpO1xuICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ1NJREVQQU5FTDpSRU1PVkUnLCB7IGlkOiBwcm9qZWN0SUQgfSk7XG4gICAgICAgICAgJHN0YXRlLmdvKCdtYWluJyk7XG4gICAgICAgICAgJHJvb3RTY29wZS5wcm9qZWN0ID0ge307XG4gICAgICAgICAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkcyBhIG5ldyB2aWV3cG9ydCBpdGVtXG4gICRzY29wZS5hZGRWaWV3cG9ydCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdWaWV3cG9ydCA9IHtcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgIG5hbWU6IG51bGwsXG4gICAgICB3aWR0aDogbnVsbCxcbiAgICAgIGhlaWdodDogbnVsbFxuICAgIH07XG5cbiAgICBhZGROZXdUeXBlKCd2aWV3cG9ydHMnLCBuZXdWaWV3cG9ydCk7XG4gIH07XG5cbiAgLy8gQWRkcyBhIG5ldyBzZWxlY3RvciBpdGVtXG4gICRzY29wZS5hZGRTZWxlY3RvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdTZWxlY3RvciA9IHtcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgIHR5cGU6ICdjb250YWluZXInLFxuICAgICAgcXVlcnk6IG51bGxcbiAgICB9O1xuXG4gICAgYWRkTmV3VHlwZSgnc2VsZWN0b3JzJywgbmV3U2VsZWN0b3IpO1xuICB9O1xuXG4gIC8vIEFkZHMgYSBuZXcgY29va2llIGl0ZW1cbiAgJHNjb3BlLmFkZENvb2tpZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdDb29raWUgPSB7XG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICBuYW1lOiBudWxsLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBwYXRoOiBudWxsXG4gICAgfTtcblxuICAgIGFkZE5ld1R5cGUoJ2Nvb2tpZXMnLCBuZXdDb29raWUpO1xuICB9O1xuXG4gIC8vIGFjdGl2YXRlIGEgY29va2llL3ZpZXcvc2VsZWN0XG4gICRzY29wZS5hY3RpdmF0ZVR5cGUgPSBmdW5jdGlvbih0eXBlLCBpZCkge1xuICAgICRyb290U2NvcGUucHJvamVjdFt0eXBlXVtpZF0uYWN0aXZlID0gKCRyb290U2NvcGUucHJvamVjdFt0eXBlXVtpZF0uYWN0aXZlID09PSB0cnVlIHx8ICRyb290U2NvcGUucHJvamVjdFt0eXBlXVtpZF0uYWN0aXZlID09PSAndHJ1ZScpID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgLy8gc2F2ZSB0aGUgZmlsZSBmb3IgY29udmVuaWVuY2VcbiAgICAkc2NvcGUuc2F2ZSgpO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBhIGNvb2tpZS92aWV3L3NlbGVjdFxuICAkc2NvcGUuZGVsZXRlVHlwZUl0ZW0gPSBmdW5jdGlvbih0eXBlLCBpZCkge1xuICAgICRyb290U2NvcGUucHJvamVjdFt0eXBlXS5zcGxpY2UoaWQsIDEpO1xuXG4gICAgLy8gc2F2ZSB0aGUgZmlsZSBmb3IgY29udmVuaWVuY2VcbiAgICAkc2NvcGUuc2F2ZSgpO1xuICB9O1xuXG4gIC8vIFJlbW92ZXMgYWxsIGhpc3RvcnkgZGF0YVxuICAkc2NvcGUuY2xlYXJIaXN0b3J5ID0gZnVuY3Rpb24oKSB7XG4gICAgUHJvamVjdHMuY2xlYXJIaXN0b3J5KCRyb290U2NvcGUucHJvamVjdClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnQ2xlYXJlZCBBbGwgSGlzdG9yeSEnLCBkdXI6IDUsIHR5cGU6ICdzdWNjZXNzJywgaWNvbjogJ2hpc3RvcnknIH0pO1xuICAgICAgfVxuXG4gICAgICAsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0FMRVJUOkZJUkUnLCB7IHRpdGxlOiAnRXJyb3IgT2NjdXJyZWQhIFBsZWFzZSB0cnkgYWdhaW4uJywgZHVyOiA1LCB0eXBlOiAnZXJyb3InLCBpY29uOiAnc3RvcCcgfSk7XG4gICAgICB9KTtcbiAgfTtcblxufV0pO1xuIiwidmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuTVVHLmNvbnRyb2xsZXIoJ1NpZGVQYW5lbEN0cmwnLFxuWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckc3RhdGUnLCAnUHJvamVjdHMnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkc3RhdGUsIFByb2plY3RzKSB7XG4gICRzY29wZS5wcm9qZWN0cyA9IFtdO1xuXG4gIC8vIGdyYWIgYWxsIHByb2plY3RzIGxpc3RcbiAgJHNjb3BlLnByb2plY3RzID0gUHJvamVjdHMuZ2V0QWxsKCk7XG5cbiAgLy8gYWRkIG5ldyBwcm9qZWN0IHRvIHRoZSBwcm9qZWN0cyBsaXN0XG4gICRyb290U2NvcGUuJG9uKCdTSURFUEFORUw6TkVXUFJPSkVDVCcsIGZ1bmN0aW9uKGUsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MuaWQpIHsgcmV0dXJuOyB9XG5cbiAgICAkc2NvcGUucHJvamVjdHMudW5zaGlmdChhcmdzKTtcbiAgfSk7XG5cbiAgLy8gdXBkYXRlIHRoZSBwcm9qZWN0cyBsaXN0XG4gICRyb290U2NvcGUuJG9uKCdTSURFUEFORUw6VVBEQVRFJywgZnVuY3Rpb24oZSwgYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5pZCkgeyByZXR1cm47IH1cblxuICAgICRzY29wZS5wcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgIGlmIChvYmouaWQgPT09IGFyZ3MuaWQpIHtcbiAgICAgICAgJHNjb3BlLnByb2plY3RzW2lkeF0udGl0bGUgPSBhcmdzLnRpdGxlO1xuICAgICAgICAkc2NvcGUucHJvamVjdHNbaWR4XS50aW1lc3RhbXAgPSBhcmdzLnRpbWVzdGFtcDtcblxuICAgICAgICBpZiAoYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdKSB7XG4gICAgICAgICAgLy8gb25seSB1cGRhdGUgdG90YWxzIGlmIHdlIGhhdmUgdGhlbVxuICAgICAgICAgIGlmIChhcmdzLmJhdGNoSGlzdG9yeVthcmdzLmN1cnJlbnRCYXRjaF0uc3VjY2Vzcykge1xuICAgICAgICAgICAgJHNjb3BlLnByb2plY3RzW2lkeF0udG90YWxzLnN1Y2Nlc3MgPSBhcmdzLmJhdGNoSGlzdG9yeVthcmdzLmN1cnJlbnRCYXRjaF0uc3VjY2VzcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLndhcm5pbmcpIHtcbiAgICAgICAgICAgICRzY29wZS5wcm9qZWN0c1tpZHhdLnRvdGFscy53YXJuaW5nID0gYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLndhcm5pbmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFyZ3MuYmF0Y2hIaXN0b3J5W2FyZ3MuY3VycmVudEJhdGNoXS5lcnJvcikge1xuICAgICAgICAgICAgJHNjb3BlLnByb2plY3RzW2lkeF0udG90YWxzLmVycm9yID0gYXJncy5iYXRjaEhpc3RvcnlbYXJncy5jdXJyZW50QmF0Y2hdLmVycm9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhcmdzLmJhdGNoSGlzdG9yeVthcmdzLmN1cnJlbnRCYXRjaF0udmlld3MpIHtcbiAgICAgICAgICAgICRzY29wZS5wcm9qZWN0c1tpZHhdLnRvdGFscy52aWV3cyA9IGFyZ3MuYmF0Y2hIaXN0b3J5W2FyZ3MuY3VycmVudEJhdGNoXS52aWV3cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdXBkYXRlIHRoZSBwcm9qZWN0cyBsaXN0XG4gICRyb290U2NvcGUuJG9uKCdTSURFUEFORUw6UkVNT1ZFJywgZnVuY3Rpb24oZSwgYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5pZCkgeyByZXR1cm47IH1cblxuICAgICRzY29wZS5wcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgIGlmIChvYmouaWQgPT09IGFyZ3MuaWQpIHtcbiAgICAgICAgJHNjb3BlLnByb2plY3RzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICAkc2NvcGUuZ29Ub1Byb2plY3QgPSBmdW5jdGlvbihpZCkge1xuICAgIC8vIFRPRE86IGZpeCB0aGlzXG4gICAgLy8gdmFyIHR5cGUgPSAnc2V0dGluZ3MnO1xuICAgIHZhciB0eXBlID0gJ3J1bm5lcic7XG5cbiAgICAvLyBUT0RPOiBzZXR1cCB0byBmaWd1cmUgb3V0IGlmIHdlIG5lZWQgdG8gZ28gdG8gc2V0dGluZ3MsIG90aGVyd2lzZSBnbyB0byBydW5uZXJcbiAgICAkc3RhdGUuZ28oJ3Byb2plY3RzLicgKyB0eXBlLCB7IGlkOiBpZCB9KTtcbiAgICAkcm9vdFNjb3BlLmN1cnJlbnRQcm9qZWN0SWQgPSBpZDtcbiAgfVxuXG59XSk7XG4iLCIvKipcbiAqIENvbmZpZ1xuICovXG5NVUcuY29uc3RhbnQoJ0NvbmZpZycsIHtcbiAgRU5WOiAnU1RBR0UnLFxuICBTVEFHRToge1xuICB9LFxuICBQUk9EOiB7XG4gIH0sXG4gIENvbXBhcmU6IHtcbiAgICBlcnJvckNvbG9yOiB7XG4gICAgICByZWQ6IDI1NSxcbiAgICAgIGdyZWVuOiAwLFxuICAgICAgYmx1ZTogMjU1XG4gICAgfSxcbiAgICBlcnJvclR5cGU6ICdmbGF0JyxcbiAgICB0cmFuc3BhcmVuY3k6IDEsXG4gICAgbGFyZ2VJbWFnZVRocmVzaG9sZDogMFxuICB9XG59KTtcbiIsIk1VRy5jb25maWcoXG5bJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsXG5mdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cbiAgLy8gUm91dGVzXG4gIC8vIC9cbiAgLy8gL3Byb2plY3RzXG4gIC8vIC9wcm9qZWN0cy86aWQvcnVubmVyXG4gIC8vIC9wcm9qZWN0cy86aWQvaGlzdG9yeVxuICAvLyAvcHJvamVjdHMvOmlkL3NldHRpbmdzXG5cbiAgJHN0YXRlUHJvdmlkZXJcblxuICAvKipcbiAgICogQmFzZSBSb3V0ZVxuICAgKi9cbiAgLnN0YXRlKCdtYWluJywge1xuICAgIHVybDogJy8nLFxuICAgIHRlbXBsYXRlVXJsOiAnbWFpbi5odG1sJ1xuICB9KVxuICAuc3RhdGUoJ3ByZWZlcmVuY2VzJywge1xuICAgIHVybDogJy9wcmVmZXJlbmNlcycsXG4gICAgdGVtcGxhdGVVcmw6ICdwcmVmZXJlbmNlcy5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUHJlZmVyZW5jZXNDdHJsJ1xuICB9KVxuXG4gIC8qKlxuICAgKiBQcm9qZWN0IFJvdXRlc1xuICAgKi9cbiAgLnN0YXRlKCdwcm9qZWN0cycsIHtcbiAgICB1cmw6ICcvcHJvamVjdHMvOmlkJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2plY3RzLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0Q3RybCdcbiAgfSlcbiAgLnN0YXRlKCdwcm9qZWN0cy5zZXR0aW5ncycsIHtcbiAgICB1cmw6ICcvc2V0dGluZ3MnLFxuICAgIHRlbXBsYXRlVXJsOiAncHJvamVjdHMuc2V0dGluZ3MuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1Byb2plY3RTZXR0aW5nc0N0cmwnXG4gIH0pXG4gIC5zdGF0ZSgncHJvamVjdHMucnVubmVyJywge1xuICAgIHVybDogJy9ydW5uZXInLFxuICAgIHRlbXBsYXRlVXJsOiAncHJvamVjdHMucnVubmVyLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0UnVubmVyQ3RybCdcbiAgfSlcbiAgLnN0YXRlKCdwcm9qZWN0cy5oaXN0b3J5Jywge1xuICAgIHVybDogJy9oaXN0b3J5JyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2plY3RzLmhpc3RvcnkuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1Byb2plY3RIaXN0b3J5Q3RybCdcbiAgfSlcblxuICAvKipcbiAgICogU3RhdGljIFJvdXRlc1xuICAgKi9cblxuICAvLyAuc3RhdGUoJ21haW4uNDA0Jywge1xuICAvLyAgICAgdXJsOiBcIi80MDRcIixcbiAgLy8gICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy80MDQuaHRtbFwiLFxuICAvLyAgICAgaXNFeHRlcm5hbDogdHJ1ZVxuICAvLyB9KVxuXG4gIC8vIEVuZCBvZiB0aGUgd29ybGRcbiAgO1xuXG4gIC8vIHVybCByZS1yb3V0aW5nXG4gIC8vICR1cmxSb3V0ZXJQcm92aWRlclxuICAvLyAgIC53aGVuKCcvcHJvamVjdHMnLCAnLycpXG4gIC8vICAgLndoZW4oJy9wcm9qZWN0cy8nLCAnLycpO1xuXG4gIC8vIGlmIG5vbmUgb2YgdGhlIGFib3ZlIHN0YXRlcyBhcmUgbWF0Y2hlZCwgdXNlIHRoaXMgYXMgdGhlIGZhbGxiYWNrXG4gICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcblxufV0pO1xuIiwiTVVHLnJ1bihbJyRyb290U2NvcGUnLCAnJGh0dHAnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJGh0dHApIHtcblxuICAvLyBoZWFkZXJzXG4gIHZhciAkY29tbW9uID0gJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb247XG4gICRjb21tb25bJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKCckc3RhdGVDaGFuZ2VFcnJvcicsIGVycm9yKTtcbiAgfSk7XG5cbn1dKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==