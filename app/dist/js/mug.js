var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(e,t,r){var n=parseInt(r.fadeIn)||10;t.addClass("fade-in"),setTimeout(function(){t.css("opacity","1")},n)}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(e,t,r){return{scope:{},link:function(n,o,i,s){function a(e){var o=+new Date,i=e.msg,s=e.icon?e.icon:g,a=f.replace("BODY",i).replace("ICON",s),v=r(a)(n);v[0].id=o,p=o,d.append(v);var j=d.find("#"+o);u(j,e.type),e.callback&&j.find(".msg-action").addClass("show"),t(function(){j.addClass("add")},20),l=t(function(){c(j)},m)}function c(e){if(!e&&p)e=d.find("#"+p);else if(!e)return;e.removeClass("add"),e.addClass("remove"),t(function(){angular.element(e).remove()},300)}function u(e,t){e.removeClass("msg-info"),e.removeClass("msg-warn"),t&&e.addClass("msg-"+t)}var l,f='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',d=angular.element(o),m=5e3,p="",g="info";n.body="",n.callback=null,n.icon=g,n.action=function(){var e=d.find("#"+this.id);n.callback(),c(e)},e.$on("MSGCENTER:FIRE",function(e,t){t.msg&&(window.clearTimeout(l),c(),t.dur&&(m=1e3*t.dur),t.callback&&(n.callback=t.callback),a(t))})}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(e,t){return{restrict:"EA",link:function(r,n,o){var i;o.$observe("fromTime",function(t){i=e.parse(t)}),r.$watch(function(){return t.getTime()-i},function(t){angular.element(n).text(e.inWords(t))})}}}]),MUG.factory("nowTime",["$timeout",function(e){var t=Date.now(),r=function(){e(function(){t=Date.now(),r()},1e3)};return r(),{getTime:function(){return t}}}]);var fs=require("fs");MUG.factory("Projects",["$q",function(e){function t(e){return"number"==typeof e&&e===parseInt(e,10)&&(e=Array(e+1).join("x")),e.replace(/x/g,function(){var e=Math.round(61*Math.random())+48;return e=e>57?e+7>90?e+13:e+7:e,String.fromCharCode(e)})}function r(e){e=e||0;var r=t(12);return{id:r,title:"Project "+(parseInt(e,10)+1),timestamp:+new Date,totals:{success:null,warning:null,error:null,views:0}}}function n(e){t(12);return{id:e.id,title:e.title,timestamp:e.timestamp,viewports:[],scenarios:[{label:null,url:null,hideSelectors:null,removeSelectors:null,selectors:null,cookies:null,readyEvent:null,delay:null,misMatchThreshold:null}]}}var o=__dirname+"/projects.json",i=__dirname+"/projects/";return{createNew:function(){var t=e.defer(),s=JSON.parse(fs.readFileSync(o,"utf8")),a=r(s.length),c=n(a);return s.unshift(a),fs.writeFile(o,JSON.stringify(s),function(e){return e?void t.reject(e):void fs.writeFile(i+a.id+".json",JSON.stringify(c),function(e){return e?void t.reject(e):void t.resolve(a)})}),t.promise},getAll:function(){return JSON.parse(fs.readFileSync(o,"utf8"))},getById:function(e){return JSON.parse(fs.readFileSync(i+e+".json","utf8"))},save:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(o,"utf8"));return n.map(function(e,r){e.id===t.id&&(n[r].title=t.title,n[r].timestamp=+new Date)}),fs.writeFile(i+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(o,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve(t)})}),r.promise}}}]),MUG.factory("timeAgo",function(){function e(e){var t=e.toString().slice(0,13);return 13==t.length?parseInt(t):e}var t={};return t.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},t.inWords=function(e){function r(t,r){var o=angular.isFunction(t)?t(r,e):t,i=n.numbers&&n.numbers[r]||r;return o.replace(/%d/i,i)}var n=t.settings.strings,o=n.prefixAgo,i=n.suffixAgo;t.settings.allowFuture&&0>e&&(o=n.prefixFromNow,i=n.suffixFromNow);var s=Math.abs(e)/1e3,a=s/60,c=a/60,u=c/24,l=u/365,f=45>s&&r(n.seconds,Math.round(s))||90>s&&r(n.minute,1)||45>a&&r(n.minutes,Math.round(a))||90>a&&r(n.hour,1)||24>c&&r(n.hours,Math.round(c))||42>c&&r(n.day,1)||30>u&&r(n.days,Math.round(u))||45>u&&r(n.month,1)||365>u&&r(n.months,Math.round(u/30))||1.5>l&&r(n.year,1)||r(n.years,Math.round(l)),d=void 0===n.wordSeparator?" ":n.wordSeparator;return[o,f,i].join(d).trim()},t.parse=function(t){if(angular.isNumber(t)){t+="";var r=e(t);return parseInt(r,10)}var n=(t||"").trim();return n=n.replace(/\.\d+/,""),n=n.replace(/-/,"/").replace(/-/,"/"),n=n.replace(/T/," ").replace(/Z/," UTC"),n=n.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(n)},t}),MUG.filter("timeAgo",["nowTime","timeAgo",function(e,t){return function(r){var n=t.parse(r),o=e.getTime()-n;return t.inWords(o)}}]),MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","Projects",function(e,t,r,n,o){e.currentProjectId="",t.createNewProject=function(){o.createNew().then(function(t){e.$broadcast("SIDEPANEL:NEWPROJECT",t),r.go("projects.settings",{id:t.id})},function(e){console.log("err",e)})}}]),MUG.controller("ProjectCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){e.project=n.getById(r.id)}]),MUG.controller("ProjectHistoryCtrl",["$rootScope","$scope","Projects",function(e,t,r){}]),MUG.controller("ProjectRunnerCtrl",["$rootScope","$scope","Projects",function(e,t,r){}]),MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","Projects",function(e,t,r){t.master={},angular.copy(e.project,t.master),t.save=function(){r.save(e.project).then(function(t){e.$emit("SIDEPANEL:UPDATE",t)},function(e){console.log("err",e)})},t.cancelSave=function(){var r=confirm("Are you sure you want to clear all your changes?");r&&angular.copy(t.master,e.project)},t.deleteProject=function(){var e=confirm("Are you sure you want to delete this project?");e&&console.log("TODO: DELETE FN")}}]);var fs=require("fs");MUG.controller("SidePanelCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){t.projects=[],t.projects=n.getAll(),e.$on("SIDEPANEL:NEWPROJECT",function(e,r){r&&r.id&&t.projects.unshift(r)}),e.$on("SIDEPANEL:UPDATE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&(t.projects[n]=r)})}),t.goToProject=function(t){var n="settings";r.go("projects."+n,{id:t}),e.currentProjectId=t}}]),MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{}}),MUG.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("main",{url:"/",templateUrl:"main.html"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html",controller:"ProjectSettingsCtrl"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html",controller:"ProjectRunnerCtrl"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html",controller:"ProjectHistoryCtrl"}),t.otherwise("/")}]),MUG.run(["$rootScope","$http",function(e,t){var r=t.defaults.headers.common;r["Content-Type"]="application/json",e.$on("$stateChangeError",function(e,t,r,n,o,i){console.log("$stateChangeError",i)})}]);
//# sourceMappingURL=data:application/json;base64,