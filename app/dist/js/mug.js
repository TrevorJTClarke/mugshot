var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{}}),MUG.run(["$rootScope","$http",function(t,e){var n=e.defaults.headers.common;n["Content-Type"]="application/json"}]),MUG.config(["$stateProvider","$urlRouterProvider",function(t,e){t.state("main",{url:"/",templateUrl:"main.html",controller:"MainCtrl"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectSettingsCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html"}),e.otherwise("/")}]),MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","$http",function(t,e,n,r,o){}]),MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","$state","Config","$http",function(t,e,n,r,o){}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(t,e,n){var r=parseInt(n.fadeIn)||10;e.addClass("fade-in"),setTimeout(function(){e.css("opacity","1")},r)}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(t,e,n){return{scope:{},link:function(r,o,i,a){function s(t){var o=+new Date,i=t.msg,a=t.icon?t.icon:g,s=m.replace("BODY",i).replace("ICON",a),h=n(s)(r);h[0].id=o,p=o,d.append(h);var v=d.find("#"+o);c(v,t.type),t.callback&&v.find(".msg-action").addClass("show"),e(function(){v.addClass("add")},20),l=e(function(){u(v)},f)}function u(t){if(!t&&p)t=d.find("#"+p);else if(!t)return;t.removeClass("add"),t.addClass("remove"),e(function(){angular.element(t).remove()},300)}function c(t,e){t.removeClass("msg-info"),t.removeClass("msg-warn"),e&&t.addClass("msg-"+e)}var l,m='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',d=angular.element(o),f=5e3,p="",g="info";r.body="",r.callback=null,r.icon=g,r.action=function(){var t=d.find("#"+this.id);r.callback(),u(t)},t.$on("MSGCENTER:FIRE",function(t,e){e.msg&&(window.clearTimeout(l),u(),e.dur&&(f=1e3*e.dur),e.callback&&(r.callback=e.callback),s(e))})}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(t,e){return{restrict:"EA",link:function(n,r,o){var i;o.$observe("fromTime",function(e){i=t.parse(e)}),n.$watch(function(){return e.getTime()-i},function(e){angular.element(r).text(t.inWords(e))})}}}]),MUG.factory("nowTime",["$timeout",function(t){var e=Date.now(),n=function(){t(function(){e=Date.now(),n()},1e3)};return n(),{getTime:function(){return e}}}]),MUG.factory("timeAgo",function(){function t(t){var e=t.toString().slice(0,13);return 13==e.length?parseInt(e):t}var e={};return e.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},e.inWords=function(t){function n(e,n){var o=angular.isFunction(e)?e(n,t):e,i=r.numbers&&r.numbers[n]||n;return o.replace(/%d/i,i)}var r=e.settings.strings,o=r.prefixAgo,i=r.suffixAgo;e.settings.allowFuture&&0>t&&(o=r.prefixFromNow,i=r.suffixFromNow);var a=Math.abs(t)/1e3,s=a/60,u=s/60,c=u/24,l=c/365,m=45>a&&n(r.seconds,Math.round(a))||90>a&&n(r.minute,1)||45>s&&n(r.minutes,Math.round(s))||90>s&&n(r.hour,1)||24>u&&n(r.hours,Math.round(u))||42>u&&n(r.day,1)||30>c&&n(r.days,Math.round(c))||45>c&&n(r.month,1)||365>c&&n(r.months,Math.round(c/30))||1.5>l&&n(r.year,1)||n(r.years,Math.round(l)),d=void 0===r.wordSeparator?" ":r.wordSeparator;return[o,m,i].join(d).trim()},e.parse=function(e){if(angular.isNumber(e)){e+="";var n=t(e);return parseInt(n,10)}var r=(e||"").trim();return r=r.replace(/\.\d+/,""),r=r.replace(/-/,"/").replace(/-/,"/"),r=r.replace(/T/," ").replace(/Z/," UTC"),r=r.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(r)},e}),MUG.filter("timeAgo",["nowTime","timeAgo",function(t,e){return function(n){var r=e.parse(n),o=t.getTime()-r;return e.inWords(o)}}]);
//# sourceMappingURL=data:application/json;base64,