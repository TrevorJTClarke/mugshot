var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.directive("alert",["$rootScope","$timeout","$compile","$templateCache",function(e,t,r,n){return{restrict:"E",replace:!0,template:'<div class="alert-parent"></div>',scope:{},link:function(o,i,c,a){function s(n){var o=+new Date,i=(n.title,n.icon?n.icon:null,e.$new(!0));i.alert={},i.alert.id=o,i.alert.icon=n.icon?n.icon:null,i.alert.type=n.type?n.type:"info",i.alert.title=n.title,i.alert.action=n.callback?function(){this.id;n.callback(),u(this)}:null;var c=r(p)(i);c[0].id=o,m=o,f.append(c),c.addClass(v),t(function(){c.addClass(h)},20),l=t(function(){u(c)},d)}function u(e){if(!e&&m)e=angular.element(document.getElementById(m));else{if(!e)return;e&&(e=angular.element(e))}e.removeClass(h),t(function(){e.remove()},300)}var l,p=n.get("alert.html"),f=angular.element(i),d=5e3,m="",v="alert-active",h="alert-visible";e.$on("ALERT:FIRE",function(e,t){t.title&&(window.clearTimeout(l),u(),t.dur&&(d=1e3*t.dur),s(t))})}}}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(e,t,r){var n=parseInt(r.fadeIn)||10;t.addClass("fade-in"),setTimeout(function(){t.css("opacity","1")},n)}}}]),MUG.directive("modal",["$timeout","$compile","$rootScope",function(e,t,r){return{restrict:"E",replace:!0,templateUrl:"modal.html",scope:{},link:function(e,t,n){function o(t){var n=t.remoteSource?t.remoteSource:t.source;e.compareItem.a=t.remoteSource?n:"screens/reference/"+r.project.id+"/"+n.replace(r.project.currentBatch+".png",r.project.currentReference+".png"),e.compareItem.b=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n,e.compareItem.c=t.remoteSource?n:"screens/compare/"+r.project.id+"/"+n.replace(".png","_diff.png")}var i="modal-open",c="modal-visible";e.project=angular.copy(r.project),e.activeOption="sides",e.opacityRange={},e.currentIndex=0,e.activeItem={},e.compareItem={a:"",b:"",c:""},e.viewer={items:[]},e.opacityRange={amount:.8,inverse:.2,percent:"80%"},e.$watch("opacityRange.amount",function(t,r){t!==r&&(e.opacityRange.inverse=(1-t).toFixed(2),e.opacityRange.percent=Math.round(100*t)+"%")}),e.optionMode=function(t){e.activeOption=t},r.$on("MODAL:CLOSE",function(t,r){e.close()}),r.$on("MODAL:OPEN",function(n,a){a&&a.type&&(e.currentIndex=0,e.project=angular.copy(r.project),"preview"===a.type&&(e.activeItem=a.item,e.viewer=a.project||{},e.viewer.items=null,e.compareItem.a=e.activeItem.remoteSource?e.activeItem.remoteSource:"screens/"+e.activeItem.type+"/"+r.project.id+"/"+e.activeItem.source),"batch"===a.type&&a.items.length>0&&(e.activeItem=a.items[e.currentIndex],e.viewer=a.project||{},e.viewer.items=a.items,o(e.activeItem)),t.addClass(i),setTimeout(function(){t.addClass(c)},30))}),e.close=function(){t.removeClass(c),setTimeout(function(){t.removeClass(i)},230)},e.modalActionNav=function(t){if(!(e.viewer.items.length<1)){var r,n=e.viewer.items.length-1;r="right"===t?e.currentIndex===n?0:e.currentIndex+1:0===e.currentIndex?n:e.currentIndex-1,e.activeItem=e.viewer.items[r],e.currentIndex=r,o(e.activeItem)}},e.goToIndex=function(t){e.currentIndex!==t&&(e.activeItem=e.viewer.items[t],e.currentIndex=t,o(e.activeItem))}}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(e,t,r){return{scope:{},link:function(n,o,i,c){function a(e){var o=+new Date,i=e.msg,c=e.icon?e.icon:v,a=p.replace("BODY",i).replace("ICON",c),h=r(a)(n);h[0].id=o,m=o,f.append(h);var g=f.find("#"+o);u(g,e.type),e.callback&&g.find(".msg-action").addClass("show"),t(function(){g.addClass("add")},20),l=t(function(){s(g)},d)}function s(e){if(!e&&m)e=f.find("#"+m);else if(!e)return;e.removeClass("add"),e.addClass("remove"),t(function(){angular.element(e).remove()},300)}function u(e,t){e.removeClass("msg-info"),e.removeClass("msg-warn"),t&&e.addClass("msg-"+t)}var l,p='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',f=angular.element(o),d=5e3,m="",v="info";n.body="",n.callback=null,n.icon=v,n.action=function(){var e=f.find("#"+this.id);n.callback(),s(e)},e.$on("MSGCENTER:FIRE",function(e,t){t.msg&&(window.clearTimeout(l),s(),t.dur&&(d=1e3*t.dur),t.callback&&(n.callback=t.callback),a(t))})}}}]);var P=require("./vendor/core/preloader");MUG.directive("preloader",["$rootScope","$timeout",function(e,t){function r(e){var t=0,r=0,o=0,i=12;if(e.selectors&&e.selectors.length>0)for(var c=0;c<e.selectors.length;c++)e.selectors[c]&&"container"===e.selectors[c].type&&(o+=1);e.viewports&&e.viewports.length>0&&(r=e.viewports.length),e.meta&&e.meta.delay&&(t=parseInt(e.meta.delay,10)),n=i*r*o+30}var n=30;return{replace:!0,restrict:"E",scope:{},template:'<div class="preloader"></div>',link:function(o,i,c,a){function s(e,t){if(t&&t.msg){if(t.project&&r(t.project),!v)return v=!0,void(f=setTimeout(function(){v=!1},10*n));d=t.msg;var o;switch(d){case"Opening Browser Session":o=0;break;case"Capturing Screens":o=1}d!==m&&l&&l.animate&&l.animate(o,n,function(){m=d})}}function u(){l.resetBrowser()}var l,p,f,d,m,v=!1;t(function(){l=new P.Browser,l.init(),p=document.querySelector(".preloader"),p.appendChild(l.instance),l.drawBrowser()},30),e.$on("PRELOADER:UPDATE",s),e.$on("PRELOADER:OFF",u)}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(e,t){return{restrict:"EA",link:function(r,n,o){var i;o.$observe("fromTime",function(t){i=e.parse(t)}),r.$watch(function(){return t.getTime()-i},function(t){angular.element(n).text(e.inWords(t))})}}}]);var fs=require("fs"),async=require("async");MUG.factory("Compare",["$q","Config",function(e,t){function r(e,t){fs.readFile(o+e,"base64",t)}function n(n,o){var c=e.defer(),a={};return resemble.outputSettings(t.Compare),async.map([n,o],r,function(e,t){var r=i+t[0],n=i+t[1];e&&c.reject(e),resemble(r).compareTo(n).ignoreColors().onComplete(function(e){a.report=e,a.src=e.getImageDataUrl(),c.resolve(a)})}),c.promise}var o=__dirname+"/",i="data:image/png;base64,",c=["passed","warning","failed"];return{runSingle:n,getStatus:function(e){var t=parseFloat(e.misMatchPercentage);return.1>t?e.isSameDimensions===!1?c[1]:c[0]:t>.1&&2>t?c[1]:c[2]}}}]),MUG.factory("nowTime",["$timeout",function(e){var t=Date.now(),r=function(){e(function(){t=Date.now(),r()},1e3)};return r(),{getTime:function(){return t}}}]);var fs=require("fs"),path=require("path"),AWS=require("./vendor/core/aws");MUG.factory("Projects",["$q",function(e){function t(e){return"number"==typeof e&&e===parseInt(e,10)&&(e=Array(e+1).join("x")),e.replace(/x/g,function(){var e=Math.round(61*Math.random())+48;return e=e>57?e+7>90?e+13:e+7:e,String.fromCharCode(e)})}function r(e){e=e||0;var r=t(12);return{id:r,title:"Project "+(parseInt(e,10)+1),timestamp:+new Date,totals:{success:null,warning:null,error:null,views:0}}}function n(e){t(12);return{batchHistory:{},currentBatch:null,currentReference:null,id:e.id,title:e.title,timestamp:e.timestamp,viewports:[],selectors:[],cookies:[],meta:{url:null,readyEvent:null,delay:null,misMatchThreshold:null}}}function o(e,t){var r;try{r=fs.readFileSync(e,"utf8")}catch(n){if("ENOENT"===n.code)return t||{};throw n}return JSON.parse(r)}function i(e){try{var t=fs.readdirSync(e)}catch(r){return}if(t.length>0)for(var n=0;n<t.length;n++){var o=path.join(e,t[n]);fs.statSync(o).isFile()?fs.unlinkSync(o):rmDir(o)}}function c(t,r){var n=e.defer();return fs.writeFile(t,JSON.stringify(r),function(e){return e?void n.reject(e):void n.resolve()}),n.promise}function a(t){var r=e.defer();return fs.unlink(t,function(e){return e?void r.reject(e):void r.resolve()}),r.promise}var s=__dirname+"/projects.json",u=__dirname+"/projects/";return{get:function(e,t){return o(__dirname+e,t)},getAll:function(){return o(s,[])},getById:function(e){return o(u+e+".json")},getTypeById:function(e,t){var r=t?"_"+t:"";return o(u+e+r+".json",[])},validate:function(e){var t=e.cookies,r=e.viewports,n=e.selectors,o=e.title,i=e.meta.url,c=!0;return!r||!n||!o||!i||r.length<1||n.length<1?!1:(r&&r.map(function(e,t){e.width&&e.height&&e.name||(c=!1)}),n&&n.map(function(e,t){e.query&&e.type||(c=!1)}),t&&t.map(function(e,t){e.name&&e.path&&e.value||(c=!1)}),c)},createNew:function(){var t=e.defer(),o=JSON.parse(fs.readFileSync(s,"utf8")),i=r(o.length),c=n(i);return o.unshift(i),fs.writeFile(s,JSON.stringify(o),function(e){return e?void t.reject(e):void fs.writeFile(u+i.id+".json",JSON.stringify(c),function(e){return e?void t.reject(e):void fs.writeFile(u+i.id+"_history.json",JSON.stringify([]),function(e){return e?void t.reject(e):void t.resolve(i)})})}),t.promise},save:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(s,"utf8"));return n.map(function(e,r){e.id===t.id&&(n[r].title=t.title,n[r].timestamp=+new Date)}),fs.writeFile(u+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve(t)})}),r.promise},remove:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(s,"utf8"));return n.map(function(e,r){e.id===t&&n.splice(r,1)}),fs.unlink(u+t+".json",function(e){return e?void r.reject(e):void fs.unlink(u+t+"_history.json",function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve()})})}),r.promise},clearHistory:function(t){var r=e.defer(),n=o(s,[]);return t.currentBatch=null,t.currentReference=null,t.batchHistory={},n.map(function(e,r){e.id===t.id&&(n[r].totals.success=0,n[r].totals.warning=0,n[r].totals.error=0,n[r].totals.views=0)}),this.cleanImageFiles(t),fs.writeFile(u+t.id+"_history.json",JSON.stringify([]),function(e){return e?void r.reject(e):void fs.writeFile(u+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(s,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve()})})}),r.promise},sync:function(t){if(t){for(var r=this,n=e.defer(),o=this.getById(t),i=this.getTypeById(t,"history"),c=[],a=0;a<i.length;a++){var s=i[a];if(s.source&&-1===s.source.search("amazon")){var u=s.source,l=s.type,p=__dirname+"/screens/"+l+"/"+o.id+"/"+u;c.push({key:l+"/"+u,path:p})}}return AWS.init().upload(c,o.id).then(function(e){r.cleanAfterSync(o,e).then(n.resolve,n.reject)},function(e){n.reject(e)}),n.promise}},cleanAfterSync:function(t,r){var n=e.defer(),i=o(u+t.id+"_history.json",[]),s=[],l=[];t.updatedAt=+new Date;for(var p=0;p<r.length;p++){var f=r[p],d=f.split("/"),m=d[d.length-2],v=d[d.length-1];i.map(function(e,n){if(e.source===v&&"compare"===m){var o=__dirname+"/screens/"+m+"/"+t.id+"/"+v,c=a(o),s=a(o.replace(".","_diff."));delete i[n].source,i[n].remoteSource=r[p],l.push(c),l.push(s)}})}var h=__dirname+"/projects/"+t.id+".json",g=h.replace(".json","_history.json"),y=c(h,t),j=c(g,i);l.unshift(y),l.unshift(j),s.push({key:t.id,path:h}),s.push({key:t.id+"_history",path:g});var w=AWS.init().upload(s,t.id);return l.unshift(w),e.all(l).then(n.resolve,n.reject),n.promise},cleanImageFiles:function(e){var t=__dirname+"/screens/BASE/"+e.id,r=t.replace("BASE","compare"),n=t.replace("BASE","reference");i(r),i(n)}}}]),MUG.factory("timeAgo",function(){function e(e){var t=e.toString().slice(0,13);return 13==t.length?parseInt(t):e}var t={};return t.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},t.inWords=function(e){function r(t,r){var o=angular.isFunction(t)?t(r,e):t,i=n.numbers&&n.numbers[r]||r;return o.replace(/%d/i,i)}var n=t.settings.strings,o=n.prefixAgo,i=n.suffixAgo;t.settings.allowFuture&&0>e&&(o=n.prefixFromNow,i=n.suffixFromNow);var c=Math.abs(e)/1e3,a=c/60,s=a/60,u=s/24,l=u/365,p=45>c&&r(n.seconds,Math.round(c))||90>c&&r(n.minute,1)||45>a&&r(n.minutes,Math.round(a))||90>a&&r(n.hour,1)||24>s&&r(n.hours,Math.round(s))||42>s&&r(n.day,1)||30>u&&r(n.days,Math.round(u))||45>u&&r(n.month,1)||365>u&&r(n.months,Math.round(u/30))||1.5>l&&r(n.year,1)||r(n.years,Math.round(l)),f=void 0===n.wordSeparator?" ":n.wordSeparator;return[o,p,i].join(f).trim()},t.parse=function(t){if(angular.isNumber(t)){t+="";var r=e(t);return parseInt(r,10)}var n=(t||"").trim();return n=n.replace(/\.\d+/,""),n=n.replace(/-/,"/").replace(/-/,"/"),n=n.replace(/T/," ").replace(/Z/," UTC"),n=n.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(n)},t}),MUG.filter("timeAgo",["nowTime","timeAgo",function(e,t){return function(r){var n=t.parse(r),o=e.getTime()-n;return t.inWords(o)}}]);var ipc=require("ipc");MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","Projects",function(e,t,r,n,o){e.currentProjectId="",t.createNewProject=function(){o.createNew().then(function(t){e.$broadcast("SIDEPANEL:NEWPROJECT",t),r.go("projects.settings",{id:t.id})},function(e){console.log("err",e)})},ipc.on("NAVIGATE:TO",function(e){e&&e.location&&(console.log("NAVIGATE:TO",e),r.go(e.location))}),e.SafeApply=function(e,t){e.$$phase||e.$root.$$phase?"undefined"!=typeof t&&t():e.$apply(t)}}]);var fs=require("fs"),AWS=require("./vendor/core/aws");MUG.controller("PreferencesCtrl",["$rootScope","$scope","$state",function(e,t,r){t.awsConfig={bucket:"",accessKeyId:"",secretAccessKey:""},t.awsConfig=AWS.getConfig(),t.save=function(){AWS.setConfig(t.awsConfig)}}]),MUG.controller("ProjectCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){e.project=n.getById(r.id)}]),MUG.controller("ProjectHistoryCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){t.activeFilter="All",t.activeFilterQuery="",t.historyItems=n.getTypeById(r.id,"history"),t.changeFilter=function(e){t.activeFilter=e,t.activeFilterQuery="All"==e?"":e},t.previewItem=function(t){e.$emit("MODAL:OPEN",{type:"preview",item:t,project:e.project})}}]);var ipc=require("ipc");MUG.controller("ProjectRunnerCtrl",["$rootScope","$scope","$timeout","$stateParams","Projects",function(e,t,r,n,o){function i(e){function r(e){if(e.status){var r=0;switch(e.status){case"warning":r=1;break;case"failed":r=2}n[r].items.unshift(e),t.activeData[n[r].type]=t.activeData[n[r].type]+1}}if(!e||e.length<1)return t.hasReference=!1,[];t.activeData={},t.activeData.success=0,t.activeData.warning=0,t.activeData.error=0;var n=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];return e.map(function(e,n){e.batch===t.currentBatch&&r(e)}),t.hasReference=!0,n}function c(){if(null!==e.project.currentBatch){var r=o.getTypeById(e.project.id,"history");t.batchItems=i(r),t.runningType=e.project.currentReference>=e.project.currentBatch?"reference":"compare"}}function a(){var t=o.validate(e.project);return t||e.$broadcast("ALERT:FIRE",{title:"Please finish configuring settings!",dur:5,type:"error",icon:"stop"}),t}function s(){t.hasSettings=a(),t.hasReference=null!==e.project.currentReference,"reference"===t.runningType?t.hasCompare=!1:(t.hasCompare=null!==e.project.currentBatch&&0!==e.project.currentBatch,t.hasCompare=e.project.currentReference<=e.project.currentBatch)}function u(){e.project=o.getById(e.project.id),t.currentBatch=e.project.currentBatch,t.activeData=e.project&&e.project.batchHistory?e.project.batchHistory[t.currentBatch]:null,e.$emit("SIDEPANEL:UPDATE",e.project)}function l(){void 0===typeof e.project.meta.autoSyncAws||e.project.meta.autoSyncAws!==!0||v||(e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:3,type:"info"}),v=!0,o.sync(e.project.id).then(function(t){v=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:3,type:"success",icon:"check"})},function(t){console.log("syncNow err",t),v=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})}))}function p(r){if(r&&r.msg&&r.percent){t.progress.percent=parseInt(r.percent,10),t.progress.title=r.msg?r.msg:t.progress.title;var n=r;n.project=e.project,e.$emit("PRELOADER:UPDATE",n)}}function f(){r(function(){u(),c(),s(),l(),t.processing=!1},3)}function d(e){console.log("RUNNER:FAILED reason",e),t.processing=!1}var m=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];t.processing=!1,t.hasSettings=!1,t.hasReference=!1,t.hasCompare=!1,t.runningType="reference",t.batchItems=m,t.activeData={},t.currentBatch=e.project.currentBatch||0,t.progress={percent:0,title:"Starting"};var v=!1;u(),c(),s(),t.previewBatch=function(t){e.$emit("MODAL:OPEN",{type:"batch",items:t,project:e.project})},t.newCompare=function(){var r=a();r&&(t.runningType="compare",t.processing=!0,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"compare",projectId:e.project.id}))},t.newReference=function(){var r=a();r&&(t.processing=!0,t.runningType="reference",t.hasCompare=!1,setTimeout(function(){e.$emit("PRELOADER:ON")},10),ipc.send("RUNNER:FIRE",{type:"reference",projectId:e.project.id}))},ipc.on("RUNNER:PROGRESS",p),ipc.on("RUNNER:COMPLETE",f),ipc.on("RUNNER:FAILED",d)}]);var fs=require("fs");MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){function o(t,r){e.project[t].push(r)}function i(){var e=n.get("/config/aws.json",{});return e&&e.bucket&&e.accessKeyId&&e.secretAccessKey?!0:!1}var c;t.syncing=!1,t.selectorTypes=["container","hide","remove"],t.hasChanges=!1,t.hasAwsSettings=!1,t.master={},angular.copy(e.project,t.master),t.hasAwsSettings=i(),t.$watch("project",function(e,r){e!=r&&(t.hasChanges=!0,t.save())},!0),t.save=function(){c&&window.clearTimeout(c),c=setTimeout(function(){n.save(e.project).then(function(r){e.$emit("SIDEPANEL:UPDATE",r),angular.copy(e.project,t.master),t.hasChanges=!1},function(e){console.log("err",e)})},200)},t.syncNow=function(){t.syncing=!0,e.$broadcast("ALERT:FIRE",{title:"Sync Starting",dur:5,type:"info"}),n.sync(e.project.id).then(function(r){t.syncing=!1,e.$broadcast("ALERT:FIRE",{title:"Sync Complete",dur:5,type:"success",icon:"check"})},function(r){t.syncing=!1,console.log("syncNow err",r),e.$broadcast("ALERT:FIRE",{title:"Sync Failed",dur:5,type:"error",icon:"stope"})})},t.cancelSave=function(){var r=confirm("Are you sure you want to clear all your changes?");r&&(angular.copy(t.master,e.project),t.hasChanges=!1)},t.deleteProject=function(){var o=confirm("Are you sure you want to delete this project?");if(o){var i=e.project.id;n.remove(i).then(function(n){e.$emit("SIDEPANEL:REMOVE",{id:i}),r.go("main"),e.project={},t.hasChanges=!1,e.$broadcast("ALERT:FIRE",{title:"Project Removed Successfully",dur:5,type:"success"})},function(n){console.log("err",n),e.$emit("SIDEPANEL:REMOVE",{id:i}),r.go("main"),e.project={},t.hasChanges=!1})}},t.addViewport=function(){var e={active:!0,name:null,width:null,height:null};o("viewports",e)},t.addSelector=function(){var e={active:!0,type:"container",query:null};o("selectors",e)},t.addCookie=function(){var e={active:!0,name:null,value:null,path:null};o("cookies",e)},t.activateType=function(r,n){e.project[r][n].active=e.project[r][n].active===!0||"true"===e.project[r][n].active?!1:!0,t.save()},t.deleteTypeItem=function(r,n){e.project[r].splice(n,1),t.save()},t.clearHistory=function(){n.clearHistory(e.project).then(function(t){e.$broadcast("ALERT:FIRE",{title:"Cleared All History!",dur:5,type:"success",icon:"history"})},function(t){e.$broadcast("ALERT:FIRE",{title:"Error Occurred! Please try again.",dur:5,type:"error",icon:"stop"})})}}]);var fs=require("fs");MUG.controller("SidePanelCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){t.projects=[],t.projects=n.getAll(),e.$on("SIDEPANEL:NEWPROJECT",function(e,r){r&&r.id&&t.projects.unshift(r)}),e.$on("SIDEPANEL:UPDATE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&(t.projects[n].title=r.title,t.projects[n].timestamp=r.timestamp,r.batchHistory[r.currentBatch]&&(r.batchHistory[r.currentBatch].success&&(t.projects[n].totals.success=r.batchHistory[r.currentBatch].success),r.batchHistory[r.currentBatch].warning&&(t.projects[n].totals.warning=r.batchHistory[r.currentBatch].warning),r.batchHistory[r.currentBatch].error&&(t.projects[n].totals.error=r.batchHistory[r.currentBatch].error),r.batchHistory[r.currentBatch].views&&(t.projects[n].totals.views=r.batchHistory[r.currentBatch].views)))})}),e.$on("SIDEPANEL:REMOVE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&t.projects.splice(n,1)})}),t.goToProject=function(t){var n="runner";r.go("projects."+n,{id:t}),e.currentProjectId=t}}]),MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{},Compare:{errorColor:{red:255,green:0,blue:255},errorType:"flat",transparency:1,largeImageThreshold:0}}),MUG.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("main",{url:"/",templateUrl:"main.html"}).state("preferences",{url:"/preferences",templateUrl:"preferences.html",controller:"PreferencesCtrl"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html",controller:"ProjectSettingsCtrl"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html",controller:"ProjectRunnerCtrl"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html",controller:"ProjectHistoryCtrl"}),t.otherwise("/")}]),MUG.run(["$rootScope","$http",function(e,t){var r=t.defaults.headers.common;r["Content-Type"]="application/json",e.$on("$stateChangeError",function(e,t,r,n,o,i){console.log("$stateChangeError",i)})}]);
//# sourceMappingURL=data:application/json;base64,