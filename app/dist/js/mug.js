var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.directive("alert",["$rootScope","$timeout","$compile","$templateCache",function(e,t,r,n){return{restrict:"E",replace:!0,template:'<div class="alert-parent"></div>',scope:{},link:function(o,i,a,c){function s(n){var o=+new Date,i=(n.title,n.icon?n.icon:null,e.$new(!0));i.alert={},i.alert.id=o,i.alert.icon=n.icon?n.icon:null,i.alert.type=n.type?n.type:"info",i.alert.title=n.title,i.alert.action=n.callback?function(){this.id;n.callback(),u(this)}:null;var a=r(m)(i);a[0].id=o,d=o,p.append(a),a.addClass(v),t(function(){a.addClass(g)},20),l=t(function(){u(a)},f)}function u(e){if(!e&&d)e=angular.element(document.getElementById(d));else{if(!e)return;e&&(e=angular.element(e))}e.removeClass(g),t(function(){e.remove()},300)}var l,m=n.get("alert.html"),p=angular.element(i),f=5e3,d="",v="alert-active",g="alert-visible";e.$on("ALERT:FIRE",function(e,t){t.title&&(window.clearTimeout(l),u(),t.dur&&(f=1e3*t.dur),s(t))})}}}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(e,t,r){var n=parseInt(r.fadeIn)||10;t.addClass("fade-in"),setTimeout(function(){t.css("opacity","1")},n)}}}]),MUG.directive("modal",["$timeout","$compile","$rootScope","Compare",function(e,t,r,n){return{restrict:"E",replace:!0,templateUrl:"modal.html",scope:{},link:function(e,t,o){function i(t){var r="screens/compare/body_tablet_projectIdRandum_0.png";n.runSingle(t,r).then(function(t){console.log("res",t),e.compareItem.b.src=r,e.compareItem.c=t,e.activeItem.analysis=t.report.analysisTime,e.activeItem.status=n.getStatus(t.report)},function(e){console.log("err",e)})}var a="modal-open",c="modal-visible";e.activeOption="sides",e.opacityRange={},e.currentIndex=0,e.activeItem={},e.compareItem={b:{},c:{}},e.viewer={items:[]},e.opacityRange={amount:.8,inverse:.2,percent:"80%"},e.$watch("opacityRange.amount",function(t,r){t!==r&&(e.opacityRange.inverse=(1-t).toFixed(2),e.opacityRange.percent=Math.round(100*t)+"%")}),e.optionMode=function(t){e.activeOption=t},r.$on("MODAL:CLOSE",function(t,r){e.close()}),r.$on("MODAL:OPEN",function(r,n){n&&n.type&&(e.currentIndex=0,"preview"===n.type&&(e.activeItem=n.item,e.viewer=n.project||{},e.viewer.items=null),"batch"===n.type&&n.items.length>0&&(e.activeItem=n.items[e.currentIndex],e.viewer=n.project||{},e.viewer.items=n.items,i(e.activeItem.source)),t.addClass(a),setTimeout(function(){t.addClass(c)},30))}),e.close=function(){t.removeClass(c),setTimeout(function(){t.removeClass(a)},230)},e.modalActionNav=function(t){if(!(e.viewer.items.length<1)){var r,n=e.viewer.items.length-1;r="right"===t?e.currentIndex===n?0:e.currentIndex+1:0===e.currentIndex?n:e.currentIndex-1,e.activeItem=e.viewer.items[r],e.currentIndex=r,i(e.activeItem.source)}},e.goToIndex=function(t){e.currentIndex!==t&&(e.activeItem=e.viewer.items[t],e.currentIndex=t,i(e.activeItem.source))}}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(e,t,r){return{scope:{},link:function(n,o,i,a){function c(e){var o=+new Date,i=e.msg,a=e.icon?e.icon:v,c=m.replace("BODY",i).replace("ICON",a),g=r(c)(n);g[0].id=o,d=o,p.append(g);var h=p.find("#"+o);u(h,e.type),e.callback&&h.find(".msg-action").addClass("show"),t(function(){h.addClass("add")},20),l=t(function(){s(h)},f)}function s(e){if(!e&&d)e=p.find("#"+d);else if(!e)return;e.removeClass("add"),e.addClass("remove"),t(function(){angular.element(e).remove()},300)}function u(e,t){e.removeClass("msg-info"),e.removeClass("msg-warn"),t&&e.addClass("msg-"+t)}var l,m='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',p=angular.element(o),f=5e3,d="",v="info";n.body="",n.callback=null,n.icon=v,n.action=function(){var e=p.find("#"+this.id);n.callback(),s(e)},e.$on("MSGCENTER:FIRE",function(e,t){t.msg&&(window.clearTimeout(l),s(),t.dur&&(f=1e3*t.dur),t.callback&&(n.callback=t.callback),c(t))})}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(e,t){return{restrict:"EA",link:function(r,n,o){var i;o.$observe("fromTime",function(t){i=e.parse(t)}),r.$watch(function(){return t.getTime()-i},function(t){angular.element(n).text(e.inWords(t))})}}}]);var fs=require("fs"),async=require("async");MUG.factory("Compare",["$q","Config",function(e,t){function r(e,t){fs.readFile(o+e,"base64",t)}function n(n,o){var a=e.defer(),c={};return resemble.outputSettings(t.Compare),async.map([n,o],r,function(e,t){var r=i+t[0],n=i+t[1];e&&a.reject(e),resemble(r).compareTo(n).ignoreColors().onComplete(function(e){c.report=e,c.src=e.getImageDataUrl(),a.resolve(c)})}),a.promise}var o=__dirname+"/",i="data:image/png;base64,",a=["passed","warning","failed"];return{runSingle:n,getStatus:function(e){var t=parseFloat(e.misMatchPercentage);return.1>t?e.isSameDimensions===!1?a[1]:a[0]:t>.1&&2>t?a[1]:a[2]}}}]),MUG.factory("nowTime",["$timeout",function(e){var t=Date.now(),r=function(){e(function(){t=Date.now(),r()},1e3)};return r(),{getTime:function(){return t}}}]);var fs=require("fs");MUG.factory("Projects",["$q",function(e){function t(e){return"number"==typeof e&&e===parseInt(e,10)&&(e=Array(e+1).join("x")),e.replace(/x/g,function(){var e=Math.round(61*Math.random())+48;return e=e>57?e+7>90?e+13:e+7:e,String.fromCharCode(e)})}function r(e){e=e||0;var r=t(12);return{id:r,title:"Project "+(parseInt(e,10)+1),timestamp:+new Date,totals:{success:null,warning:null,error:null,views:0}}}function n(e){t(12);return{id:e.id,title:e.title,timestamp:e.timestamp,viewports:[],selectors:[],cookies:[],meta:{url:null,readyEvent:null,delay:null,misMatchThreshold:null}}}function o(e,t){var r;try{r=fs.readFileSync(e,"utf8")}catch(n){if("ENOENT"===n.code)return t||{};throw n}return JSON.parse(r)}var i=__dirname+"/projects.json",a=__dirname+"/projects/";return{getAll:function(){return o(i,[])},getById:function(e){return o(a+e+".json")},getTypeById:function(e,t){return o(a+e+"_"+t+".json",[])},createNew:function(){var t=e.defer(),o=JSON.parse(fs.readFileSync(i,"utf8")),c=r(o.length),s=n(c);return o.unshift(c),fs.writeFile(i,JSON.stringify(o),function(e){return e?void t.reject(e):void fs.writeFile(a+c.id+".json",JSON.stringify(s),function(e){return e?void t.reject(e):void t.resolve(c)})}),t.promise},save:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(i,"utf8"));return n.map(function(e,r){e.id===t.id&&(n[r].title=t.title,n[r].timestamp=+new Date)}),fs.writeFile(a+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(i,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve(t)})}),r.promise},remove:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(i,"utf8"));return n.map(function(e,r){e.id===t&&n.splice(r,1)}),fs.unlink(a+t+".json",function(e){return e?void r.reject(e):void fs.writeFile(i,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve()})}),r.promise}}}]),MUG.factory("timeAgo",function(){function e(e){var t=e.toString().slice(0,13);return 13==t.length?parseInt(t):e}var t={};return t.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},t.inWords=function(e){function r(t,r){var o=angular.isFunction(t)?t(r,e):t,i=n.numbers&&n.numbers[r]||r;return o.replace(/%d/i,i)}var n=t.settings.strings,o=n.prefixAgo,i=n.suffixAgo;t.settings.allowFuture&&0>e&&(o=n.prefixFromNow,i=n.suffixFromNow);var a=Math.abs(e)/1e3,c=a/60,s=c/60,u=s/24,l=u/365,m=45>a&&r(n.seconds,Math.round(a))||90>a&&r(n.minute,1)||45>c&&r(n.minutes,Math.round(c))||90>c&&r(n.hour,1)||24>s&&r(n.hours,Math.round(s))||42>s&&r(n.day,1)||30>u&&r(n.days,Math.round(u))||45>u&&r(n.month,1)||365>u&&r(n.months,Math.round(u/30))||1.5>l&&r(n.year,1)||r(n.years,Math.round(l)),p=void 0===n.wordSeparator?" ":n.wordSeparator;return[o,m,i].join(p).trim()},t.parse=function(t){if(angular.isNumber(t)){t+="";var r=e(t);return parseInt(r,10)}var n=(t||"").trim();return n=n.replace(/\.\d+/,""),n=n.replace(/-/,"/").replace(/-/,"/"),n=n.replace(/T/," ").replace(/Z/," UTC"),n=n.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(n)},t}),MUG.filter("timeAgo",["nowTime","timeAgo",function(e,t){return function(r){var n=t.parse(r),o=e.getTime()-n;return t.inWords(o)}}]),MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","Projects",function(e,t,r,n,o){e.currentProjectId="",t.createNewProject=function(){o.createNew().then(function(t){e.$broadcast("SIDEPANEL:NEWPROJECT",t),r.go("projects.settings",{id:t.id})},function(e){console.log("err",e)})},e.$emit("ALERT:FIRE",{title:"Hey there, Im an alert!!",dur:5,type:"success"}),setTimeout(function(){e.$emit("ALERT:FIRE",{title:"Hey there, Im an error!!",dur:5,type:"error",icon:"stop"})},3e3)}]),MUG.controller("ProjectCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){e.project=n.getById(r.id)}]),MUG.controller("ProjectHistoryCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){t.activeFilter="All",t.activeFilterQuery="",t.historyItems=n.getTypeById(r.id,"history"),t.changeFilter=function(e){t.activeFilter=e,t.activeFilterQuery="All"==e?"":e},t.previewItem=function(t){e.$emit("MODAL:OPEN",{type:"preview",item:t,project:e.project})}}]),MUG.controller("ProjectRunnerCtrl",["$rootScope","$scope","$timeout","$stateParams","Projects",function(e,t,r,n,o){function i(e){function r(e){if(e.status){var t=0;switch(e.status){case"warning":t=1;break;case"failed":t=2}n[t].items.unshift(e)}}if(!e||e.length<1)return t.hasReference=!1,[];var n=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];return e.map(function(e,n){e.batch===t.currentBatch&&r(e)}),n}t.processing=!1,t.hasSettings=!0,t.hasReference=!0,t.activeFilter="All",t.batchItems=[],t.activeData={},t.currentBatch=e.project.currentBatch||0,t.progress={percent:0},t.activeData=e.project&&e.project.batchHistory?e.project.batchHistory[t.currentBatch]:null,t.changeFilter=function(e){t.activeFilter=e};var a=o.getTypeById(n.id,"history");t.batchItems=i(a),t.previewBatch=function(t){e.$emit("MODAL:OPEN",{type:"batch",items:t,project:e.project})},t.runNewTest=function(){t.processing=!0,r(function(){t.progress.percent=12},200),r(function(){t.progress.percent=56},700),r(function(){t.progress.percent=93},1800),r(function(){t.processing=!1},2e3)},e.$on("RUNNER:PROGRESS:UPDATE",function(e,r){r&&(t.progress.percent=parseInt(r.percent,10))})}]),MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){function o(t,r){e.project[t].push(r)}var i;t.selectorTypes=["container","hide","remove"],t.hasChanges=!1,t.master={},angular.copy(e.project,t.master),t.$watch("project",function(e,r){e!=r&&(t.hasChanges=!0,t.save())},!0),t.save=function(){i&&window.clearTimeout(i),i=setTimeout(function(){n.save(e.project).then(function(r){e.$emit("SIDEPANEL:UPDATE",r),angular.copy(e.project,t.master),t.hasChanges=!1},function(e){console.log("err",e)})},200)},t.cancelSave=function(){var r=confirm("Are you sure you want to clear all your changes?");r&&(angular.copy(t.master,e.project),t.hasChanges=!1)},t.deleteProject=function(){var o=confirm("Are you sure you want to delete this project?");if(o){var i=e.project.id;n.remove(i).then(function(n){e.$emit("SIDEPANEL:REMOVE",{id:i}),r.go("main"),e.project={},t.hasChanges=!1},function(e){console.log("err",e)})}},t.addViewport=function(){var e={active:!0,name:null,width:null,height:null};o("viewports",e)},t.addSelector=function(){var e={active:!0,type:"container",query:null};o("selectors",e)},t.addCookie=function(){var e={active:!0,name:null,value:null,path:null};o("cookies",e)},t.activateType=function(r,n){e.project[r][n].active=e.project[r][n].active===!0||"true"===e.project[r][n].active?!1:!0,t.save()},t.deleteTypeItem=function(r,n){e.project[r].splice(n,1),t.save()}}]);var fs=require("fs");MUG.controller("SidePanelCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){t.projects=[],t.projects=n.getAll(),e.$on("SIDEPANEL:NEWPROJECT",function(e,r){r&&r.id&&t.projects.unshift(r)}),e.$on("SIDEPANEL:UPDATE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&(t.projects[n]=r)})}),e.$on("SIDEPANEL:REMOVE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&t.projects.splice(n,1)})}),t.goToProject=function(t){var n="runner";r.go("projects."+n,{id:t}),e.currentProjectId=t}}]),MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{},Compare:{errorColor:{red:255,green:0,blue:255},errorType:"flat",transparency:1,largeImageThreshold:0}}),MUG.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("main",{url:"/",templateUrl:"main.html"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html",controller:"ProjectSettingsCtrl"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html",controller:"ProjectRunnerCtrl"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html",controller:"ProjectHistoryCtrl"}),t.otherwise("/")}]),MUG.run(["$rootScope","$http",function(e,t){var r=t.defaults.headers.common;r["Content-Type"]="application/json",e.$on("$stateChangeError",function(e,t,r,n,o,i){console.log("$stateChangeError",i)})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFsZXJ0LmpzIiwiZmFkZWluLmpzIiwibW9kYWwuanMiLCJtc2djZW50ZXIuanMiLCJ0aW1lYWdvLmpzIiwiY29tcGFyZS5qcyIsIm5vd3RpbWUuanMiLCJwcm9qZWN0cy5qcyIsInRpbWUtYWdvLmpzIiwibWFpbmN0cmwuanMiLCJwcm9qZWN0Y3RybC5qcyIsInByb2plY3RoaXN0b3J5Y3RybC5qcyIsInByb2plY3RydW5uZXJjdHJsLmpzIiwicHJvamVjdHNldHRpbmdzY3RybC5qcyIsInNpZGVwYW5lbGN0cmwuanMiLCJjb25maWcuanMiLCJyb3V0ZXMuanMiLCJpbml0LmpzIl0sIm5hbWVzIjpbIk1VRyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJkaXJlY3RpdmUiLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCIkY29tcGlsZSIsIiR0ZW1wbGF0ZUNhY2hlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwidGVtcGxhdGUiLCJzY29wZSIsImxpbmsiLCJlbCIsImF0dHJzIiwiY3RybCIsInNob3dNZXNzYWdlIiwiZGF0YSIsIl9pZCIsIkRhdGUiLCIkdG1wU2NvcGUiLCJ0aXRsZSIsImljb24iLCIkbmV3IiwiYWxlcnQiLCJpZCIsInR5cGUiLCJhY3Rpb24iLCJjYWxsYmFjayIsInRoaXMiLCJjbGVhckVsIiwiYWxlcnRFbCIsImFsZXJ0VGVtcGxhdGUiLCJwcmV2aW91c0lkIiwiX2VsIiwiYXBwZW5kIiwiYWRkQ2xhc3MiLCJhbGVydEFjdGl2ZSIsImFsZXJ0VmlzaWJsZSIsInRpbWVyIiwiZHVyYXRpb24iLCJlbGVtIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsImdldCIsIiRvbiIsImUiLCJ3aW5kb3ciLCJjbGVhclRpbWVvdXQiLCJkdXIiLCJvZmZzZXQiLCJwYXJzZUludCIsImZhZGVJbiIsInNldFRpbWVvdXQiLCJjc3MiLCJDb21wYXJlIiwidGVtcGxhdGVVcmwiLCIkc2NvcGUiLCIkZWxlbWVudCIsIiRhdHRyIiwiY29tcGFyZVNpbmdsZSIsImEiLCJiIiwicnVuU2luZ2xlIiwidGhlbiIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJjb21wYXJlSXRlbSIsInNyYyIsImMiLCJhY3RpdmVJdGVtIiwiYW5hbHlzaXMiLCJyZXBvcnQiLCJhbmFseXNpc1RpbWUiLCJzdGF0dXMiLCJnZXRTdGF0dXMiLCJlcnIiLCJtb2RhbEFjdGl2ZSIsIm1vZGFsVmlzaWJsZSIsImFjdGl2ZU9wdGlvbiIsIm9wYWNpdHlSYW5nZSIsImN1cnJlbnRJbmRleCIsInZpZXdlciIsIml0ZW1zIiwiYW1vdW50IiwiaW52ZXJzZSIsInBlcmNlbnQiLCIkd2F0Y2giLCJudiIsIm92IiwidG9GaXhlZCIsIk1hdGgiLCJyb3VuZCIsIm9wdGlvbk1vZGUiLCJhcmdzIiwiY2xvc2UiLCJpdGVtIiwicHJvamVjdCIsImxlbmd0aCIsInNvdXJjZSIsIm1vZGFsQWN0aW9uTmF2IiwibmV4dElkeCIsInRvdGFsIiwiZ29Ub0luZGV4IiwiaWR4IiwibmV3Qm9keSIsIm1zZyIsIm5ld0ljbiIsImRlZmF1bHRJY29uIiwibXNnVGVtcGxhdGUiLCJuZXdNZXNzYWdlIiwibXNnRWwiLCJmaW5kIiwiY2hhbmdlVHlwZSIsImJvZHkiLCJhY3Rpb25FbCIsInRpbWVBZ28iLCJub3dUaW1lIiwiZnJvbVRpbWUiLCIkb2JzZXJ2ZSIsInZhbHVlIiwicGFyc2UiLCJnZXRUaW1lIiwidGV4dCIsImluV29yZHMiLCJmcyIsInJlcXVpcmUiLCJhc3luYyIsImZhY3RvcnkiLCIkcSIsIkNvbmZpZyIsInJlYWRBc3luYyIsImZpbGUiLCJyZWFkRmlsZSIsImZpbGVEaXJQcmVmaXgiLCJkZmQiLCJkZWZlciIsIm91dHB1dCIsInJlc2VtYmxlIiwib3V0cHV0U2V0dGluZ3MiLCJtYXAiLCJyZXN1bHRzIiwiYURhdGEiLCJpbWFnZVByZWZpeCIsImJEYXRhIiwicmVqZWN0IiwiY29tcGFyZVRvIiwiaWdub3JlQ29sb3JzIiwib25Db21wbGV0ZSIsImRpZmZEYXRhIiwiZ2V0SW1hZ2VEYXRhVXJsIiwicmVzb2x2ZSIsInByb21pc2UiLCJfX2Rpcm5hbWUiLCJzdGF0dXNUeXBlcyIsIm1pc01hdGNoVmFsdWUiLCJwYXJzZUZsb2F0IiwibWlzTWF0Y2hQZXJjZW50YWdlIiwiaXNTYW1lRGltZW5zaW9ucyIsIm5vdyIsInVwZGF0ZVRpbWUiLCJjcmVhdGVVVUlEIiwicyIsIkFycmF5Iiwiam9pbiIsIm4iLCJyYW5kb20iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjcmVhdGVEdW1teVByb2plY3QiLCJwcm9qZWN0SWQiLCJ0aW1lc3RhbXAiLCJ0b3RhbHMiLCJzdWNjZXNzIiwid2FybmluZyIsImVycm9yIiwidmlld3MiLCJjcmVhdGVEdW1teVByb2plY3RGaWxlIiwib3B0aW9ucyIsInZpZXdwb3J0cyIsInNlbGVjdG9ycyIsImNvb2tpZXMiLCJtZXRhIiwidXJsIiwicmVhZHlFdmVudCIsImRlbGF5IiwibWlzTWF0Y2hUaHJlc2hvbGQiLCJnZXRKc29uRmlsZSIsInBhdGgiLCJyZWFkRmlsZVN5bmMiLCJjb2RlIiwiSlNPTiIsInByb2plY3RzUGF0aCIsInByb2plY3RGaWxlc1BhdGgiLCJnZXRBbGwiLCJnZXRCeUlkIiwiZ2V0VHlwZUJ5SWQiLCJjcmVhdGVOZXciLCJhbGxQcm9qZWN0cyIsIm5ld1Byb2plY3REYXRhIiwibmV3UHJvamVjdEZpbGUiLCJ1bnNoaWZ0Iiwid3JpdGVGaWxlIiwic3RyaW5naWZ5Iiwic2F2ZSIsInByb2plY3REYXRhIiwib2JqIiwic3BsaWNlIiwidW5saW5rIiwidHJpbURpZ2l0cyIsIm51bSIsIm0iLCJ0b1N0cmluZyIsInNsaWNlIiwic2VydmljZSIsInNldHRpbmdzIiwicmVmcmVzaE1pbGxpcyIsImFsbG93RnV0dXJlIiwic3RyaW5ncyIsInByZWZpeEFnbyIsInByZWZpeEZyb21Ob3ciLCJzdWZmaXhBZ28iLCJzdWZmaXhGcm9tTm93Iiwic2Vjb25kcyIsIm1pbnV0ZSIsIm1pbnV0ZXMiLCJob3VyIiwiaG91cnMiLCJkYXkiLCJkYXlzIiwibW9udGgiLCJtb250aHMiLCJ5ZWFyIiwieWVhcnMiLCJudW1iZXJzIiwiZGlzdGFuY2VNaWxsaXMiLCJzdWJzdGl0dXRlIiwic3RyaW5nT3JGdW5jdGlvbiIsIm51bWJlciIsInN0cmluZyIsImlzRnVuY3Rpb24iLCIkbCIsInByZWZpeCIsInN1ZmZpeCIsImFicyIsIndvcmRzIiwic2VwYXJhdG9yIiwidW5kZWZpbmVkIiwid29yZFNlcGFyYXRvciIsInRyaW0iLCJpc284NjAxIiwiaXNOdW1iZXIiLCJvcmlnaW5hbFRpbWVzdGFtcCIsImZpbHRlciIsImRpZmYiLCJjb250cm9sbGVyIiwiJHN0YXRlIiwiUHJvamVjdHMiLCJjdXJyZW50UHJvamVjdElkIiwiY3JlYXRlTmV3UHJvamVjdCIsIiRicm9hZGNhc3QiLCJnbyIsIiRlbWl0IiwiJHN0YXRlUGFyYW1zIiwiYWN0aXZlRmlsdGVyIiwiYWN0aXZlRmlsdGVyUXVlcnkiLCJoaXN0b3J5SXRlbXMiLCJjaGFuZ2VGaWx0ZXIiLCJwcmV2aWV3SXRlbSIsInByb2Nlc3NCYXRjaCIsImFsbERhdGEiLCJwbGFjZUl0ZW0iLCJ0YXJnZXQiLCJmb3JtYXR0ZWQiLCJoYXNSZWZlcmVuY2UiLCJiYXRjaCIsImN1cnJlbnRCYXRjaCIsInByb2Nlc3NpbmciLCJoYXNTZXR0aW5ncyIsImJhdGNoSXRlbXMiLCJhY3RpdmVEYXRhIiwicHJvZ3Jlc3MiLCJiYXRjaEhpc3RvcnkiLCJoaXN0b3J5RGF0YSIsInByZXZpZXdCYXRjaCIsInJ1bk5ld1Rlc3QiLCJhZGROZXdUeXBlIiwicHVzaCIsInNhdmVUaW1lciIsInNlbGVjdG9yVHlwZXMiLCJoYXNDaGFuZ2VzIiwibWFzdGVyIiwiY29weSIsIm5WIiwib1YiLCJjYW5jZWxTYXZlIiwic3VyZSIsImNvbmZpcm0iLCJkZWxldGVQcm9qZWN0IiwicHJvamVjdElEIiwiYWRkVmlld3BvcnQiLCJuZXdWaWV3cG9ydCIsImFjdGl2ZSIsIm5hbWUiLCJ3aWR0aCIsImhlaWdodCIsImFkZFNlbGVjdG9yIiwibmV3U2VsZWN0b3IiLCJxdWVyeSIsImFkZENvb2tpZSIsIm5ld0Nvb2tpZSIsImFjdGl2YXRlVHlwZSIsImRlbGV0ZVR5cGVJdGVtIiwicHJvamVjdHMiLCJnb1RvUHJvamVjdCIsImNvbnN0YW50IiwiRU5WIiwiU1RBR0UiLCJQUk9EIiwiZXJyb3JDb2xvciIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImVycm9yVHlwZSIsInRyYW5zcGFyZW5jeSIsImxhcmdlSW1hZ2VUaHJlc2hvbGQiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInN0YXRlIiwib3RoZXJ3aXNlIiwicnVuIiwiJGh0dHAiLCIkY29tbW9uIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLFdBQUEsWUFBQSxnQkNtQkFGLEtBQUFHLFVBQUEsU0FDQSxhQUFBLFdBQUEsV0FBQSxpQkFDQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQ0FDLFNBQUEsSUFDQUMsU0FBQSxFQUNBQyxTQUFBLG1DQUNBQyxTQUNBQyxLQUFBLFNBQUFELEVBQUFFLEVBQUFDLEVBQUFDLEdBU0EsUUFBQUMsR0FBQUMsR0FDQSxHQUFBQyxJQUFBLEdBQUFDLE1BR0FDLEdBRkFILEVBQUFJLE1BQ0FKLEVBQUEsS0FBQUEsRUFBQUssS0FBQSxLQUNBbEIsRUFBQW1CLE1BQUEsR0FHQUgsR0FBQUksU0FDQUosRUFBQUksTUFBQUMsR0FBQVAsRUFDQUUsRUFBQUksTUFBQUYsS0FBQUwsRUFBQSxLQUFBQSxFQUFBSyxLQUFBLEtBQ0FGLEVBQUFJLE1BQUFFLEtBQUFULEVBQUEsS0FBQUEsRUFBQVMsS0FBQSxPQUNBTixFQUFBSSxNQUFBSCxNQUFBSixFQUFBSSxNQUNBRCxFQUFBSSxNQUFBRyxPQUFBVixFQUFBVyxTQUFB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bUJBRUE3VSxFQUFBNEMsSUFBQSxvQkFBQSxTQUFBcVMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXRLLEdBQ0E5RyxRQUFBQyxJQUFBLG9CQUFBNkciLCJmaWxlIjoibXVnLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIE1VRyA9IGFuZ3VsYXIubW9kdWxlKCdtdWdzaG90JywgWyd1aS5yb3V0ZXInLCAnbXVndGVtcGxhdGVzJ10pO1xuIiwiLyoqXG4gKiBhbGVydFxuICogYSBkaXJlY3RpdmUgZm9yIGhhbmRsaW5nIGFsbCBhbGVydHMgYW5kIG5vdGljZXMgZm9yIGEgdXNlclxuICpcbiAqIFVTRTpcbiAqIDxhbGVydD48L2FsZXJ0PlxuICpcbiAqICRyb290U2NvcGUuJGJyb2FkY2FzdCgnQUxFUlQ6RklSRScsIHsgdGl0bGU6IFwiSGV5IHRoZXJlLCBJbSBhIG1lc3NhZ2UhIVwiLCBkdXI6IDUsIHR5cGU6IFwiaW5mb1wiLCBpY29uOiBcImluZm9cIiwgY2FsbGJhY2s6IGZ1bmN0aW9uKCl7fSB9KTtcbiAqXG4gKiBUWVBFUzpcbiAqIC0gaW5mbywgc3VjY2Vzcywgd2FybmluZywgZXJyb3JcbiAqXG4gKiBPUFRJT05TOlxuICogLSB0aXRsZTogdGhlIGNvbnRlbnRzIG9mIHRoZSBtZXNzYWdlLCAoVE9ETzogY2FuIGJlIGh0bWwgb3Igc2ltcGxlIHRleHQpXG4gKiAtIGNhbGxiYWNrOiBhIGZ1bmN0aW9uIHRvIGZpcmUgb24gYWN0aW9uIHRha2VuIG9uIG1lc3NhZ2VcbiAqIC0gZHVyOiB0aGUgdGltZW91dCBvZiB0aGUgbWVzc2FnZSwgaW4gc2Vjb25kc1xuICogLSB0eXBlOiBzZWUgYWJvdmUgdHlwZXNcbiAqIC0gaWNvbjogbm8gZGVmYXVsdCwgc2VlIGh0dHBzOi8vb2N0aWNvbnMuZ2l0aHViLmNvbS8gZm9yIG9wdGlvbnNcbiAqL1xuTVVHLmRpcmVjdGl2ZSgnYWxlcnQnLFxuWyckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRjb21waWxlJywgJyR0ZW1wbGF0ZUNhY2hlJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICR0aW1lb3V0LCAkY29tcGlsZSwgJHRlbXBsYXRlQ2FjaGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwiYWxlcnQtcGFyZW50XCI+PC9kaXY+JyxcbiAgICBzY29wZToge30sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsLCBhdHRycywgY3RybCkge1xuICAgICAgdmFyIGFsZXJ0VGVtcGxhdGUgPSAkdGVtcGxhdGVDYWNoZS5nZXQoJ2FsZXJ0Lmh0bWwnKTtcbiAgICAgIHZhciBfZWwgPSBhbmd1bGFyLmVsZW1lbnQoZWwpO1xuICAgICAgdmFyIHRpbWVyO1xuICAgICAgdmFyIGR1cmF0aW9uID0gNTAwMDtcbiAgICAgIHZhciBwcmV2aW91c0lkID0gJyc7XG4gICAgICB2YXIgYWxlcnRBY3RpdmUgPSAnYWxlcnQtYWN0aXZlJztcbiAgICAgIHZhciBhbGVydFZpc2libGUgPSAnYWxlcnQtdmlzaWJsZSc7XG5cbiAgICAgIGZ1bmN0aW9uIHNob3dNZXNzYWdlKGRhdGEpIHtcbiAgICAgICAgdmFyIF9pZCA9ICgrbmV3IERhdGUoKSk7XG4gICAgICAgIHZhciBuZXdCb2R5ID0gZGF0YS50aXRsZTtcbiAgICAgICAgdmFyIG5ld0ljbiA9IChkYXRhLmljb24pID8gZGF0YS5pY29uIDogbnVsbDtcbiAgICAgICAgdmFyICR0bXBTY29wZSA9ICRyb290U2NvcGUuJG5ldyh0cnVlKTtcblxuICAgICAgICAvLyBzZXR1cCBzaW1wbGUgc2NvcGUgZm9yIG9ubHkgdGhpcyBhbGVydCBpdGVtXG4gICAgICAgICR0bXBTY29wZS5hbGVydCA9IHt9O1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQuaWQgPSBfaWQ7XG4gICAgICAgICR0bXBTY29wZS5hbGVydC5pY29uID0gKGRhdGEuaWNvbikgPyBkYXRhLmljb24gOiBudWxsO1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQudHlwZSA9IChkYXRhLnR5cGUpID8gZGF0YS50eXBlIDogJ2luZm8nO1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQudGl0bGUgPSBkYXRhLnRpdGxlO1xuICAgICAgICAkdG1wU2NvcGUuYWxlcnQuYWN0aW9uID0gKCFkYXRhLmNhbGxiYWNrKSA/IG51bGwgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYWN0aW9uRWwgPSB0aGlzLmlkO1xuICAgICAgICAgIGRhdGEuY2FsbGJhY2soKTtcbiAgICAgICAgICBjbGVhckVsKHRoaXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhbGVydEVsID0gJGNvbXBpbGUoYWxlcnRUZW1wbGF0ZSkoJHRtcFNjb3BlKTtcblxuICAgICAgICAvLyBzZXQgYSB1bmlxdWUgaWRcbiAgICAgICAgYWxlcnRFbFswXS5pZCA9IF9pZDtcbiAgICAgICAgcHJldmlvdXNJZCA9IF9pZDtcblxuICAgICAgICAvLyB0aHJvdyBpbnRvIGRvbSwgdGhlbiBzaG93IGluIHZpZXcsIHN0YXJ0IHRpbWVyXG4gICAgICAgIF9lbC5hcHBlbmQoYWxlcnRFbCk7XG4gICAgICAgIGFsZXJ0RWwuYWRkQ2xhc3MoYWxlcnRBY3RpdmUpO1xuXG4gICAgICAgIC8vIHNob3dcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYWxlcnRFbC5hZGRDbGFzcyhhbGVydFZpc2libGUpO1xuICAgICAgICB9LCAyMCk7XG5cbiAgICAgICAgdGltZXIgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGVhckVsKGFsZXJ0RWwpO1xuICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsZWFyRWwoZWxlbSkge1xuICAgICAgICBpZiAoIWVsZW0gJiYgcHJldmlvdXNJZCkge1xuICAgICAgICAgIGVsZW0gPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJldmlvdXNJZCkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFlbGVtKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW0pIHtcbiAgICAgICAgICBlbGVtID0gYW5ndWxhci5lbGVtZW50KGVsZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbS5yZW1vdmVDbGFzcyhhbGVydFZpc2libGUpO1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtLnJlbW92ZSgpO1xuICAgICAgICB9LCAzMDApO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiRvbignQUxFUlQ6RklSRScsIGZ1bmN0aW9uKGUsIGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhLnRpdGxlKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICBjbGVhckVsKCk7XG5cbiAgICAgICAgaWYgKGRhdGEuZHVyKSB7XG4gICAgICAgICAgZHVyYXRpb24gPSBkYXRhLmR1ciAqIDEwMDA7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93TWVzc2FnZShkYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dKTtcbiIsIi8qKlxuICogZmFkZUluXG4gKiBBIGRpcmVjdGl2ZSBmb3IgYW5pbWF0aW5nIGluIGVsZW1lbnRzXG4gKi9cbk1VRy5kaXJlY3RpdmUoJ2ZhZGVJbicsIFsgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbSwgYXR0cnMpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChhdHRycy5mYWRlSW4pIHx8IDEwO1xuICAgICAgICAgICAgZWxlbS5hZGRDbGFzcygnZmFkZS1pbicpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBlbGVtLmNzcyhcIm9wYWNpdHlcIiwgXCIxXCIpO1xuICAgICAgICAgICAgfSwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgIH07XG59XSk7XG4iLCIvKipcbiAqIE1vZGFsXG4gKiBCdWlsZHMgYSBtb2RhbCBmb3IgaW1hZ2Ugdmlld2luZyBhbmQgY29tcGFyaW5nXG4gKlxuICogQHVzYWdlXG4gKiA8bW9kYWw+PC9tb2RhbD5cbiAqL1xuTVVHLmRpcmVjdGl2ZSgnbW9kYWwnLFxuWyckdGltZW91dCcsICckY29tcGlsZScsICckcm9vdFNjb3BlJywgJ0NvbXBhcmUnLFxuZnVuY3Rpb24oJHRpbWVvdXQsICRjb21waWxlLCAkcm9vdFNjb3BlLCBDb21wYXJlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiAnbW9kYWwuaHRtbCcsXG4gICAgc2NvcGU6IHt9LFxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyKSB7XG4gICAgICB2YXIgbW9kYWxBY3RpdmUgPSAnbW9kYWwtb3Blbic7XG4gICAgICB2YXIgbW9kYWxWaXNpYmxlID0gJ21vZGFsLXZpc2libGUnO1xuXG4gICAgICAvLyAkc2NvcGUuYWN0aXZlT3B0aW9uID0gJ292ZXJsYXknO1xuICAgICAgJHNjb3BlLmFjdGl2ZU9wdGlvbiA9ICdzaWRlcyc7XG4gICAgICAkc2NvcGUub3BhY2l0eVJhbmdlID0ge307XG4gICAgICAkc2NvcGUuY3VycmVudEluZGV4ID0gMDtcbiAgICAgICRzY29wZS5hY3RpdmVJdGVtID0ge307XG4gICAgICAkc2NvcGUuY29tcGFyZUl0ZW0gPSB7XG4gICAgICAgIGI6IHt9LFxuICAgICAgICBjOiB7fVxuICAgICAgfTtcbiAgICAgICRzY29wZS52aWV3ZXIgPSB7XG4gICAgICAgIGl0ZW1zOiBbXVxuICAgICAgfTtcbiAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UgPSB7XG4gICAgICAgIGFtb3VudDogMC44LFxuICAgICAgICBpbnZlcnNlOiAwLjIsXG4gICAgICAgIHBlcmNlbnQ6ICc4MCUnXG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJHdhdGNoKCdvcGFjaXR5UmFuZ2UuYW1vdW50JywgZnVuY3Rpb24obnYsIG92KSB7XG4gICAgICAgIGlmIChudiA9PT0gb3YpIHtyZXR1cm47fVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgb3RoZXIgdmFsdWVzXG4gICAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UuaW52ZXJzZSA9ICgxIC0gbnYpLnRvRml4ZWQoMik7XG4gICAgICAgICRzY29wZS5vcGFjaXR5UmFuZ2UucGVyY2VudCA9IE1hdGgucm91bmQobnYgKiAxMDApICsgJyUnO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBhcmVTaW5nbGUoYSkge1xuICAgICAgICAvL1RPRE86cmVtb3ZldGhpc1xuICAgICAgICB2YXIgYiA9ICdzY3JlZW5zL2NvbXBhcmUvYm9keV90YWJsZXRfcHJvamVjdElkUmFuZHVtXzAucG5nJztcblxuICAgICAgICAvLyB2YXIgYiA9ICdzY3JlZW5zL2NvbXBhcmUvYm9keV9waG9uZV9wcm9qZWN0SWRSYW5kdW1fMC5wbmcnO1xuXG4gICAgICAgIENvbXBhcmUucnVuU2luZ2xlKGEsIGIpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ3JlcycsIHJlcyk7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgdmlldyB3aXRoIHByb2Nlc3NlZCBpbWFnZVxuICAgICAgICAgICRzY29wZS5jb21wYXJlSXRlbS5iLnNyYyA9IGI7XG4gICAgICAgICAgJHNjb3BlLmNvbXBhcmVJdGVtLmMgPSByZXM7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgdGhlIGFjdGl2ZUl0ZW0gd2l0aCB0aGUgcHJvY2Vzc2VkIHZhbHVlc1xuICAgICAgICAgICRzY29wZS5hY3RpdmVJdGVtLmFuYWx5c2lzID0gcmVzLnJlcG9ydC5hbmFseXNpc1RpbWU7XG4gICAgICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0uc3RhdHVzID0gQ29tcGFyZS5nZXRTdGF0dXMocmVzLnJlcG9ydCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2VycicsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaG9vc2UgdGhlIHZpZXdlciBsYXlvdXRcbiAgICAgICRzY29wZS5vcHRpb25Nb2RlID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgICAkc2NvcGUuYWN0aXZlT3B0aW9uID0gdHlwZTtcbiAgICAgIH07XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCdNT0RBTDpDTE9TRScsIGZ1bmN0aW9uKGUsIGFyZ3MpIHtcbiAgICAgICAgJHNjb3BlLmNsb3NlKCk7XG4gICAgICB9KTtcblxuICAgICAgJHJvb3RTY29wZS4kb24oJ01PREFMOk9QRU4nLCBmdW5jdGlvbihlLCBhcmdzKSB7XG4gICAgICAgIGlmICghYXJncyB8fCAhYXJncy50eXBlKSB7IHJldHVybjsgfVxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0byByZXNldCBjdXJyZW50IEluZGV4XG4gICAgICAgICRzY29wZS5jdXJyZW50SW5kZXggPSAwO1xuXG4gICAgICAgIC8vIFNob3cgYSBzaW5nbGUgaXRlbVxuICAgICAgICBpZiAoYXJncy50eXBlID09PSAncHJldmlldycpIHtcbiAgICAgICAgICAkc2NvcGUuYWN0aXZlSXRlbSA9IGFyZ3MuaXRlbTtcbiAgICAgICAgICAkc2NvcGUudmlld2VyID0gYXJncy5wcm9qZWN0IHx8IHt9O1xuICAgICAgICAgICRzY29wZS52aWV3ZXIuaXRlbXMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvdyBtdWx0aXBsZSBpdGVtc1xuICAgICAgICBpZiAoYXJncy50eXBlID09PSAnYmF0Y2gnICYmIGFyZ3MuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRzY29wZS5hY3RpdmVJdGVtID0gYXJncy5pdGVtc1skc2NvcGUuY3VycmVudEluZGV4XTtcbiAgICAgICAgICAkc2NvcGUudmlld2VyID0gYXJncy5wcm9qZWN0IHx8IHt9O1xuICAgICAgICAgICRzY29wZS52aWV3ZXIuaXRlbXMgPSBhcmdzLml0ZW1zO1xuXG4gICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIVxuICAgICAgICAgIGNvbXBhcmVTaW5nbGUoJHNjb3BlLmFjdGl2ZUl0ZW0uc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1ha2UgdGhlIG1vZGFsIGFjdGl2ZSB3aXRoIGRhdGFcbiAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MobW9kYWxBY3RpdmUpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MobW9kYWxWaXNpYmxlKTtcbiAgICAgICAgfSwgMzApO1xuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhtb2RhbFZpc2libGUpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MobW9kYWxBY3RpdmUpO1xuICAgICAgICB9LCAyMzApO1xuICAgICAgfTtcblxuICAgICAgLy8gU2V0dXAgb2YgbGVmdC9yaWdodCBuYXZpZ2F0aW9uXG4gICAgICAkc2NvcGUubW9kYWxBY3Rpb25OYXYgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIGlmICgkc2NvcGUudmlld2VyLml0ZW1zLmxlbmd0aCA8IDEpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdmFyIHRvdGFsID0gJHNjb3BlLnZpZXdlci5pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgbmV4dElkeDtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIG5leHRJZHggPSAoJHNjb3BlLmN1cnJlbnRJbmRleCA9PT0gdG90YWwpID8gMCA6ICRzY29wZS5jdXJyZW50SW5kZXggKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHRJZHggPSAoJHNjb3BlLmN1cnJlbnRJbmRleCA9PT0gMCkgPyB0b3RhbCA6ICRzY29wZS5jdXJyZW50SW5kZXggLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSAkc2NvcGUudmlld2VyLml0ZW1zW25leHRJZHhdO1xuICAgICAgICAkc2NvcGUuY3VycmVudEluZGV4ID0gbmV4dElkeDtcblxuICAgICAgICAvLyBUT0RPOiByZW1vdmUhXG4gICAgICAgIGNvbXBhcmVTaW5nbGUoJHNjb3BlLmFjdGl2ZUl0ZW0uc291cmNlKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEdvIGRpcmVjdGx5IHRvIGFuIGl0ZW1cbiAgICAgICRzY29wZS5nb1RvSW5kZXggPSBmdW5jdGlvbihpZHgpIHtcbiAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50SW5kZXggPT09IGlkeCkge3JldHVybjt9XG5cbiAgICAgICAgJHNjb3BlLmFjdGl2ZUl0ZW0gPSAkc2NvcGUudmlld2VyLml0ZW1zW2lkeF07XG4gICAgICAgICRzY29wZS5jdXJyZW50SW5kZXggPSBpZHg7XG5cbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIVxuICAgICAgICBjb21wYXJlU2luZ2xlKCRzY29wZS5hY3RpdmVJdGVtLnNvdXJjZSk7XG4gICAgICB9O1xuXG4gICAgfVxuICB9O1xufV0pO1xuIiwiLyoqXG4gKiBtc2dDZW50ZXJcbiAqIGEgZGlyZWN0aXZlIGZvciBoYW5kbGluZyBhbGwgbWVzc2FnZSByZWxheSBmb3IgYSB1c2VyXG4gKlxuICogVVNFOlxuICogJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdNU0dDRU5URVI6RklSRScsIHsgbXNnOiBcIkhleSB0aGVyZSwgSW0gYSBtZXNzYWdlISFcIiwgZHVyOiA1LCB0eXBlOiBcImluZm9cIiwgaWNvbjogXCJpbmZvXCIsIGNhbGxiYWNrOiBmdW5jdGlvbigpe30gfSk7XG4gKlxuICogVFlQRVM6XG4gKiAtIERFRkFVTFQsIHNob3dzIGdyZWVuIG1lc3NhZ2UsIHVzZWQgZm9yIHN1Y2Nlc3NcbiAqIC0gV2FybmluZzogXCJ3YXJuXCIgLSBzaG93cyBvcmFuZ2UgbWVzc2FnZSwgdXNlZCBmb3IgZXJyb3JzIG9yIHdhcm5pbmdzXG4gKiAtIEluZm86IFwiaW5mb1wiIC0gc2hvd3MgZGFyayBibHVlIG1lc3NhZ2UsIHVzZWQgZm9yIGdlbmVyYWwgdGhpbmdzXG4gKlxuICogT1BUSU9OUzpcbiAqIC0gbXNnOiB0aGUgY29udGVudHMgb2YgdGhlIG1lc3NhZ2UsIChUT0RPOiBjYW4gYmUgaHRtbCBvciBzaW1wbGUgdGV4dClcbiAqIC0gY2FsbGJhY2s6IGEgZnVuY3Rpb24gdG8gZmlyZSBvbiBhY3Rpb24gdGFrZW4gb24gbWVzc2FnZVxuICogLSBkdXI6IHRoZSB0aW1lb3V0IG9mIHRoZSBtZXNzYWdlXG4gKiAtIHR5cGU6IHNlZSBhYm92ZSB0eXBlc1xuICogLSBpY29uOiBkZWZhdWx0IGlzIGdsb2JlLCBjYW4gYmUgc2V0IHRvIEFOWSBpLXNwcml0ZXMgKHNwcml0ZXMubGVzcylcbiAqL1xuTVVHLmRpcmVjdGl2ZSgnbXNnQ2VudGVyJyxcblsgXCIkcm9vdFNjb3BlXCIsIFwiJHRpbWVvdXRcIiwgXCIkY29tcGlsZVwiLFxuZnVuY3Rpb24gKCRyb290U2NvcGUsICR0aW1lb3V0LCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7fSxcbiAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRycywgY3RybCkge1xuICAgICAgdmFyIG1zZ1RlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJtc2dcIiBuZy1jbGljaz1cImFjdGlvbigpXCI+JytcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1zZy1pY25cIj48aSBjbGFzcz1cIml3IGktSUNPTlwiPjwvaT48L2Rpdj4nK1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwibXNnLWNvbnRcIj5CT0RZPC9kaXY+JytcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1zZy1hY3Rpb25cIj48aSBjbGFzcz1cImliIGktci1hcnJvd1wiPjwvaT48L2Rpdj4nK1xuICAgICAgICAnPC9kaXY+JztcblxuICAgICAgdmFyIF9lbCA9IGFuZ3VsYXIuZWxlbWVudChlbCk7XG4gICAgICB2YXIgdGltZXI7XG4gICAgICB2YXIgZHVyYXRpb24gPSA1MDAwO1xuICAgICAgdmFyIHByZXZpb3VzSWQgPSBcIlwiO1xuICAgICAgdmFyIGRlZmF1bHRJY29uID0gXCJpbmZvXCI7XG5cbiAgICAgIHNjb3BlLmJvZHkgPSBcIlwiO1xuICAgICAgc2NvcGUuY2FsbGJhY2sgPSBudWxsO1xuICAgICAgc2NvcGUuaWNvbiA9IGRlZmF1bHRJY29uO1xuICAgICAgc2NvcGUuYWN0aW9uID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGFjdGlvbkVsID0gX2VsLmZpbmQoXCIjXCIgKyB0aGlzLmlkKTtcbiAgICAgICAgc2NvcGUuY2FsbGJhY2soKTtcbiAgICAgICAgY2xlYXJFbCggYWN0aW9uRWwgKTtcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHNob3dNZXNzYWdlICggZGF0YSApe1xuICAgICAgICB2YXIgX2lkID0gKCtuZXcgRGF0ZSgpKTtcbiAgICAgICAgdmFyIG5ld0JvZHkgPSBkYXRhLm1zZztcbiAgICAgICAgdmFyIG5ld0ljbiA9IChkYXRhLmljb24pPyBkYXRhLmljb24gOiBkZWZhdWx0SWNvbjtcblxuICAgICAgICB2YXIgdGVtcGxhdGUgPSBtc2dUZW1wbGF0ZS5yZXBsYWNlKFwiQk9EWVwiLCBuZXdCb2R5KS5yZXBsYWNlKFwiSUNPTlwiLCBuZXdJY24pO1xuICAgICAgICB2YXIgbmV3TWVzc2FnZSA9ICRjb21waWxlKHRlbXBsYXRlKShzY29wZSk7XG5cbiAgICAgICAgLy8gc2V0IGEgdW5pcXVlIGlkXG4gICAgICAgIG5ld01lc3NhZ2VbMF0uaWQgPSBfaWQ7XG4gICAgICAgIHByZXZpb3VzSWQgPSBfaWQ7XG5cbiAgICAgICAgLy8gdGhyb3cgaW50byBkb20sIHRoZW4gc2hvdyBpbiB2aWV3LCBzdGFydCB0aW1lclxuICAgICAgICBfZWwuYXBwZW5kKCBuZXdNZXNzYWdlICk7XG5cbiAgICAgICAgLy8gcmVtZW1iZXIgdGhlIG5ldyBlbCBmb3IgbGF0ZXJcbiAgICAgICAgdmFyIG1zZ0VsID0gX2VsLmZpbmQoXCIjXCIgKyBfaWQpO1xuICAgICAgICBjaGFuZ2VUeXBlKCBtc2dFbCwgZGF0YS50eXBlICk7XG5cbiAgICAgICAgaWYoZGF0YS5jYWxsYmFjayl7XG4gICAgICAgICAgbXNnRWwuZmluZChcIi5tc2ctYWN0aW9uXCIpLmFkZENsYXNzKFwic2hvd1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3dcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbXNnRWwuYWRkQ2xhc3MoJ2FkZCcpO1xuICAgICAgICB9LCAyMCk7XG5cbiAgICAgICAgdGltZXIgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFyRWwoIG1zZ0VsICk7XG4gICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xlYXJFbCAoIGVsZW0gKSB7XG4gICAgICAgIGlmKCFlbGVtICYmIHByZXZpb3VzSWQpe1xuICAgICAgICAgIGVsZW0gPSBfZWwuZmluZChcIiNcIiArIHByZXZpb3VzSWQpO1xuICAgICAgICB9IGVsc2UgaWYoIWVsZW0pIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgZWxlbS5yZW1vdmVDbGFzcygnYWRkJyk7XG4gICAgICAgIGVsZW0uYWRkQ2xhc3MoJ3JlbW92ZScpO1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtKS5yZW1vdmUoKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHRoZSB0eXBlIGJ5IGEgY2xhc3NcbiAgICAgIGZ1bmN0aW9uIGNoYW5nZVR5cGUgKCBlbGVtLCB0eXBlICkge1xuICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKCdtc2ctaW5mbycpO1xuICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKCdtc2ctd2FybicpO1xuXG4gICAgICAgIGlmKHR5cGUpe1xuICAgICAgICAgIGVsZW0uYWRkQ2xhc3MoJ21zZy0nICsgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kb24oJ01TR0NFTlRFUjpGSVJFJywgZnVuY3Rpb24oZSwgZGF0YSl7XG4gICAgICAgIGlmKCFkYXRhLm1zZyl7IHJldHVybjsgfVxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgY2xlYXJFbCgpO1xuXG4gICAgICAgIGlmKGRhdGEuZHVyKXtcbiAgICAgICAgICBkdXJhdGlvbiA9IGRhdGEuZHVyICogMTAwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGRhdGEuY2FsbGJhY2spe1xuICAgICAgICAgIHNjb3BlLmNhbGxiYWNrID0gZGF0YS5jYWxsYmFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIHNob3dNZXNzYWdlKCBkYXRhICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCJNVUcuZmFjdG9yeSgndGltZUFnbycsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlcnZpY2UgPSB7fTtcblxuICBzZXJ2aWNlLnNldHRpbmdzID0ge1xuICAgIHJlZnJlc2hNaWxsaXM6IDYwMDAwLFxuICAgIGFsbG93RnV0dXJlOiBmYWxzZSxcbiAgICBzdHJpbmdzOiB7XG4gICAgICBwcmVmaXhBZ286IG51bGwsXG4gICAgICBwcmVmaXhGcm9tTm93OiBudWxsLFxuICAgICAgc3VmZml4QWdvOiAnYWdvJyxcbiAgICAgIHN1ZmZpeEZyb21Ob3c6ICdmcm9tIG5vdycsXG4gICAgICBzZWNvbmRzOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICAgIG1pbnV0ZTogJ2Fib3V0IGEgbWludXRlJyxcbiAgICAgIG1pbnV0ZXM6ICclZCBtaW51dGVzJyxcbiAgICAgIGhvdXI6ICdhYm91dCBhbiBob3VyJyxcbiAgICAgIGhvdXJzOiAnJWQgaG91cnMnLFxuICAgICAgZGF5OiAnYSBkYXknLFxuICAgICAgZGF5czogJyVkIGRheXMnLFxuICAgICAgbW9udGg6ICdhYm91dCBhIG1vbnRoJyxcbiAgICAgIG1vbnRoczogJyVkIG1vbnRocycsXG4gICAgICB5ZWFyOiAnYWJvdXQgYSB5ZWFyJyxcbiAgICAgIHllYXJzOiAnJWQgeWVhcnMnLFxuICAgICAgbnVtYmVyczogW11cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdHJpbURpZ2l0cyAoIG51bSApIHtcbiAgICAgIHZhciBtID0gbnVtLnRvU3RyaW5nKCkuc2xpY2UoMCwxMyk7XG4gICAgICByZXR1cm4gKG0ubGVuZ3RoID09IDEzKT8gcGFyc2VJbnQobSkgOiBudW07XG4gIH1cblxuICBzZXJ2aWNlLmluV29yZHMgPSBmdW5jdGlvbiAoZGlzdGFuY2VNaWxsaXMpIHtcbiAgICB2YXIgJGwgPSBzZXJ2aWNlLnNldHRpbmdzLnN0cmluZ3M7XG4gICAgdmFyIHByZWZpeCA9ICRsLnByZWZpeEFnbztcbiAgICB2YXIgc3VmZml4ID0gJGwuc3VmZml4QWdvO1xuICAgIGlmIChzZXJ2aWNlLnNldHRpbmdzLmFsbG93RnV0dXJlKSB7XG4gICAgICBpZiAoZGlzdGFuY2VNaWxsaXMgPCAwKSB7XG4gICAgICAgIHByZWZpeCA9ICRsLnByZWZpeEZyb21Ob3c7XG4gICAgICAgIHN1ZmZpeCA9ICRsLnN1ZmZpeEZyb21Ob3c7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBNYXRoLmFicyhkaXN0YW5jZU1pbGxpcykgLyAxMDAwO1xuICAgIHZhciBtaW51dGVzID0gc2Vjb25kcyAvIDYwO1xuICAgIHZhciBob3VycyA9IG1pbnV0ZXMgLyA2MDtcbiAgICB2YXIgZGF5cyA9IGhvdXJzIC8gMjQ7XG4gICAgdmFyIHllYXJzID0gZGF5cyAvIDM2NTtcblxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGUoc3RyaW5nT3JGdW5jdGlvbiwgbnVtYmVyKSB7XG4gICAgICB2YXIgc3RyaW5nID0gYW5ndWxhci5pc0Z1bmN0aW9uKHN0cmluZ09yRnVuY3Rpb24pID9cbiAgICAgIHN0cmluZ09yRnVuY3Rpb24obnVtYmVyLCBkaXN0YW5jZU1pbGxpcykgOiBzdHJpbmdPckZ1bmN0aW9uO1xuICAgICAgdmFyIHZhbHVlID0gKCRsLm51bWJlcnMgJiYgJGwubnVtYmVyc1tudW1iZXJdKSB8fCBudW1iZXI7XG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyVkL2ksIHZhbHVlKTtcbiAgICB9XG5cbiAgICB2YXIgd29yZHMgPSBzZWNvbmRzIDwgNDUgJiYgc3Vic3RpdHV0ZSgkbC5zZWNvbmRzLCBNYXRoLnJvdW5kKHNlY29uZHMpKSB8fFxuICAgICAgICBzZWNvbmRzIDwgOTAgJiYgc3Vic3RpdHV0ZSgkbC5taW51dGUsIDEpIHx8XG4gICAgICAgIG1pbnV0ZXMgPCA0NSAmJiBzdWJzdGl0dXRlKCRsLm1pbnV0ZXMsIE1hdGgucm91bmQobWludXRlcykpIHx8XG4gICAgICAgIG1pbnV0ZXMgPCA5MCAmJiBzdWJzdGl0dXRlKCRsLmhvdXIsIDEpIHx8XG4gICAgICAgIGhvdXJzIDwgMjQgJiYgc3Vic3RpdHV0ZSgkbC5ob3VycywgTWF0aC5yb3VuZChob3VycykpIHx8XG4gICAgICAgIGhvdXJzIDwgNDIgJiYgc3Vic3RpdHV0ZSgkbC5kYXksIDEpIHx8XG4gICAgICAgIGRheXMgPCAzMCAmJiBzdWJzdGl0dXRlKCRsLmRheXMsIE1hdGgucm91bmQoZGF5cykpIHx8XG4gICAgICAgIGRheXMgPCA0NSAmJiBzdWJzdGl0dXRlKCRsLm1vbnRoLCAxKSB8fFxuICAgICAgICBkYXlzIDwgMzY1ICYmIHN1YnN0aXR1dGUoJGwubW9udGhzLCBNYXRoLnJvdW5kKGRheXMgLyAzMCkpIHx8XG4gICAgICAgIHllYXJzIDwgMS41ICYmIHN1YnN0aXR1dGUoJGwueWVhciwgMSkgfHxcbiAgICAgICAgc3Vic3RpdHV0ZSgkbC55ZWFycywgTWF0aC5yb3VuZCh5ZWFycykpO1xuXG4gICAgdmFyIHNlcGFyYXRvciA9ICRsLndvcmRTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcgJyA6ICRsLndvcmRTZXBhcmF0b3I7XG4gICAgcmV0dXJuIFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdLmpvaW4oc2VwYXJhdG9yKS50cmltKCk7XG4gIH07XG5cbiAgc2VydmljZS5wYXJzZSA9IGZ1bmN0aW9uIChpc284NjAxKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoaXNvODYwMSkpIHtcbiAgICAgIGlzbzg2MDEgPSBpc284NjAxICsgXCJcIjtcbiAgICAgIC8vIGZvcm1hdCBmb3IgY29ycmVjdCBsZW5ndGhcbiAgICAgIHZhciBvcmlnaW5hbFRpbWVzdGFtcCA9IHRyaW1EaWdpdHMoIGlzbzg2MDEgKTtcbiAgICAgIHJldHVybiBwYXJzZUludChvcmlnaW5hbFRpbWVzdGFtcCwgMTApO1xuICAgIH1cbiAgICB2YXIgcyA9IChpc284NjAxIHx8ICcnKS50cmltKCk7XG4gICAgcyA9IHMucmVwbGFjZSgvXFwuXFxkKy8sICcnKTsgLy8gcmVtb3ZlIG1pbGxpc2Vjb25kc1xuICAgIHMgPSBzLnJlcGxhY2UoLy0vLCAnLycpLnJlcGxhY2UoLy0vLCAnLycpO1xuICAgIHMgPSBzLnJlcGxhY2UoL1QvLCAnICcpLnJlcGxhY2UoL1ovLCAnIFVUQycpO1xuICAgIHMgPSBzLnJlcGxhY2UoLyhbXFwrXFwtXVxcZFxcZClcXDo/KFxcZFxcZCkvLCAnICQxJDInKTsgLy8gLTA0OjAwIC0+IC0wNDAwXG4gICAgcmV0dXJuIG5ldyBEYXRlKHMpO1xuICB9O1xuXG4gIHJldHVybiBzZXJ2aWNlO1xufSk7XG4iLCJ2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTtcblxuTVVHLmZhY3RvcnkoJ0NvbXBhcmUnLFxuWyckcScsICdDb25maWcnLFxuZnVuY3Rpb24oJHEsIENvbmZpZykge1xuICAvLyBDb25maWcgdmFyc1xuICB2YXIgZmlsZURpclByZWZpeCA9IF9fZGlybmFtZSArICcvJztcbiAgdmFyIGltYWdlUHJlZml4ID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnO1xuICB2YXIgc3RhdHVzVHlwZXMgPSBbJ3Bhc3NlZCcsICd3YXJuaW5nJywgJ2ZhaWxlZCddO1xuXG4gIC8vIGFzeW5jIGhlbHBlclxuICBmdW5jdGlvbiByZWFkQXN5bmMoZmlsZSwgY2FsbGJhY2spIHtcbiAgICBmcy5yZWFkRmlsZShmaWxlRGlyUHJlZml4ICsgZmlsZSwgJ2Jhc2U2NCcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFRPRE86IGxldCB0aGUgYmFja2VuZCBwcm9jZXNzIGhhbmRsZSB0aGlzIVxuICBmdW5jdGlvbiBjb21wYXJlU2luZ2xlKGEsIGIpIHtcbiAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICB2YXIgb3V0cHV0ID0ge307XG5cbiAgICAvLyBBcHBseSBNYWluIENvbXBhcmUgQ29uZmlnXG4gICAgcmVzZW1ibGUub3V0cHV0U2V0dGluZ3MoQ29uZmlnLkNvbXBhcmUpO1xuXG4gICAgLy8gT3BlbiBib3RoIGZpbGVzLCBiZWZvcmUgd2UgYXJlIHJlYWR5IHRvIHByb2Nlc3NcbiAgICBhc3luYy5tYXAoW2EsIGJdLCByZWFkQXN5bmMsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgICAgdmFyIGFEYXRhID0gaW1hZ2VQcmVmaXggKyByZXN1bHRzWzBdO1xuICAgICAgdmFyIGJEYXRhID0gaW1hZ2VQcmVmaXggKyByZXN1bHRzWzFdO1xuXG4gICAgICAvLyBIYW5kbGVzIGVycm9yc1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICB9XG5cbiAgICAgIC8vIFJ1biB0aGUgY29tcGFyZSBmdW5jdGlvbiwgcmV0dXJuIHRoZSBkaWZmIGRhdGFcbiAgICAgIHJlc2VtYmxlKGFEYXRhKVxuICAgICAgICAuY29tcGFyZVRvKGJEYXRhKVxuICAgICAgICAuaWdub3JlQ29sb3JzKClcbiAgICAgICAgLm9uQ29tcGxldGUoZnVuY3Rpb24oZGlmZkRhdGEpIHtcbiAgICAgICAgICBvdXRwdXQucmVwb3J0ID0gZGlmZkRhdGE7XG4gICAgICAgICAgb3V0cHV0LnNyYyA9IGRpZmZEYXRhLmdldEltYWdlRGF0YVVybCgpO1xuXG4gICAgICAgICAgZGZkLnJlc29sdmUob3V0cHV0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGZkLnByb21pc2U7XG4gIH07XG5cbiAgcmV0dXJuIHtcblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHR3byBpbWFnZXMgYW5kIHJldHVybnMgYWxsIGRhdGEgd2l0aCBhbiBpbWFnZSBvZiBjaGFuZ2VzXG4gICAgICovXG4gICAgcnVuU2luZ2xlOiBjb21wYXJlU2luZ2xlLFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyB0aGUgdHlwZSBvZiBwYXNzL3dhcm4vZmFpbCBzdGF0dXNcbiAgICAgKi9cbiAgICBnZXRTdGF0dXM6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBtaXNNYXRjaFZhbHVlID0gcGFyc2VGbG9hdChkYXRhLm1pc01hdGNoUGVyY2VudGFnZSk7XG5cbiAgICAgIC8vIGxvd2VzdCB0b2xlcmFuY2VcbiAgICAgIGlmIChtaXNNYXRjaFZhbHVlIDwgMC4xKSB7XG5cbiAgICAgICAgLy8gV2FybiB0aGF0IGRpbWVuc2lvbnMgYXJlIGRpZmZlcmVuY2VcbiAgICAgICAgaWYgKGRhdGEuaXNTYW1lRGltZW5zaW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdHVzVHlwZXNbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXR1c1R5cGVzWzBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdhcm5pbmcgdG9sZXJhbmNlXG4gICAgICBpZiAobWlzTWF0Y2hWYWx1ZSA+IDAuMSAmJiBtaXNNYXRjaFZhbHVlIDwgMikge1xuICAgICAgICByZXR1cm4gc3RhdHVzVHlwZXNbMV07XG4gICAgICB9XG5cbiAgICAgIC8vIGVycm9yIHRvbGVyYW5jZSByZWFjaGVkXG4gICAgICByZXR1cm4gc3RhdHVzVHlwZXNbMl07XG4gICAgfVxuXG4gIH07XG59XSk7XG4iLCJNVUcuZmFjdG9yeSgnbm93VGltZScsXG5bJyR0aW1lb3V0JyxcbmZ1bmN0aW9uKCR0aW1lb3V0KSB7XG4gIHZhciBub3dUaW1lID0gRGF0ZS5ub3coKTtcbiAgdmFyIHVwZGF0ZVRpbWUgPSBmdW5jdGlvbigpIHtcbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIG5vd1RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgdXBkYXRlVGltZSgpO1xuICAgIH0sIDEwMDApO1xuICB9O1xuXG4gIHVwZGF0ZVRpbWUoKTtcbiAgcmV0dXJuIHtcbiAgICBnZXRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBub3dUaW1lO1xuICAgIH1cbiAgfTtcbn1dKTtcbiIsInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbk1VRy5mYWN0b3J5KCdQcm9qZWN0cycsXG5bJyRxJyxcbmZ1bmN0aW9uKCRxKSB7XG4gIC8vIENvbmZpZyB0aGUgbWFpbiBwYXRoc1xuICB2YXIgcHJvamVjdHNQYXRoID0gX19kaXJuYW1lICsgJy9wcm9qZWN0cy5qc29uJztcbiAgdmFyIHByb2plY3RGaWxlc1BhdGggPSBfX2Rpcm5hbWUgKyAnL3Byb2plY3RzLyc7XG5cbiAgLy8gQ3JlYXRlcyBhIFVVSUQgb2YgdGhlIHNwZWNpZmllZCBsZW5ndGhcbiAgZnVuY3Rpb24gY3JlYXRlVVVJRChzKSB7XG4gICAgdmFyIG47XG4gICAgaWYgKHR5cGVvZiBzID09ICdudW1iZXInICYmIHMgPT09IHBhcnNlSW50KHMsIDEwKSkge1xuICAgICAgcyA9IEFycmF5KHMgKyAxKS5qb2luKCd4Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMucmVwbGFjZSgveC9nLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBuID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNjEpICsgNDg7XG4gICAgICBuID0gbiA+IDU3ID8gKG4gKyA3ID4gOTAgPyBuICsgMTMgOiBuICsgNykgOiBuO1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBDcmVhdGVzIGEgSlNPTiBvYmplY3QgZm9yIGEgYmFzZWxpbmUgbmV3IHByb2plY3RcbiAgZnVuY3Rpb24gY3JlYXRlRHVtbXlQcm9qZWN0KHRvdGFsKSB7XG4gICAgdG90YWwgPSB0b3RhbCB8fCAwO1xuICAgIHZhciBwcm9qZWN0SWQgPSBjcmVhdGVVVUlEKDEyKTtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHByb2plY3RJZCxcbiAgICAgIHRpdGxlOiAnUHJvamVjdCAnICsgKHBhcnNlSW50KHRvdGFsLCAxMCkgKyAxKSxcbiAgICAgIHRpbWVzdGFtcDogKCtuZXcgRGF0ZSksXG4gICAgICB0b3RhbHM6IHtcbiAgICAgICAgc3VjY2VzczogbnVsbCxcbiAgICAgICAgd2FybmluZzogbnVsbCxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIHZpZXdzOiAwXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIFNldHMgdXAgdGhlIG5lZWRlZCBiYXNlIGRhdGEgZm9yIHN0b3JpbmcgYW4gaW5kaXZpZHVhbCBwcm9qZWN0XG4gIGZ1bmN0aW9uIGNyZWF0ZUR1bW15UHJvamVjdEZpbGUob3B0aW9ucykge1xuICAgIHZhciBwcm9qZWN0SWQgPSBjcmVhdGVVVUlEKDEyKTtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG9wdGlvbnMuaWQsXG4gICAgICB0aXRsZTogb3B0aW9ucy50aXRsZSxcbiAgICAgIHRpbWVzdGFtcDogb3B0aW9ucy50aW1lc3RhbXAsXG4gICAgICB2aWV3cG9ydHM6IFtdLFxuICAgICAgc2VsZWN0b3JzOiBbXSxcbiAgICAgIGNvb2tpZXM6IFtdLFxuICAgICAgbWV0YToge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIHJlYWR5RXZlbnQ6IG51bGwsXG4gICAgICAgIGRlbGF5OiBudWxsLFxuICAgICAgICBtaXNNYXRjaFRocmVzaG9sZDogbnVsbFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBHcmFicyBKU09OIGZpbGUgYW5kIGFwcHJvcHJpYXRlbHkgaGFuZGxlcyBlcnJvcnNcbiAgZnVuY3Rpb24gZ2V0SnNvbkZpbGUocGF0aCwgdHlwZSkge1xuICAgIHZhciBmaWxlO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZpbGUgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0ZjgnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBjb3VsZG4ndCBmaW5kIGZpbGVcbiAgICAgIGlmIChlLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICAgIHJldHVybiB0eXBlIHx8IHt9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5wYXJzZShmaWxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG5cbiAgICBnZXRBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldEpzb25GaWxlKHByb2plY3RzUGF0aCwgW10pO1xuICAgIH0sXG5cbiAgICBnZXRCeUlkOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIGdldEpzb25GaWxlKHByb2plY3RGaWxlc1BhdGggKyBpZCArICcuanNvbicpO1xuICAgIH0sXG5cbiAgICBnZXRUeXBlQnlJZDogZnVuY3Rpb24oaWQsIHR5cGUpIHtcbiAgICAgIHJldHVybiBnZXRKc29uRmlsZShwcm9qZWN0RmlsZXNQYXRoICsgaWQgKyAnXycgKyB0eXBlICsgJy5qc29uJywgW10pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGVzIGEgbmV3IHByb2plY3QsIGFuZCByZXR1cm5zIHRoZSBkYXRhIGluIGEgcHJvbWlzZVxuICAgICAqL1xuICAgIGNyZWF0ZU5ldzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKTtcbiAgICAgIHZhciBhbGxQcm9qZWN0cyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHByb2plY3RzUGF0aCwgJ3V0ZjgnKSk7XG4gICAgICB2YXIgbmV3UHJvamVjdERhdGEgPSBjcmVhdGVEdW1teVByb2plY3QoYWxsUHJvamVjdHMubGVuZ3RoKTtcbiAgICAgIHZhciBuZXdQcm9qZWN0RmlsZSA9IGNyZWF0ZUR1bW15UHJvamVjdEZpbGUobmV3UHJvamVjdERhdGEpO1xuXG4gICAgICBhbGxQcm9qZWN0cy51bnNoaWZ0KG5ld1Byb2plY3REYXRhKTtcblxuICAgICAgLy8gc2F2ZSB0aGUgZGF0YSB0byB0aGUgcHJvamVjdHMgbGlzdFxuICAgICAgZnMud3JpdGVGaWxlKHByb2plY3RzUGF0aCwgSlNPTi5zdHJpbmdpZnkoYWxsUHJvamVjdHMpLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGRmZC5yZWplY3QoZXJyKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzYXZlIGFzIGFuIGluZGl2aWR1YWwgZmlsZVxuICAgICAgICBmcy53cml0ZUZpbGUocHJvamVjdEZpbGVzUGF0aCArIG5ld1Byb2plY3REYXRhLmlkICsgJy5qc29uJywgSlNPTi5zdHJpbmdpZnkobmV3UHJvamVjdEZpbGUpLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBkZmQucmVqZWN0KGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcmVkaXJlY3QgdXNlciB0byB0aGUgc2V0dGluZ3MgcGFnZVxuICAgICAgICAgIGRmZC5yZXNvbHZlKG5ld1Byb2plY3REYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRmZC5wcm9taXNlO1xuICAgIH0sXG5cbiAgICAvLyBzYXZlIHRvIGZpbGUgYW5kIGxpc3RzLCByZXR1cm4gbGlzdCBkYXRhXG4gICAgc2F2ZTogZnVuY3Rpb24ocHJvamVjdERhdGEpIHtcbiAgICAgIHZhciBkZmQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIGFsbFByb2plY3RzID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocHJvamVjdHNQYXRoLCAndXRmOCcpKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBsaXN0aW5nIGRhdGFcbiAgICAgIGFsbFByb2plY3RzLm1hcChmdW5jdGlvbihvYmosIGlkeCkge1xuICAgICAgICBpZiAob2JqLmlkID09PSBwcm9qZWN0RGF0YS5pZCkge1xuICAgICAgICAgIGFsbFByb2plY3RzW2lkeF0udGl0bGUgPSBwcm9qZWN0RGF0YS50aXRsZTtcbiAgICAgICAgICBhbGxQcm9qZWN0c1tpZHhdLnRpbWVzdGFtcCA9ICgrbmV3IERhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gc2F2ZSBhcyBhbiBpbmRpdmlkdWFsIGZpbGVcbiAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0RmlsZXNQYXRoICsgcHJvamVjdERhdGEuaWQgKyAnLmpzb24nLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0RGF0YSksIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgbGlzdGluZyBkYXRhXG4gICAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0c1BhdGgsIEpTT04uc3RyaW5naWZ5KGFsbFByb2plY3RzKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJldHVybiB0aGUgbGlzdGluZyBkYXRhLCBzbyB3ZSBjYW4gdXBkYXRlIHRoZSBzaWRlcGFuZWxcbiAgICAgICAgICBkZmQucmVzb2x2ZShwcm9qZWN0RGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlcyBhIHNpbmdsZSBwcm9qZWN0IGJ5IElEXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGRmZCA9ICRxLmRlZmVyKCk7XG4gICAgICB2YXIgYWxsUHJvamVjdHMgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwcm9qZWN0c1BhdGgsICd1dGY4JykpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGxpc3RpbmcgZGF0YVxuICAgICAgYWxsUHJvamVjdHMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICAgIGlmIChvYmouaWQgPT09IGlkKSB7XG4gICAgICAgICAgYWxsUHJvamVjdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlIHByb2plY3QgZmlsZVxuICAgICAgZnMudW5saW5rKHByb2plY3RGaWxlc1BhdGggKyBpZCArICcuanNvbicsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgbGlzdGluZyBkYXRhXG4gICAgICAgIGZzLndyaXRlRmlsZShwcm9qZWN0c1BhdGgsIEpTT04uc3RyaW5naWZ5KGFsbFByb2plY3RzKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZGZkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJldHVyblxuICAgICAgICAgIGRmZC5yZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCJNVUcuZmlsdGVyKCd0aW1lQWdvJyxcblsnbm93VGltZScsICd0aW1lQWdvJyxcbmZ1bmN0aW9uIChub3dUaW1lLCB0aW1lQWdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgZnJvbVRpbWUgPSB0aW1lQWdvLnBhcnNlKHZhbHVlKTtcbiAgICB2YXIgZGlmZiA9IG5vd1RpbWUuZ2V0VGltZSgpIC0gZnJvbVRpbWU7XG4gICAgcmV0dXJuIHRpbWVBZ28uaW5Xb3JkcyhkaWZmKTtcbiAgfTtcbn1dKTtcbiIsIk1VRy5jb250cm9sbGVyKCdNYWluQ3RybCcsXG5bJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRzdGF0ZScsICdDb25maWcnLCAnUHJvamVjdHMnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkc3RhdGUsIENvbmZpZywgUHJvamVjdHMpIHtcbiAgJHJvb3RTY29wZS5jdXJyZW50UHJvamVjdElkID0gJyc7XG5cbiAgJHNjb3BlLmNyZWF0ZU5ld1Byb2plY3QgPSBmdW5jdGlvbigpIHtcbiAgICBQcm9qZWN0cy5jcmVhdGVOZXcoKS50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdTSURFUEFORUw6TkVXUFJPSkVDVCcsIHJlcyk7XG4gICAgICAkc3RhdGUuZ28oJ3Byb2plY3RzLnNldHRpbmdzJywgeyBpZDogcmVzLmlkIH0pO1xuICAgIH0sXG5cbiAgICBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdlcnInLCBlcnIpO1xuICAgIH0pO1xuICB9O1xuXG4gICRyb290U2NvcGUuJGVtaXQoJ0FMRVJUOkZJUkUnLCB7ICB0aXRsZTogJ0hleSB0aGVyZSwgSW0gYW4gYWxlcnQhIScsIGR1cjogNSwgdHlwZTogJ3N1Y2Nlc3MnIH0pO1xuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgJHJvb3RTY29wZS4kZW1pdCgnQUxFUlQ6RklSRScsIHsgIHRpdGxlOiAnSGV5IHRoZXJlLCBJbSBhbiBlcnJvciEhJywgZHVyOiA1LCB0eXBlOiAnZXJyb3InLCBpY29uOiAnc3RvcCcgfSk7XG4gIH0sIDMwMDApO1xuXG59XSk7XG4iLCJNVUcuY29udHJvbGxlcignUHJvamVjdEN0cmwnLFxuWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckc3RhdGVQYXJhbXMnLCAnUHJvamVjdHMnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkc3RhdGVQYXJhbXMsIFByb2plY3RzKSB7XG5cbiAgLy8gQWxsb3cgdGhlIGNoaWxkIHZpZXdzIHRvIGJpbmQgdG8gc2FtZSBzY29wZVxuICAkcm9vdFNjb3BlLnByb2plY3QgPSBQcm9qZWN0cy5nZXRCeUlkKCRzdGF0ZVBhcmFtcy5pZCk7XG5cbn1dKTtcbiIsIk1VRy5jb250cm9sbGVyKCdQcm9qZWN0SGlzdG9yeUN0cmwnLFxuWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckc3RhdGVQYXJhbXMnLCAnUHJvamVjdHMnLFxuZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkc3RhdGVQYXJhbXMsIFByb2plY3RzKSB7XG4gICRzY29wZS5hY3RpdmVGaWx0ZXIgPSAnQWxsJztcbiAgJHNjb3BlLmFjdGl2ZUZpbHRlclF1ZXJ5ID0gJyc7XG5cbiAgLy8gZ3JhYiBhbGwgdGhlIGhpc3RvcnkgZGF0YVxuICAkc2NvcGUuaGlzdG9yeUl0ZW1zID0gUHJvamVjdHMuZ2V0VHlwZUJ5SWQoJHN0YXRlUGFyYW1zLmlkLCAnaGlzdG9yeScpO1xuXG4gICRzY29wZS5jaGFuZ2VGaWx0ZXIgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgJHNjb3BlLmFjdGl2ZUZpbHRlciA9IHR5cGU7XG4gICAgJHNjb3BlLmFjdGl2ZUZpbHRlclF1ZXJ5ID0gKHR5cGUgPT0gJ0FsbCcpID8gJycgOiB0eXBlO1xuICB9O1xuXG4gICRzY29wZS5wcmV2aWV3SXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAkcm9vdFNjb3BlLiRlbWl0KCdNT0RBTDpPUEVOJywgeyB0eXBlOiAncHJldmlldycsIGl0ZW06IGl0ZW0sIHByb2plY3Q6ICRyb290U2NvcGUucHJvamVjdCB9KTtcbiAgfTtcblxufV0pO1xuIiwiTVVHLmNvbnRyb2xsZXIoJ1Byb2plY3RSdW5uZXJDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHRpbWVvdXQnLCAnJHN0YXRlUGFyYW1zJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHRpbWVvdXQsICRzdGF0ZVBhcmFtcywgUHJvamVjdHMpIHtcbiAgJHNjb3BlLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgJHNjb3BlLmhhc1NldHRpbmdzID0gdHJ1ZTsgLy8gVE9ETzogbWFrZSB0aGlzIHJlYWxcbiAgJHNjb3BlLmhhc1JlZmVyZW5jZSA9IHRydWU7IC8vIFRPRE86IG1ha2UgdGhpcyByZWFsXG4gICRzY29wZS5hY3RpdmVGaWx0ZXIgPSAnQWxsJztcbiAgJHNjb3BlLmJhdGNoSXRlbXMgPSBbXTtcbiAgJHNjb3BlLmFjdGl2ZURhdGEgPSB7fTtcbiAgJHNjb3BlLmN1cnJlbnRCYXRjaCA9ICRyb290U2NvcGUucHJvamVjdC5jdXJyZW50QmF0Y2ggfHwgMDtcbiAgJHNjb3BlLnByb2dyZXNzID0ge1xuICAgIHBlcmNlbnQ6IDBcbiAgfTtcblxuICAvLyBTZXQgdGhlIGFjdGl2ZSBkYXRhIGJhc2VkIG9uIGN1cnJlbnRCYXRjaFxuICAkc2NvcGUuYWN0aXZlRGF0YSA9ICgkcm9vdFNjb3BlLnByb2plY3QgJiYgJHJvb3RTY29wZS5wcm9qZWN0LmJhdGNoSGlzdG9yeSkgPyAkcm9vdFNjb3BlLnByb2plY3QuYmF0Y2hIaXN0b3J5WyRzY29wZS5jdXJyZW50QmF0Y2hdIDogbnVsbDtcblxuICAvLyBQdXRzIGRhdGEgaW50byBzb3J0ZWQgc2VjdGlvbnNcbiAgZnVuY3Rpb24gcHJvY2Vzc0JhdGNoKGFsbERhdGEpIHtcbiAgICBpZiAoIWFsbERhdGEgfHwgYWxsRGF0YS5sZW5ndGggPCAxKSB7XG4gICAgICAkc2NvcGUuaGFzUmVmZXJlbmNlID0gZmFsc2U7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlZCA9IFt7IHR5cGU6ICdzdWNjZXNzJywgaXRlbXM6IFtdfSwgeyB0eXBlOiAnd2FybmluZycsIGl0ZW1zOiBbXX0sIHsgdHlwZTogJ2Vycm9yJywgaXRlbXM6IFtdfV07XG5cbiAgICBmdW5jdGlvbiBwbGFjZUl0ZW0oaXRlbSkge1xuXG4gICAgICAvLyBLZWVwIHRoaW5ncyBvcmdhbml6ZXMgd2l0aCBwcmVzZXQgcHJpb3JpdHlcbiAgICAgIGlmIChpdGVtLnN0YXR1cykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gMDtcblxuICAgICAgICBzd2l0Y2ggKGl0ZW0uc3RhdHVzKSB7XG4gICAgICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgICAgICB0YXJnZXQgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgICAgIHRhcmdldCA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdHRlZFt0YXJnZXRdLml0ZW1zLnVuc2hpZnQoaXRlbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWxsRGF0YS5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgIGlmIChvYmouYmF0Y2ggPT09ICRzY29wZS5jdXJyZW50QmF0Y2gpIHtcbiAgICAgICAgcGxhY2VJdGVtKG9iaik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm9ybWF0dGVkO1xuICB9XG5cbiAgLy8gVE9ETzpcbiAgLy8gKiBQcm9ncmVzcyBCYXJcbiAgLy8gICAqIExpc3RlbiB0byBQcm9ncmVzcyBldmVudFxuICAvLyAqIEludHJvXG4gIC8vICAgKiBzZWUgbGFzdCBydW4gKGlmIGFueSlcbiAgLy8gICAqIHN0YXJ0IG5ldyBydW5cbiAgLy8gICAqIHN0YXJ0IHJlZmVyZW5jZVxuICAvLyAqIFN0YXRzIChwYXNzL2ZhaWwpXG5cbiAgJHNjb3BlLmNoYW5nZUZpbHRlciA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAkc2NvcGUuYWN0aXZlRmlsdGVyID0gdHlwZTtcbiAgfTtcblxuICAvLyBncmFiIGFsbCB0aGUgcnVubmVyIHRlc3QgZGF0YVxuICB2YXIgaGlzdG9yeURhdGEgPSBQcm9qZWN0cy5nZXRUeXBlQnlJZCgkc3RhdGVQYXJhbXMuaWQsICdoaXN0b3J5Jyk7XG5cbiAgLy8gU3RvcmUgdGhlIHByb2Nlc3NlZCBkYXRhIGludG8gdGhlIGJhdGNoIGRhdGFcbiAgJHNjb3BlLmJhdGNoSXRlbXMgPSBwcm9jZXNzQmF0Y2goaGlzdG9yeURhdGEpO1xuXG4gIC8vIEZpcmUgb2ZmIHRoZSB2aWV3ZXJcbiAgJHNjb3BlLnByZXZpZXdCYXRjaCA9IGZ1bmN0aW9uKGl0ZW1zKSB7XG4gICAgJHJvb3RTY29wZS4kZW1pdCgnTU9EQUw6T1BFTicsIHsgdHlwZTogJ2JhdGNoJywgaXRlbXM6IGl0ZW1zLCBwcm9qZWN0OiAkcm9vdFNjb3BlLnByb2plY3QgfSk7XG4gIH07XG5cbiAgLy8gVE9ETzogZmluaXNoXG4gIC8vIEZpcmUgb2ZmIGEgbmV3IHRlc3QhIVxuICAkc2NvcGUucnVuTmV3VGVzdCA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS5wcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLnByb2dyZXNzLnBlcmNlbnQgPSAxMjtcbiAgICB9LCAyMDApO1xuXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUucHJvZ3Jlc3MucGVyY2VudCA9IDU2O1xuICAgIH0sIDcwMCk7XG5cbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5wcm9ncmVzcy5wZXJjZW50ID0gOTM7XG4gICAgfSwgMTgwMCk7XG5cbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5wcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgfSwgMjAwMCk7XG4gIH07XG5cbiAgJHJvb3RTY29wZS4kb24oJ1JVTk5FUjpQUk9HUkVTUzpVUERBVEUnLCBmdW5jdGlvbihlLCBhcmdzKSB7XG4gICAgaWYgKCFhcmdzKSB7cmV0dXJuO31cblxuICAgIC8vIHVwZGF0ZSB0aGUgcHJvZ3Jlc3MhXG4gICAgJHNjb3BlLnByb2dyZXNzLnBlcmNlbnQgPSBwYXJzZUludChhcmdzLnBlcmNlbnQsIDEwKTtcbiAgfSk7XG5cbn1dKTtcbiIsIk1VRy5jb250cm9sbGVyKCdQcm9qZWN0U2V0dGluZ3NDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBQcm9qZWN0cykge1xuICB2YXIgc2F2ZVRpbWVyO1xuXG4gICRzY29wZS5zZWxlY3RvclR5cGVzID0gWydjb250YWluZXInLCAnaGlkZScsICdyZW1vdmUnXTtcbiAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgJHNjb3BlLm1hc3RlciA9IHt9O1xuICBhbmd1bGFyLmNvcHkoJHJvb3RTY29wZS5wcm9qZWN0LCAkc2NvcGUubWFzdGVyKTtcblxuICBmdW5jdGlvbiBhZGROZXdUeXBlKHR5cGUsIGRhdGEpIHtcbiAgICAkcm9vdFNjb3BlLnByb2plY3RbdHlwZV0ucHVzaChkYXRhKTtcbiAgfVxuXG4gIC8vIFdhdGNoIGZvciBjaGFuZ2VzLCBzbyB3ZSBjYW4gc2F2ZVxuICAkc2NvcGUuJHdhdGNoKCdwcm9qZWN0JywgZnVuY3Rpb24oblYsIG9WKSB7XG4gICAgaWYgKG5WICE9IG9WKSB7XG4gICAgICAkc2NvcGUuaGFzQ2hhbmdlcyA9IHRydWU7XG5cbiAgICAgIC8vIHNhdmUgdGhlIGZpbGUgZm9yIGNvbnZlbmllbmNlXG4gICAgICAkc2NvcGUuc2F2ZSgpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG5cbiAgLy8gVE9ETzogc2V0dXAgdmFsaWRhdGlvbnNcbiAgLy8gc2F2ZSB0aGUgY3VycmVudCBwcm9qZWN0XG4gICRzY29wZS5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNhdmVUaW1lcikge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChzYXZlVGltZXIpO1xuICAgIH1cblxuICAgIC8vIHRocm90dGxlIHRoZSBzYXZlcywgc2luY2Ugd2Ugc2F2ZSBvbiBhbnkgY2hhbmdlc1xuICAgIHNhdmVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgIC8vIFNhdmUgdGVoIHByb2plY3RvaWRcbiAgICAgIFByb2plY3RzLnNhdmUoJHJvb3RTY29wZS5wcm9qZWN0KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIHNpZGViYXIgd2l0aCBjaGFuZ2VzXG4gICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnU0lERVBBTkVMOlVQREFURScsIHJlcyk7XG5cbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIHJldmVydCBtb2RlbFxuICAgICAgICAgIGFuZ3VsYXIuY29weSgkcm9vdFNjb3BlLnByb2plY3QsICRzY29wZS5tYXN0ZXIpO1xuICAgICAgICAgICRzY29wZS5oYXNDaGFuZ2VzID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2VycicsIGVycik7XG4gICAgICAgIH0pO1xuICAgIH0sIDIwMCk7XG4gIH07XG5cbiAgLy8gcmV2ZXJ0IHRoZSBjdXJyZW50IHByb2plY3RcbiAgJHNjb3BlLmNhbmNlbFNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3VyZSA9IGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjbGVhciBhbGwgeW91ciBjaGFuZ2VzPycpO1xuICAgIGlmIChzdXJlKSB7XG4gICAgICAvLyBwdXQgcmV2ZXJ0IG1vZGVsIGludG8gdGhlIHByb2plY3QgbW9kZWxcbiAgICAgIGFuZ3VsYXIuY29weSgkc2NvcGUubWFzdGVyLCAkcm9vdFNjb3BlLnByb2plY3QpO1xuICAgICAgJHNjb3BlLmhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZGVsZXRlIHRoZSBwcm9qZWN0LCBhbmQgcmVtb3ZlIGZyb20gcHJvamVjdCBsaXN0cywgdGhlbiByZWRpcmVjdCB0byBtYWluXG4gICRzY29wZS5kZWxldGVQcm9qZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN1cmUgPSBjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgcHJvamVjdD8nKTtcbiAgICBpZiAoc3VyZSkge1xuICAgICAgdmFyIHByb2plY3RJRCA9ICRyb290U2NvcGUucHJvamVjdC5pZDtcblxuICAgICAgUHJvamVjdHMucmVtb3ZlKHByb2plY3RJRClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnU0lERVBBTkVMOlJFTU9WRScsIHsgaWQ6IHByb2plY3RJRCB9KTtcbiAgICAgICAgICAkc3RhdGUuZ28oJ21haW4nKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLnByb2plY3QgPSB7fTtcbiAgICAgICAgICAkc2NvcGUuaGFzQ2hhbmdlcyA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnInLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGRzIGEgbmV3IHZpZXdwb3J0IGl0ZW1cbiAgJHNjb3BlLmFkZFZpZXdwb3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld1ZpZXdwb3J0ID0ge1xuICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgbmFtZTogbnVsbCxcbiAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgaGVpZ2h0OiBudWxsXG4gICAgfTtcblxuICAgIGFkZE5ld1R5cGUoJ3ZpZXdwb3J0cycsIG5ld1ZpZXdwb3J0KTtcbiAgfTtcblxuICAvLyBBZGRzIGEgbmV3IHNlbGVjdG9yIGl0ZW1cbiAgJHNjb3BlLmFkZFNlbGVjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld1NlbGVjdG9yID0ge1xuICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgdHlwZTogJ2NvbnRhaW5lcicsXG4gICAgICBxdWVyeTogbnVsbFxuICAgIH07XG5cbiAgICBhZGROZXdUeXBlKCdzZWxlY3RvcnMnLCBuZXdTZWxlY3Rvcik7XG4gIH07XG5cbiAgLy8gQWRkcyBhIG5ldyBjb29raWUgaXRlbVxuICAkc2NvcGUuYWRkQ29va2llID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld0Nvb2tpZSA9IHtcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgIG5hbWU6IG51bGwsXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHBhdGg6IG51bGxcbiAgICB9O1xuXG4gICAgYWRkTmV3VHlwZSgnY29va2llcycsIG5ld0Nvb2tpZSk7XG4gIH07XG5cbiAgLy8gYWN0aXZhdGUgYSBjb29raWUvdmlldy9zZWxlY3RcbiAgJHNjb3BlLmFjdGl2YXRlVHlwZSA9IGZ1bmN0aW9uKHR5cGUsIGlkKSB7XG4gICAgJHJvb3RTY29wZS5wcm9qZWN0W3R5cGVdW2lkXS5hY3RpdmUgPSAoJHJvb3RTY29wZS5wcm9qZWN0W3R5cGVdW2lkXS5hY3RpdmUgPT09IHRydWUgfHwgJHJvb3RTY29wZS5wcm9qZWN0W3R5cGVdW2lkXS5hY3RpdmUgPT09ICd0cnVlJykgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAvLyBzYXZlIHRoZSBmaWxlIGZvciBjb252ZW5pZW5jZVxuICAgICRzY29wZS5zYXZlKCk7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGEgY29va2llL3ZpZXcvc2VsZWN0XG4gICRzY29wZS5kZWxldGVUeXBlSXRlbSA9IGZ1bmN0aW9uKHR5cGUsIGlkKSB7XG4gICAgJHJvb3RTY29wZS5wcm9qZWN0W3R5cGVdLnNwbGljZShpZCwgMSk7XG5cbiAgICAvLyBzYXZlIHRoZSBmaWxlIGZvciBjb252ZW5pZW5jZVxuICAgICRzY29wZS5zYXZlKCk7XG4gIH07XG5cbn1dKTtcbiIsInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbk1VRy5jb250cm9sbGVyKCdTaWRlUGFuZWxDdHJsJyxcblsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJywgJ1Byb2plY3RzJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBQcm9qZWN0cykge1xuICAkc2NvcGUucHJvamVjdHMgPSBbXTtcblxuICAvLyBncmFiIGFsbCBwcm9qZWN0cyBsaXN0XG4gICRzY29wZS5wcm9qZWN0cyA9IFByb2plY3RzLmdldEFsbCgpO1xuXG4gIC8vIGFkZCBuZXcgcHJvamVjdCB0byB0aGUgcHJvamVjdHMgbGlzdFxuICAkcm9vdFNjb3BlLiRvbignU0lERVBBTkVMOk5FV1BST0pFQ1QnLCBmdW5jdGlvbihlLCBhcmdzKSB7XG4gICAgaWYgKCFhcmdzIHx8ICFhcmdzLmlkKSB7IHJldHVybjsgfVxuXG4gICAgJHNjb3BlLnByb2plY3RzLnVuc2hpZnQoYXJncyk7XG4gIH0pO1xuXG4gIC8vIHVwZGF0ZSB0aGUgcHJvamVjdHMgbGlzdFxuICAkcm9vdFNjb3BlLiRvbignU0lERVBBTkVMOlVQREFURScsIGZ1bmN0aW9uKGUsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MuaWQpIHsgcmV0dXJuOyB9XG5cbiAgICAkc2NvcGUucHJvamVjdHMubWFwKGZ1bmN0aW9uKG9iaiwgaWR4KSB7XG4gICAgICBpZiAob2JqLmlkID09PSBhcmdzLmlkKSB7XG4gICAgICAgICRzY29wZS5wcm9qZWN0c1tpZHhdID0gYXJncztcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdXBkYXRlIHRoZSBwcm9qZWN0cyBsaXN0XG4gICRyb290U2NvcGUuJG9uKCdTSURFUEFORUw6UkVNT1ZFJywgZnVuY3Rpb24oZSwgYXJncykge1xuICAgIGlmICghYXJncyB8fCAhYXJncy5pZCkgeyByZXR1cm47IH1cblxuICAgICRzY29wZS5wcm9qZWN0cy5tYXAoZnVuY3Rpb24ob2JqLCBpZHgpIHtcbiAgICAgIGlmIChvYmouaWQgPT09IGFyZ3MuaWQpIHtcbiAgICAgICAgJHNjb3BlLnByb2plY3RzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICAkc2NvcGUuZ29Ub1Byb2plY3QgPSBmdW5jdGlvbihpZCkge1xuICAgIC8vIFRPRE86IGZpeCB0aGlzXG4gICAgLy8gdmFyIHR5cGUgPSAnc2V0dGluZ3MnO1xuICAgIHZhciB0eXBlID0gJ3J1bm5lcic7XG5cbiAgICAvLyBUT0RPOiBzZXR1cCB0byBmaWd1cmUgb3V0IGlmIHdlIG5lZWQgdG8gZ28gdG8gc2V0dGluZ3MsIG90aGVyd2lzZSBnbyB0byBydW5uZXJcbiAgICAkc3RhdGUuZ28oJ3Byb2plY3RzLicgKyB0eXBlLCB7IGlkOiBpZCB9KTtcbiAgICAkcm9vdFNjb3BlLmN1cnJlbnRQcm9qZWN0SWQgPSBpZDtcbiAgfVxuXG59XSk7XG4iLCIvKipcbiAqIENvbmZpZ1xuICovXG5NVUcuY29uc3RhbnQoJ0NvbmZpZycsIHtcbiAgRU5WOiAnU1RBR0UnLFxuICBTVEFHRToge1xuICB9LFxuICBQUk9EOiB7XG4gIH0sXG4gIENvbXBhcmU6IHtcbiAgICBlcnJvckNvbG9yOiB7XG4gICAgICByZWQ6IDI1NSxcbiAgICAgIGdyZWVuOiAwLFxuICAgICAgYmx1ZTogMjU1XG4gICAgfSxcbiAgICBlcnJvclR5cGU6ICdmbGF0JyxcbiAgICB0cmFuc3BhcmVuY3k6IDEsXG4gICAgbGFyZ2VJbWFnZVRocmVzaG9sZDogMFxuICB9XG59KTtcbiIsIk1VRy5jb25maWcoXG5bJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsXG5mdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cbiAgLy8gUm91dGVzXG4gIC8vIC9cbiAgLy8gL3Byb2plY3RzXG4gIC8vIC9wcm9qZWN0cy86aWQvcnVubmVyXG4gIC8vIC9wcm9qZWN0cy86aWQvaGlzdG9yeVxuICAvLyAvcHJvamVjdHMvOmlkL3NldHRpbmdzXG5cbiAgJHN0YXRlUHJvdmlkZXJcblxuICAvKipcbiAgICogQmFzZSBSb3V0ZVxuICAgKi9cbiAgLnN0YXRlKCdtYWluJywge1xuICAgIHVybDogJy8nLFxuICAgIHRlbXBsYXRlVXJsOiAnbWFpbi5odG1sJ1xuICB9KVxuXG4gIC8qKlxuICAgKiBQcm9qZWN0IFJvdXRlc1xuICAgKi9cbiAgLnN0YXRlKCdwcm9qZWN0cycsIHtcbiAgICB1cmw6ICcvcHJvamVjdHMvOmlkJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2plY3RzLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0Q3RybCdcbiAgfSlcbiAgLnN0YXRlKCdwcm9qZWN0cy5zZXR0aW5ncycsIHtcbiAgICB1cmw6ICcvc2V0dGluZ3MnLFxuICAgIHRlbXBsYXRlVXJsOiAncHJvamVjdHMuc2V0dGluZ3MuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1Byb2plY3RTZXR0aW5nc0N0cmwnXG4gIH0pXG4gIC5zdGF0ZSgncHJvamVjdHMucnVubmVyJywge1xuICAgIHVybDogJy9ydW5uZXInLFxuICAgIHRlbXBsYXRlVXJsOiAncHJvamVjdHMucnVubmVyLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0UnVubmVyQ3RybCdcbiAgfSlcbiAgLnN0YXRlKCdwcm9qZWN0cy5oaXN0b3J5Jywge1xuICAgIHVybDogJy9oaXN0b3J5JyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Byb2plY3RzLmhpc3RvcnkuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1Byb2plY3RIaXN0b3J5Q3RybCdcbiAgfSlcblxuICAvKipcbiAgICogU3RhdGljIFJvdXRlc1xuICAgKi9cblxuICAvLyAuc3RhdGUoJ21haW4uNDA0Jywge1xuICAvLyAgICAgdXJsOiBcIi80MDRcIixcbiAgLy8gICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy80MDQuaHRtbFwiLFxuICAvLyAgICAgaXNFeHRlcm5hbDogdHJ1ZVxuICAvLyB9KVxuXG4gIC8vIEVuZCBvZiB0aGUgd29ybGRcbiAgO1xuXG4gIC8vIHVybCByZS1yb3V0aW5nXG4gIC8vICR1cmxSb3V0ZXJQcm92aWRlclxuICAvLyAgIC53aGVuKCcvcHJvamVjdHMnLCAnLycpXG4gIC8vICAgLndoZW4oJy9wcm9qZWN0cy8nLCAnLycpO1xuXG4gIC8vIGlmIG5vbmUgb2YgdGhlIGFib3ZlIHN0YXRlcyBhcmUgbWF0Y2hlZCwgdXNlIHRoaXMgYXMgdGhlIGZhbGxiYWNrXG4gICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcbn1dKTtcbiIsIk1VRy5ydW4oWyckcm9vdFNjb3BlJywgJyRodHRwJyxcbmZ1bmN0aW9uKCRyb290U2NvcGUsICRodHRwKSB7XG5cbiAgLy8gaGVhZGVyc1xuICB2YXIgJGNvbW1vbiA9ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uO1xuICAkY29tbW9uWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbihldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcbiAgICBjb25zb2xlLmxvZygnJHN0YXRlQ2hhbmdlRXJyb3InLCBlcnJvcik7XG4gIH0pO1xuXG59XSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=