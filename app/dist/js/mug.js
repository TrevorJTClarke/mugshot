var MUG=angular.module("mugshot",["ui.router","mugtemplates"]);MUG.directive("alert",["$rootScope","$timeout","$compile","$templateCache",function(e,t,r,n){return{restrict:"E",replace:!0,template:'<div class="alert-parent"></div>',scope:{},link:function(o,i,c,a){function s(n){var o=+new Date,i=(n.title,n.icon?n.icon:null,e.$new(!0));i.alert={},i.alert.id=o,i.alert.icon=n.icon?n.icon:null,i.alert.type=n.type?n.type:"info",i.alert.title=n.title,i.alert.action=n.callback?function(){this.id;n.callback(),u(this)}:null;var c=r(p)(i);c[0].id=o,d=o,f.append(c),c.addClass(v),t(function(){c.addClass(g)},20),l=t(function(){u(c)},m)}function u(e){if(!e&&d)e=angular.element(document.getElementById(d));else{if(!e)return;e&&(e=angular.element(e))}e.removeClass(g),t(function(){e.remove()},300)}var l,p=n.get("alert.html"),f=angular.element(i),m=5e3,d="",v="alert-active",g="alert-visible";e.$on("ALERT:FIRE",function(e,t){t.title&&(window.clearTimeout(l),u(),t.dur&&(m=1e3*t.dur),s(t))})}}}]),MUG.directive("fadeIn",[function(){return{restrict:"A",link:function(e,t,r){var n=parseInt(r.fadeIn)||10;t.addClass("fade-in"),setTimeout(function(){t.css("opacity","1")},n)}}}]),MUG.directive("modal",["$timeout","$compile","$rootScope",function(e,t,r){return{restrict:"E",replace:!0,templateUrl:"modal.html",scope:{},link:function(e,t,n){function o(t){e.compareItem.a="screens/reference/"+r.project.id+"/"+t.source.replace(r.project.currentBatch+".png",r.project.currentReference+".png"),e.compareItem.b="screens/compare/"+r.project.id+"/"+t.source,e.compareItem.c="screens/compare/"+r.project.id+"/"+t.source.replace(".png","_diff.png")}var i="modal-open",c="modal-visible";e.project=angular.copy(r.project),e.activeOption="sides",e.opacityRange={},e.currentIndex=0,e.activeItem={},e.compareItem={a:"",b:"",c:""},e.viewer={items:[]},e.opacityRange={amount:.8,inverse:.2,percent:"80%"},e.$watch("opacityRange.amount",function(t,r){t!==r&&(e.opacityRange.inverse=(1-t).toFixed(2),e.opacityRange.percent=Math.round(100*t)+"%")}),e.optionMode=function(t){e.activeOption=t},r.$on("MODAL:CLOSE",function(t,r){e.close()}),r.$on("MODAL:OPEN",function(n,a){a&&a.type&&(e.currentIndex=0,e.project=angular.copy(r.project),"preview"===a.type&&(e.activeItem=a.item,e.viewer=a.project||{},e.viewer.items=null),"batch"===a.type&&a.items.length>0&&(e.activeItem=a.items[e.currentIndex],e.viewer=a.project||{},e.viewer.items=a.items,o(e.activeItem)),t.addClass(i),setTimeout(function(){t.addClass(c)},30))}),e.close=function(){t.removeClass(c),setTimeout(function(){t.removeClass(i)},230)},e.modalActionNav=function(t){if(!(e.viewer.items.length<1)){var r,n=e.viewer.items.length-1;r="right"===t?e.currentIndex===n?0:e.currentIndex+1:0===e.currentIndex?n:e.currentIndex-1,e.activeItem=e.viewer.items[r],e.currentIndex=r,o(e.activeItem)}},e.goToIndex=function(t){e.currentIndex!==t&&(e.activeItem=e.viewer.items[t],e.currentIndex=t,o(e.activeItem))}}}}]),MUG.directive("msgCenter",["$rootScope","$timeout","$compile",function(e,t,r){return{scope:{},link:function(n,o,i,c){function a(e){var o=+new Date,i=e.msg,c=e.icon?e.icon:v,a=p.replace("BODY",i).replace("ICON",c),g=r(a)(n);g[0].id=o,d=o,f.append(g);var h=f.find("#"+o);u(h,e.type),e.callback&&h.find(".msg-action").addClass("show"),t(function(){h.addClass("add")},20),l=t(function(){s(h)},m)}function s(e){if(!e&&d)e=f.find("#"+d);else if(!e)return;e.removeClass("add"),e.addClass("remove"),t(function(){angular.element(e).remove()},300)}function u(e,t){e.removeClass("msg-info"),e.removeClass("msg-warn"),t&&e.addClass("msg-"+t)}var l,p='<div class="msg" ng-click="action()"><div class="msg-icn"><i class="iw i-ICON"></i></div><div class="msg-cont">BODY</div><div class="msg-action"><i class="ib i-r-arrow"></i></div></div>',f=angular.element(o),m=5e3,d="",v="info";n.body="",n.callback=null,n.icon=v,n.action=function(){var e=f.find("#"+this.id);n.callback(),s(e)},e.$on("MSGCENTER:FIRE",function(e,t){t.msg&&(window.clearTimeout(l),s(),t.dur&&(m=1e3*t.dur),t.callback&&(n.callback=t.callback),a(t))})}}}]),MUG.directive("timeAgo",["timeAgoService","nowTimeService",function(e,t){return{restrict:"EA",link:function(r,n,o){var i;o.$observe("fromTime",function(t){i=e.parse(t)}),r.$watch(function(){return t.getTime()-i},function(t){angular.element(n).text(e.inWords(t))})}}}]);var fs=require("fs"),async=require("async");MUG.factory("Compare",["$q","Config",function(e,t){function r(e,t){fs.readFile(o+e,"base64",t)}function n(n,o){var c=e.defer(),a={};return resemble.outputSettings(t.Compare),async.map([n,o],r,function(e,t){var r=i+t[0],n=i+t[1];e&&c.reject(e),resemble(r).compareTo(n).ignoreColors().onComplete(function(e){a.report=e,a.src=e.getImageDataUrl(),c.resolve(a)})}),c.promise}var o=__dirname+"/",i="data:image/png;base64,",c=["passed","warning","failed"];return{runSingle:n,getStatus:function(e){var t=parseFloat(e.misMatchPercentage);return.1>t?e.isSameDimensions===!1?c[1]:c[0]:t>.1&&2>t?c[1]:c[2]}}}]),MUG.factory("nowTime",["$timeout",function(e){var t=Date.now(),r=function(){e(function(){t=Date.now(),r()},1e3)};return r(),{getTime:function(){return t}}}]);var fs=require("fs");MUG.factory("Projects",["$q",function(e){function t(e){return"number"==typeof e&&e===parseInt(e,10)&&(e=Array(e+1).join("x")),e.replace(/x/g,function(){var e=Math.round(61*Math.random())+48;return e=e>57?e+7>90?e+13:e+7:e,String.fromCharCode(e)})}function r(e){e=e||0;var r=t(12);return{id:r,title:"Project "+(parseInt(e,10)+1),timestamp:+new Date,totals:{success:null,warning:null,error:null,views:0}}}function n(e){t(12);return{id:e.id,title:e.title,timestamp:e.timestamp,viewports:[],selectors:[],cookies:[],meta:{url:null,readyEvent:null,delay:null,misMatchThreshold:null}}}function o(e,t){var r;try{r=fs.readFileSync(e,"utf8")}catch(n){if("ENOENT"===n.code)return t||{};throw n}return JSON.parse(r)}var i=__dirname+"/projects.json",c=__dirname+"/projects/";return{getAll:function(){return o(i,[])},getById:function(e){return o(c+e+".json")},getTypeById:function(e,t){return o(c+e+"_"+t+".json",[])},createNew:function(){var t=e.defer(),o=JSON.parse(fs.readFileSync(i,"utf8")),a=r(o.length),s=n(a);return o.unshift(a),fs.writeFile(i,JSON.stringify(o),function(e){return e?void t.reject(e):void fs.writeFile(c+a.id+".json",JSON.stringify(s),function(e){return e?void t.reject(e):void t.resolve(a)})}),t.promise},save:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(i,"utf8"));return n.map(function(e,r){e.id===t.id&&(n[r].title=t.title,n[r].timestamp=+new Date)}),fs.writeFile(c+t.id+".json",JSON.stringify(t),function(e){return e?void r.reject(e):void fs.writeFile(i,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve(t)})}),r.promise},remove:function(t){var r=e.defer(),n=JSON.parse(fs.readFileSync(i,"utf8"));return n.map(function(e,r){e.id===t&&n.splice(r,1)}),fs.unlink(c+t+".json",function(e){return e?void r.reject(e):void fs.writeFile(i,JSON.stringify(n),function(e){return e?void r.reject(e):void r.resolve()})}),r.promise}}}]),MUG.factory("timeAgo",function(){function e(e){var t=e.toString().slice(0,13);return 13==t.length?parseInt(t):e}var t={};return t.settings={refreshMillis:6e4,allowFuture:!1,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"%d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",numbers:[]}},t.inWords=function(e){function r(t,r){var o=angular.isFunction(t)?t(r,e):t,i=n.numbers&&n.numbers[r]||r;return o.replace(/%d/i,i)}var n=t.settings.strings,o=n.prefixAgo,i=n.suffixAgo;t.settings.allowFuture&&0>e&&(o=n.prefixFromNow,i=n.suffixFromNow);var c=Math.abs(e)/1e3,a=c/60,s=a/60,u=s/24,l=u/365,p=45>c&&r(n.seconds,Math.round(c))||90>c&&r(n.minute,1)||45>a&&r(n.minutes,Math.round(a))||90>a&&r(n.hour,1)||24>s&&r(n.hours,Math.round(s))||42>s&&r(n.day,1)||30>u&&r(n.days,Math.round(u))||45>u&&r(n.month,1)||365>u&&r(n.months,Math.round(u/30))||1.5>l&&r(n.year,1)||r(n.years,Math.round(l)),f=void 0===n.wordSeparator?" ":n.wordSeparator;return[o,p,i].join(f).trim()},t.parse=function(t){if(angular.isNumber(t)){t+="";var r=e(t);return parseInt(r,10)}var n=(t||"").trim();return n=n.replace(/\.\d+/,""),n=n.replace(/-/,"/").replace(/-/,"/"),n=n.replace(/T/," ").replace(/Z/," UTC"),n=n.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(n)},t}),MUG.filter("timeAgo",["nowTime","timeAgo",function(e,t){return function(r){var n=t.parse(r),o=e.getTime()-n;return t.inWords(o)}}]),MUG.controller("MainCtrl",["$rootScope","$scope","$state","Config","Projects",function(e,t,r,n,o){e.currentProjectId="",t.createNewProject=function(){o.createNew().then(function(t){e.$broadcast("SIDEPANEL:NEWPROJECT",t),r.go("projects.settings",{id:t.id})},function(e){console.log("err",e)})}}]),MUG.controller("ProjectCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){e.project=n.getById(r.id)}]),MUG.controller("ProjectHistoryCtrl",["$rootScope","$scope","$stateParams","Projects",function(e,t,r,n){t.activeFilter="All",t.activeFilterQuery="",t.historyItems=n.getTypeById(r.id,"history"),t.changeFilter=function(e){t.activeFilter=e,t.activeFilterQuery="All"==e?"":e},t.previewItem=function(t){e.$emit("MODAL:OPEN",{type:"preview",item:t,project:e.project})}}]);var ipc=require("ipc");MUG.controller("ProjectRunnerCtrl",["$rootScope","$scope","$timeout","$stateParams","Projects",function(e,t,r,n,o){function i(e){function r(e){if(e.status){var r=0;switch(e.status){case"warning":r=1;break;case"failed":r=2}n[r].items.unshift(e),t.activeData[n[r].type]=t.activeData[n[r].type]+1}}if(!e||e.length<1)return t.hasReference=!1,[];t.activeData={},t.activeData.success=0,t.activeData.warning=0,t.activeData.error=0;var n=[{type:"success",items:[]},{type:"warning",items:[]},{type:"error",items:[]}];return e.map(function(e,n){e.batch===t.currentBatch&&r(e)}),n}function c(){var e=o.getTypeById(n.id,"history");t.batchItems=i(e)}function a(e){e&&e.msg&&e.percent&&(t.progress.percent=parseInt(e.percent,10),t.progress.title=e.msg?e.msg:t.progress.title)}function s(){c(),t.processing=!1}function u(e){console.log("RUNNER:FAILED reason",e),t.processing=!1}t.processing=!1,t.hasSettings=!0,t.hasReference=!0,t.activeFilter="All",t.batchItems=[],t.activeData={},t.currentBatch=e.project.currentBatch||0,t.progress={percent:0},t.activeData=e.project&&e.project.batchHistory?e.project.batchHistory[t.currentBatch]:null,c(),t.previewBatch=function(t){e.$emit("MODAL:OPEN",{type:"batch",items:t,project:e.project})},t.newCompare=function(){t.processing=!0,ipc.send("RUNNER:FIRE",{type:"compare",projectId:e.project.id})},t.newReference=function(){t.processing=!0,ipc.send("RUNNER:FIRE",{type:"reference",projectId:e.project.id})},ipc.on("RUNNER:PROGRESS",a),ipc.on("RUNNER:COMPLETE",s),ipc.on("RUNNER:FAILED",u)}]),MUG.controller("ProjectSettingsCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){function o(t,r){e.project[t].push(r)}var i;t.selectorTypes=["container","hide","remove"],t.hasChanges=!1,t.master={},angular.copy(e.project,t.master),t.$watch("project",function(e,r){e!=r&&(t.hasChanges=!0,t.save())},!0),t.save=function(){i&&window.clearTimeout(i),i=setTimeout(function(){n.save(e.project).then(function(r){e.$emit("SIDEPANEL:UPDATE",r),angular.copy(e.project,t.master),t.hasChanges=!1},function(e){console.log("err",e)})},200)},t.cancelSave=function(){var r=confirm("Are you sure you want to clear all your changes?");r&&(angular.copy(t.master,e.project),t.hasChanges=!1)},t.deleteProject=function(){var o=confirm("Are you sure you want to delete this project?");if(o){var i=e.project.id;n.remove(i).then(function(n){e.$emit("SIDEPANEL:REMOVE",{id:i}),r.go("main"),e.project={},t.hasChanges=!1},function(e){console.log("err",e)})}},t.addViewport=function(){var e={active:!0,name:null,width:null,height:null};o("viewports",e)},t.addSelector=function(){var e={active:!0,type:"container",query:null};o("selectors",e)},t.addCookie=function(){var e={active:!0,name:null,value:null,path:null};o("cookies",e)},t.activateType=function(r,n){e.project[r][n].active=e.project[r][n].active===!0||"true"===e.project[r][n].active?!1:!0,t.save()},t.deleteTypeItem=function(r,n){e.project[r].splice(n,1),t.save()}}]);var fs=require("fs");MUG.controller("SidePanelCtrl",["$rootScope","$scope","$state","Projects",function(e,t,r,n){t.projects=[],t.projects=n.getAll(),e.$on("SIDEPANEL:NEWPROJECT",function(e,r){r&&r.id&&t.projects.unshift(r)}),e.$on("SIDEPANEL:UPDATE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&(t.projects[n]=r)})}),e.$on("SIDEPANEL:REMOVE",function(e,r){r&&r.id&&t.projects.map(function(e,n){e.id===r.id&&t.projects.splice(n,1)})}),t.goToProject=function(t){var n="runner";r.go("projects."+n,{id:t}),e.currentProjectId=t}}]),MUG.constant("Config",{ENV:"STAGE",STAGE:{},PROD:{},Compare:{errorColor:{red:255,green:0,blue:255},errorType:"flat",transparency:1,largeImageThreshold:0}}),MUG.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("main",{url:"/",templateUrl:"main.html"}).state("projects",{url:"/projects/:id",templateUrl:"projects.html",controller:"ProjectCtrl"}).state("projects.settings",{url:"/settings",templateUrl:"projects.settings.html",controller:"ProjectSettingsCtrl"}).state("projects.runner",{url:"/runner",templateUrl:"projects.runner.html",controller:"ProjectRunnerCtrl"}).state("projects.history",{url:"/history",templateUrl:"projects.history.html",controller:"ProjectHistoryCtrl"}),t.otherwise("/")}]),MUG.run(["$rootScope","$http",function(e,t){var r=t.defaults.headers.common;r["Content-Type"]="application/json",e.$on("$stateChangeError",function(e,t,r,n,o,i){console.log("$stateChangeError",i)})}]);
//# sourceMappingURL=data:application/json;base64,